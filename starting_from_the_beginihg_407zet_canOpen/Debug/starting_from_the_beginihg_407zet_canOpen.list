
starting_from_the_beginihg_407zet_canOpen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800b680  0800b680  0001b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbb4  0800bbb4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbbc  0800bbbc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbbc  0800bbbc  0001bbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800bbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          0000067c  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002205d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000496d  00000000  00000000  00042291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00046c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001390  00000000  00000000  00048010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026453  00000000  00000000  000493a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb8e  00000000  00000000  0006f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d729e  00000000  00000000  0008c381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016361f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c98  00000000  00000000  00163670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b668 	.word	0x0800b668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800b668 	.word	0x0800b668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000590:	73fb      	strb	r3, [r7, #15]
    return value;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	78fa      	ldrb	r2, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80005d0:	2304      	movs	r3, #4
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <OD_getIndex>:
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <OD_getIndex+0x14>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	e000      	b.n	80005f4 <OD_getIndex+0x16>
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000610:	2305      	movs	r3, #5
 8000612:	e003      	b.n	800061c <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	460b      	mov	r3, r1
 8000636:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000638:	7af9      	ldrb	r1, [r7, #11]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2304      	movs	r3, #4
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f001 fb94 	bl	8001d70 <OD_get_value>
 8000648:	4603      	mov	r3, r0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00c      	beq.n	8000680 <OD_read_1014_default+0x2e>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	7d1b      	ldrb	r3, [r3, #20]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d108      	bne.n	8000680 <OD_read_1014_default+0x2e>
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <OD_read_1014_default+0x2e>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d902      	bls.n	8000680 <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 8000680:	2309      	movs	r3, #9
 8000682:	e01a      	b.n	80006ba <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <OD_read_1014_default+0x44>
 8000692:	2300      	movs	r3, #0
 8000694:	e001      	b.n	800069a <OD_read_1014_default+0x48>
 8000696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800069a:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80006a2:	3380      	adds	r3, #128	; 0x80
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 80006aa:	6939      	ldr	r1, [r7, #16]
 80006ac:	68b8      	ldr	r0, [r7, #8]
 80006ae:	f7ff ff87 	bl	80005c0 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2204      	movs	r2, #4
 80006b6:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00f      	beq.n	80006f6 <OD_read_1003+0x34>
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00c      	beq.n	80006f6 <OD_read_1003+0x34>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <OD_read_1003+0x34>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d803      	bhi.n	80006f0 <OD_read_1003+0x2e>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	7d1b      	ldrb	r3, [r3, #20]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <OD_read_1003+0x34>
        || (count < 1U)) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80006f6:	2309      	movs	r3, #9
 80006f8:	e04d      	b.n	8000796 <OD_read_1003+0xd4>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	7f1b      	ldrb	r3, [r3, #28]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d801      	bhi.n	800070c <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000708:	2309      	movs	r3, #9
 800070a:	e044      	b.n	8000796 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0U) {
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	7d1b      	ldrb	r3, [r3, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10b      	bne.n	800072c <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800071a:	4619      	mov	r1, r3
 800071c:	68b8      	ldr	r0, [r7, #8]
 800071e:	f7ff ff3f 	bl	80005a0 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	e034      	b.n	8000796 <OD_read_1003+0xd4>
    } else if (stream->subIndex <= em->fifoCount) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	7d1a      	ldrb	r2, [r3, #20]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000736:	429a      	cmp	r2, r3
 8000738:	d82c      	bhi.n	8000794 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	7f5b      	ldrb	r3, [r3, #29]
 800073e:	b29a      	uxth	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	b29b      	uxth	r3, r3
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	b29b      	uxth	r3, r3
 800074a:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800074c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000750:	2b00      	cmp	r3, #0
 8000752:	da07      	bge.n	8000764 <OD_read_1003+0xa2>
            index += (int16_t)em->fifoSize;
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	7f1b      	ldrb	r3, [r3, #28]
 8000758:	b29a      	uxth	r2, r3
 800075a:	8afb      	ldrh	r3, [r7, #22]
 800075c:	4413      	add	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	e007      	b.n	8000774 <OD_read_1003+0xb2>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8000764:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	7f12      	ldrb	r2, [r2, #28]
 800076c:	4293      	cmp	r3, r2
 800076e:	db01      	blt.n	8000774 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 8000770:	2309      	movs	r3, #9
 8000772:	e010      	b.n	8000796 <OD_read_1003+0xd4>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	68b8      	ldr	r0, [r7, #8]
 8000786:	f7ff ff1b 	bl	80005c0 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2204      	movs	r2, #4
 800078e:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	e000      	b.n	8000796 <OD_read_1003+0xd4>
    } else {
        return ODR_NO_DATA;
 8000794:	2319      	movs	r3, #25
    }
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00c      	beq.n	80007cc <OD_write_1003+0x2e>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	7d1b      	ldrb	r3, [r3, #20]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d108      	bne.n	80007cc <OD_write_1003+0x2e>
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <OD_write_1003+0x2e>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d102      	bne.n	80007cc <OD_write_1003+0x2e>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 80007cc:	2309      	movs	r3, #9
 80007ce:	e012      	b.n	80007f6 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f7ff fed7 	bl	8000584 <CO_getUint8>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80007dc:	230f      	movs	r3, #15
 80007de:	e00a      	b.n	80007f6 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af02      	add	r7, sp, #8
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d01a      	beq.n	800084e <CO_EM_init+0x4e>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d017      	beq.n	800084e <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d103      	bne.n	800082c <CO_EM_init+0x2c>
 8000824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d810      	bhi.n	800084e <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00d      	beq.n	800084e <CO_EM_init+0x4e>
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00a      	beq.n	800084e <CO_EM_init+0x4e>
 8000838:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <CO_EM_init+0x4e>
 8000840:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000844:	2b00      	cmp	r3, #0
 8000846:	db02      	blt.n	800084e <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8000848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e0a7      	b.n	80009a4 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8000854:	2250      	movs	r2, #80	; 0x50
 8000856:	2100      	movs	r1, #0
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f009 fed5 	bl	800a608 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000864:	2300      	movs	r3, #0
 8000866:	2201      	movs	r2, #1
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f001 fafa 	bl	8001e64 <OD_getPtr>
 8000870:	4602      	mov	r2, r0
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10c      	bne.n	8000898 <CO_EM_init+0x98>
        if (errInfo != NULL) {
 800087e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff feaa 	bl	80005de <OD_getIndex>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000890:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000892:	f06f 030b 	mvn.w	r3, #11
 8000896:	e085      	b.n	80009a4 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008ac:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008ae:	f107 0210 	add.w	r2, r7, #16
 80008b2:	2301      	movs	r3, #1
 80008b4:	2100      	movs	r1, #0
 80008b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008b8:	f7ff feb6 	bl	8000628 <OD_get_u32>
 80008bc:	4603      	mov	r3, r0
 80008be:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 80008c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <CO_EM_init+0xd2>
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <CO_EM_init+0x1ac>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d010      	beq.n	80008f4 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 80008d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80008d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008da:	f7ff fe80 	bl	80005de <OD_getIndex>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80008e6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80008ee:	f06f 030b 	mvn.w	r3, #11
 80008f2:	e057      	b.n	80009a4 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80008f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	3380      	adds	r3, #128	; 0x80
 80008fc:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	43db      	mvns	r3, r3
 8000902:	0fdb      	lsrs	r3, r3, #31
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <CO_EM_init+0x1b0>)
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <CO_EM_init+0x1b4>)
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3330      	adds	r3, #48	; 0x30
 8000922:	4619      	mov	r1, r3
 8000924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000926:	f7ff fe6b 	bl	8000600 <OD_extension_init>
 800092a:	4603      	mov	r3, r0
 800092c:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800092e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00c      	beq.n	8000950 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 8000936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800093c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800093e:	f7ff fe4e 	bl	80005de <OD_getIndex>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800094a:	f06f 030b 	mvn.w	r3, #11
 800094e:	e029      	b.n	80009a4 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 800095a:	8aba      	ldrh	r2, [r7, #20]
 800095c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800095e:	2300      	movs	r3, #0
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2308      	movs	r3, #8
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f005 fac3 	bl	8005ef4 <CO_CANtxBufferInit>
 800096e:	4602      	mov	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c

    if (em->CANtxBuff == NULL) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	e010      	b.n	80009a4 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <CO_EM_init+0x1b8>)
 800098c:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <CO_EM_init+0x1bc>)
 8000992:	649a      	str	r2, [r3, #72]	; 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3340      	adds	r3, #64	; 0x40
 8000998:	4619      	mov	r1, r3
 800099a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800099c:	f7ff fe30 	bl	8000600 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80009a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	7ffff800 	.word	0x7ffff800
 80009b0:	08000653 	.word	0x08000653
 80009b4:	0800197b 	.word	0x0800197b
 80009b8:	080006c3 	.word	0x080006c3
 80009bc:	0800079f 	.word	0x0800079f

080009c0 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	8a5b      	ldrh	r3, [r3, #18]
 80009d4:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	8a1b      	ldrh	r3, [r3, #16]
 80009da:	8aba      	ldrh	r2, [r7, #20]
 80009dc:	429a      	cmp	r2, r3
 80009de:	f000 80a3 	beq.w	8000b28 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8a1a      	ldrh	r2, [r3, #16]
 80009e6:	8abb      	ldrh	r3, [r7, #20]
 80009e8:	4053      	eors	r3, r2
 80009ea:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	8aba      	ldrh	r2, [r7, #20]
 80009f0:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 80009f2:	8a7a      	ldrh	r2, [r7, #18]
 80009f4:	f240 1301 	movw	r3, #257	; 0x101
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d010      	beq.n	8000a20 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 80009fe:	8aba      	ldrh	r2, [r7, #20]
 8000a00:	f240 1301 	movw	r3, #257	; 0x101
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2201      	movs	r2, #1
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 f91b 	bl	8000c56 <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 8000a20:	8a7b      	ldrh	r3, [r7, #18]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d010      	beq.n	8000a4c <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000a2a:	8abb      	ldrh	r3, [r7, #20]
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	f248 1320 	movw	r3, #33056	; 0x8120
 8000a44:	2207      	movs	r2, #7
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f000 f905 	bl	8000c56 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000a4c:	8a7b      	ldrh	r3, [r7, #18]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d010      	beq.n	8000a78 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000a56:	8abb      	ldrh	r3, [r7, #20]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	f248 1340 	movw	r3, #33088	; 0x8140
 8000a70:	2212      	movs	r2, #18
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f000 f8ef 	bl	8000c56 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8000a78:	8a7b      	ldrh	r3, [r7, #18]
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d010      	beq.n	8000aa4 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000a82:	8abb      	ldrh	r3, [r7, #20]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4619      	mov	r1, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f248 1310 	movw	r3, #33040	; 0x8110
 8000a9c:	2214      	movs	r2, #20
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 f8d9 	bl	8000c56 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000aa4:	8a7b      	ldrh	r3, [r7, #18]
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d010      	beq.n	8000ad0 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 8000aae:	8abb      	ldrh	r3, [r7, #20]
 8000ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ac8:	2215      	movs	r2, #21
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f8c3 	bl	8000c56 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 8000ad0:	8a7b      	ldrh	r3, [r7, #18]
 8000ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d010      	beq.n	8000afc <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000ada:	8abb      	ldrh	r3, [r7, #20]
 8000adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	f248 1320 	movw	r3, #33056	; 0x8120
 8000af4:	2206      	movs	r2, #6
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f000 f8ad 	bl	8000c56 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8000afc:	8a7b      	ldrh	r3, [r7, #18]
 8000afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d010      	beq.n	8000b28 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000b06:	8abb      	ldrh	r3, [r7, #20]
 8000b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	f248 1310 	movw	r3, #33040	; 0x8110
 8000b20:	2213      	movs	r2, #19
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f000 f897 	bl	8000c56 <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	789b      	ldrb	r3, [r3, #2]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <CO_EM_process+0x18c>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	78db      	ldrb	r3, [r3, #3]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	7a1b      	ldrb	r3, [r3, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <CO_EM_process+0x1a4>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	7a5b      	ldrb	r3, [r3, #9]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b6a:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	7dfa      	ldrb	r2, [r7, #23]
 8000b72:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d067      	beq.n	8000c4a <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	7f1b      	ldrb	r3, [r3, #28]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d965      	bls.n	8000c4e <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	7f9b      	ldrb	r3, [r3, #30]
 8000b86:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d15d      	bne.n	8000c4e <CO_EM_process+0x28e>
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	7f5b      	ldrb	r3, [r3, #29]
 8000b96:	7c7a      	ldrb	r2, [r7, #17]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d058      	beq.n	8000c4e <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	699a      	ldr	r2, [r3, #24]
 8000ba0:	7c7b      	ldrb	r3, [r7, #17]
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	041a      	lsls	r2, r3, #16
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6998      	ldr	r0, [r3, #24]
 8000bb0:	7c7b      	ldrb	r3, [r7, #17]
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4403      	add	r3, r0
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	1d58      	adds	r0, r3, #5
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	699a      	ldr	r2, [r3, #24]
 8000bc4:	7c7b      	ldrb	r3, [r7, #17]
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4413      	add	r3, r2
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f009 fcf3 	bl	800a5b8 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4610      	mov	r0, r2
 8000bde:	f005 fa03 	bl	8005fe8 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 8000be2:	7c7b      	ldrb	r3, [r7, #17]
 8000be4:	3301      	adds	r3, #1
 8000be6:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	7f1b      	ldrb	r3, [r3, #28]
 8000bec:	7c7a      	ldrb	r2, [r7, #17]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d201      	bcs.n	8000bf6 <CO_EM_process+0x236>
 8000bf2:	7c7a      	ldrb	r2, [r7, #17]
 8000bf4:	e000      	b.n	8000bf8 <CO_EM_process+0x238>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	7fdb      	ldrb	r3, [r3, #31]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d10c      	bne.n	8000c1e <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2202      	movs	r2, #2
 8000c08:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	2220      	movs	r2, #32
 8000c14:	2101      	movs	r1, #1
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f000 f81d 	bl	8000c56 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c1c:	e017      	b.n	8000c4e <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	7fdb      	ldrb	r3, [r3, #31]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d113      	bne.n	8000c4e <CO_EM_process+0x28e>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	7f9a      	ldrb	r2, [r3, #30]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	7f5b      	ldrb	r3, [r3, #29]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d10d      	bne.n	8000c4e <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2200      	movs	r2, #0
 8000c36:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f000 f807 	bl	8000c56 <CO_error>
    return;
 8000c48:	e001      	b.n	8000c4e <CO_EM_process+0x28e>
        return;
 8000c4a:	bf00      	nop
 8000c4c:	e000      	b.n	8000c50 <CO_EM_process+0x290>
    return;
 8000c4e:	bf00      	nop
}
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8000c56:	b480      	push	{r7}
 8000c58:	b08d      	sub	sp, #52	; 0x34
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	4611      	mov	r1, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80a6 	beq.w	8000dc0 <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	2201      	movs	r2, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	d90a      	bls.n	8000caa <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000c94:	2305      	movs	r3, #5
 8000c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000ca0:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000ca4:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <CO_error+0x88>
            return;
 8000cd0:	e079      	b.n	8000dc6 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d074      	beq.n	8000dc4 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	061a      	lsls	r2, r3, #24
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cea:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cf0:	f3ef 8210 	mrs	r2, PRIMASK
 8000cf4:	617a      	str	r2, [r7, #20]
  return(result);
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfa:	b672      	cpsid	i
}
 8000cfc:	bf00      	nop
    if (setError) {
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d008      	beq.n	8000d16 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e00b      	b.n	8000d2e <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 8000d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25a      	sxtb	r2, r3
 8000d1c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000d20:	43db      	mvns	r3, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4013      	ands	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	7f1b      	ldrb	r3, [r3, #28]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d93c      	bls.n	8000db0 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	7f5b      	ldrb	r3, [r3, #29]
 8000d3a:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000d3c:	7efb      	ldrb	r3, [r7, #27]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	7f1b      	ldrb	r3, [r3, #28]
 8000d48:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d302      	bcc.n	8000d56 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	7f9b      	ldrb	r3, [r3, #30]
 8000d5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d103      	bne.n	8000d6a <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2201      	movs	r2, #1
 8000d66:	77da      	strb	r2, [r3, #31]
 8000d68:	e022      	b.n	8000db0 <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	699a      	ldr	r2, [r3, #24]
 8000d6e:	7efb      	ldrb	r3, [r7, #27]
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	4413      	add	r3, r2
 8000d74:	6a3a      	ldr	r2, [r7, #32]
 8000d76:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	7efb      	ldrb	r3, [r7, #27]
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4413      	add	r3, r2
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d8c:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d94:	461a      	mov	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	7f1b      	ldrb	r3, [r3, #28]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <CO_error+0x15a>
                em->fifoCount++;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	f383 8810 	msr	PRIMASK, r3
}
 8000dbe:	e002      	b.n	8000dc6 <CO_error+0x170>
        return;
 8000dc0:	bf00      	nop
 8000dc2:	e000      	b.n	8000dc6 <CO_error+0x170>
            return;
 8000dc4:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000dc6:	3734      	adds	r7, #52	; 0x34
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000ddc:	60fb      	str	r3, [r7, #12]
    return value;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <OD_getIndex+0x14>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	e000      	b.n	8000e02 <OD_getIndex+0x16>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e003      	b.n	8000e2a <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af02      	add	r7, sp, #8
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	460b      	mov	r3, r1
 8000e44:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e46:	7af9      	ldrb	r1, [r7, #11]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f000 ff8d 	bl	8001d70 <OD_get_value>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	3305      	adds	r3, #5
 8000e78:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d107      	bne.n	8000e90 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d012      	beq.n	8000edc <OD_write_1016+0x40>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00f      	beq.n	8000edc <OD_write_1016+0x40>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	7d1b      	ldrb	r3, [r3, #20]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00b      	beq.n	8000edc <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	7d1a      	ldrb	r2, [r3, #20]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	7a1b      	ldrb	r3, [r3, #8]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d805      	bhi.n	8000edc <OD_write_1016+0x40>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d102      	bne.n	8000edc <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000edc:	2309      	movs	r3, #9
 8000ede:	e020      	b.n	8000f22 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f7ff ff75 	bl	8000dd0 <CO_getUint32>
 8000ee6:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	7d1b      	ldrb	r3, [r3, #20]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	b2d9      	uxtb	r1, r3
 8000efa:	8abb      	ldrh	r3, [r7, #20]
 8000efc:	7dfa      	ldrb	r2, [r7, #23]
 8000efe:	69f8      	ldr	r0, [r7, #28]
 8000f00:	f000 f8be 	bl	8001080 <CO_HBconsumer_initEntry>
 8000f04:	4603      	mov	r3, r0
 8000f06:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000f08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f10:	2308      	movs	r3, #8
 8000f12:	e006      	b.n	8000f22 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fd2d 	bl	800197a <OD_writeOriginal>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <CO_HBconsumer_init+0x2c>
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <CO_HBconsumer_init+0x2c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <CO_HBconsumer_init+0x2c>
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8000f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	e087      	b.n	800106e <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f009 fb50 	bl	800a608 <memset>
    HBcons->em = em;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f78:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f7e:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000f80:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bf28      	it	cs
 8000f8c:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	77fb      	strb	r3, [r7, #31]
 8000f98:	e041      	b.n	800101e <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2d9      	uxtb	r1, r3
 8000fa0:	f107 0214 	add.w	r2, r7, #20
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fa8:	f7ff ff45 	bl	8000e36 <OD_get_u32>
 8000fac:	4603      	mov	r3, r0
 8000fae:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000fb0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fc0:	f7ff ff14 	bl	8000dec <OD_getIndex>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8000fcc:	f06f 030b 	mvn.w	r3, #11
 8000fd0:	e04d      	b.n	800106e <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8000fdc:	8b7b      	ldrh	r3, [r7, #26]
 8000fde:	7f7a      	ldrb	r2, [r7, #29]
 8000fe0:	7ff9      	ldrb	r1, [r7, #31]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 f84c 	bl	8001080 <CO_HBconsumer_initEntry>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000fec:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d011      	beq.n	8001018 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ffc:	f7ff fef6 	bl	8000dec <OD_getIndex>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8001008:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800100c:	f113 0f0c 	cmn.w	r3, #12
 8001010:	d002      	beq.n	8001018 <CO_HBconsumer_init+0xec>
                return ret;
 8001012:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001016:	e02a      	b.n	800106e <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	3301      	adds	r3, #1
 800101c:	77fb      	strb	r3, [r7, #31]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	7a1b      	ldrb	r3, [r3, #8]
 8001022:	7ffa      	ldrb	r2, [r7, #31]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3b8      	bcc.n	8000f9a <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <CO_HBconsumer_init+0x14c>)
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <CO_HBconsumer_init+0x150>)
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3320      	adds	r3, #32
 800103e:	4619      	mov	r1, r3
 8001040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001042:	f7ff fee4 	bl	8000e0e <OD_extension_init>
 8001046:	4603      	mov	r3, r0
 8001048:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 800104a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00c      	beq.n	800106c <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8001058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800105a:	f7ff fec7 	bl	8000dec <OD_getIndex>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001064:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001066:	f06f 030b 	mvn.w	r3, #11
 800106a:	e000      	b.n	800106e <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	080018cb 	.word	0x080018cb
 800107c:	08000e9d 	.word	0x08000e9d

08001080 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08d      	sub	sp, #52	; 0x34
 8001084:	af04      	add	r7, sp, #16
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	70fb      	strb	r3, [r7, #3]
 8001092:	460b      	mov	r3, r1
 8001094:	70bb      	strb	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800109a:	2300      	movs	r3, #0
 800109c:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <CO_HBconsumer_initEntry+0x2e>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7a1b      	ldrb	r3, [r3, #8]
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d302      	bcc.n	80010b4 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e076      	b.n	80011a2 <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 80010b4:	883b      	ldrh	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d024      	beq.n	8001104 <CO_HBconsumer_initEntry+0x84>
 80010ba:	78bb      	ldrb	r3, [r7, #2]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d021      	beq.n	8001104 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	77bb      	strb	r3, [r7, #30]
 80010c4:	e019      	b.n	80010fa <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	7fbb      	ldrb	r3, [r7, #30]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4413      	add	r3, r2
 80010d0:	f107 0408 	add.w	r4, r7, #8
 80010d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	7fbb      	ldrb	r3, [r7, #30]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d008      	beq.n	80010f4 <CO_HBconsumer_initEntry+0x74>
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <CO_HBconsumer_initEntry+0x74>
 80010e8:	7a3b      	ldrb	r3, [r7, #8]
 80010ea:	78ba      	ldrb	r2, [r7, #2]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d101      	bne.n	80010f4 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80010f0:	23f4      	movs	r3, #244	; 0xf4
 80010f2:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010f4:	7fbb      	ldrb	r3, [r7, #30]
 80010f6:	3301      	adds	r3, #1
 80010f8:	77bb      	strb	r3, [r7, #30]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a1b      	ldrb	r3, [r3, #8]
 80010fe:	7fba      	ldrb	r2, [r7, #30]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3e0      	bcc.n	80010c6 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001104:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d148      	bne.n	800119e <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	78ba      	ldrb	r2, [r7, #2]
 800111c:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 800111e:	883b      	ldrh	r3, [r7, #0]
 8001120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001124:	fb03 f202 	mul.w	r2, r3, r2
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00d      	beq.n	800115c <CO_HBconsumer_initEntry+0xdc>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001152:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2201      	movs	r2, #1
 8001158:	709a      	strb	r2, [r3, #2]
 800115a:	e007      	b.n	800116c <CO_HBconsumer_initEntry+0xec>
        } else {
            COB_ID = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2200      	movs	r2, #0
 800116a:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6998      	ldr	r0, [r3, #24]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	8b9a      	ldrh	r2, [r3, #28]
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001186:	8bba      	ldrh	r2, [r7, #28]
 8001188:	4c08      	ldr	r4, [pc, #32]	; (80011ac <CO_HBconsumer_initEntry+0x12c>)
 800118a:	9402      	str	r4, [sp, #8]
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001196:	f004 fe4f 	bl	8005e38 <CO_CANrxBufferInit>
 800119a:	4603      	mov	r3, r0
 800119c:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 800119e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08000e61 	.word	0x08000e61

080011b0 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80011be:	2301      	movs	r3, #1
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80011c2:	2301      	movs	r3, #1
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d077      	beq.n	80012bc <CO_HBconsumer_process+0x10c>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d073      	beq.n	80012bc <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011da:	e068      	b.n	80012ae <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d055      	beq.n	80012a2 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d022      	beq.n	8001244 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d112      	bne.n	800122e <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d10a      	bne.n	8001226 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	f248 1330 	movw	r3, #33072	; 0x8130
 800121e:	221c      	movs	r2, #28
 8001220:	2101      	movs	r1, #1
 8001222:	f7ff fd18 	bl	8000c56 <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2201      	movs	r2, #1
 800122a:	709a      	strb	r2, [r3, #2]
 800122c:	e007      	b.n	800123e <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2202      	movs	r2, #2
 8001232:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d11c      	bne.n	8001286 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	441a      	add	r2, r3
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	429a      	cmp	r2, r3
 8001262:	d310      	bcc.n	8001286 <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	f248 1330 	movw	r3, #33072	; 0x8130
 8001272:	221b      	movs	r2, #27
 8001274:	2101      	movs	r1, #1
 8001276:	f7ff fcee 	bl	8000c56 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	22ff      	movs	r2, #255	; 0xff
 800127e:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2203      	movs	r2, #3
 8001284:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d001      	beq.n	8001292 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001298:	2b05      	cmp	r3, #5
 800129a:	d003      	beq.n	80012a4 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
 80012a0:	e000      	b.n	80012a4 <CO_HBconsumer_process+0xf4>
                continue;
 80012a2:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80012a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a8:	3301      	adds	r3, #1
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	7a1b      	ldrb	r3, [r3, #8]
 80012b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d390      	bcc.n	80011dc <CO_HBconsumer_process+0x2c>
 80012ba:	e028      	b.n	800130e <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <CO_HBconsumer_process+0x11a>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d021      	beq.n	800130e <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	77fb      	strb	r3, [r7, #31]
 80012ce:	e015      	b.n	80012fc <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2201      	movs	r2, #1
 80012f4:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
 80012f8:	3301      	adds	r3, #1
 80012fa:	77fb      	strb	r3, [r7, #31]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	7a1b      	ldrb	r3, [r3, #8]
 8001300:	7ffa      	ldrb	r2, [r7, #31]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3e4      	bcc.n	80012d0 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d114      	bne.n	8001340 <CO_HBconsumer_process+0x190>
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d011      	beq.n	8001340 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2300      	movs	r3, #0
 8001326:	221b      	movs	r2, #27
 8001328:	2100      	movs	r1, #0
 800132a:	f7ff fc94 	bl	8000c56 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	221c      	movs	r2, #28
 800133a:	2100      	movs	r1, #0
 800133c:	f7ff fc8b 	bl	8000c56 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001344:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800134a:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	615a      	str	r2, [r3, #20]
}
 8001352:	bf00      	nop
 8001354:	3730      	adds	r7, #48	; 0x30
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <CO_getUint16>:
CO_getUint16(const void* buf) {
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8001368:	81fb      	strh	r3, [r7, #14]
    return value;
 800136a:	89fb      	ldrh	r3, [r7, #14]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <OD_getIndex+0x14>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	e000      	b.n	800138e <OD_getIndex+0x16>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80013aa:	2305      	movs	r3, #5
 80013ac:	e003      	b.n	80013b6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af02      	add	r7, sp, #8
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	460b      	mov	r3, r1
 80013d0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80013d2:	7af9      	ldrb	r1, [r7, #11]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2302      	movs	r3, #2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f000 fcc7 	bl	8001d70 <OD_get_value>
 80013e2:	4603      	mov	r3, r0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	2201      	movs	r2, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d807      	bhi.n	8001428 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	5cd2      	ldrb	r2, [r2, r3]
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	4013      	ands	r3, r2
 8001422:	b2db      	uxtb	r3, r3
               : false;
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <CO_isError+0x40>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <CO_isError+0x42>
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <CO_getErrorRegister+0x1e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <CO_getErrorRegister+0x1e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	e000      	b.n	800145a <CO_getErrorRegister+0x20>
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 8001466:	b480      	push	{r7}
 8001468:	b087      	sub	sp, #28
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3305      	adds	r3, #5
 800147a:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d10a      	bne.n	80014a8 <CO_NMT_receive+0x42>
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <CO_NMT_receive+0x3c>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	7bba      	ldrb	r2, [r7, #14]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d102      	bne.n	80014a8 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <OD_write_1017+0x2e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <OD_write_1017+0x2e>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <OD_write_1017+0x2e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d102      	bne.n	80014e2 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 80014e2:	2309      	movs	r3, #9
 80014e4:	e017      	b.n	8001516 <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f7ff ff34 	bl	800135a <CO_getUint16>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fb03 f202 	mul.w	r2, r3, r2
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fa33 	bl	800197a <OD_writeOriginal>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af04      	add	r7, sp, #16
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <CO_NMT_init+0x30>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <CO_NMT_init+0x30>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <CO_NMT_init+0x30>
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	e097      	b.n	8001686 <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 8001556:	222c      	movs	r2, #44	; 0x2c
 8001558:	2100      	movs	r1, #0
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f009 f854 	bl	800a608 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8c3a      	ldrh	r2, [r7, #32]
 8001576:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 800157e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	fb03 f202 	mul.w	r2, r3, r2
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 800158c:	f107 0214 	add.w	r2, r7, #20
 8001590:	2301      	movs	r3, #1
 8001592:	2100      	movs	r1, #0
 8001594:	68b8      	ldr	r0, [r7, #8]
 8001596:	f7ff ff14 	bl	80013c2 <OD_get_u16>
 800159a:	4603      	mov	r3, r0
 800159c:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800159e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 80015a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015ac:	68b8      	ldr	r0, [r7, #8]
 80015ae:	f7ff fee3 	bl	8001378 <OD_getIndex>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80015ba:	f06f 030b 	mvn.w	r3, #11
 80015be:	e062      	b.n	8001686 <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 80015c0:	8abb      	ldrh	r3, [r7, #20]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	fb03 f202 	mul.w	r2, r3, r2
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <CO_NMT_init+0x170>)
 80015da:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <CO_NMT_init+0x174>)
 80015e0:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3310      	adds	r3, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff fed6 	bl	800139a <OD_extension_init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015f2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 80015fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001600:	68b8      	ldr	r0, [r7, #8]
 8001602:	f7ff feb9 	bl	8001378 <OD_getIndex>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800160c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800160e:	f06f 030b 	mvn.w	r3, #11
 8001612:	e038      	b.n	8001686 <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	d903      	bls.n	8001628 <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 8001628:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800162a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <CO_NMT_init+0x178>)
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800163c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800163e:	f004 fbfb 	bl	8005e38 <CO_CANrxBufferInit>
 8001642:	4603      	mov	r3, r0
 8001644:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 8001646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <CO_NMT_init+0x134>
        return ret;
 800164e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001652:	e018      	b.n	8001686 <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 800165a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800165c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800165e:	2300      	movs	r3, #0
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2301      	movs	r3, #1
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800166a:	f004 fc43 	bl	8005ef4 <CO_CANtxBufferInit>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
    if (NMT->HB_TXbuff == NULL) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e001      	b.n	8001686 <CO_NMT_init+0x166>
    }

    return ret;
 8001682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	080018cb 	.word	0x080018cb
 8001694:	080014b5 	.word	0x080014b5
 8001698:	08001467 	.word	0x08001467

0800169c <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80016b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d204      	bcs.n	80016dc <CO_NMT_process+0x40>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	e000      	b.n	80016de <CO_NMT_process+0x42>
 80016dc:	2300      	movs	r3, #0
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10e      	bne.n	8001706 <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d02b      	beq.n	8001748 <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <CO_NMT_process+0x6a>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016fe:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8001702:	429a      	cmp	r2, r3
 8001704:	d020      	beq.n	8001748 <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800170e:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f004 fc64 	bl	8005fe8 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001720:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10b      	bne.n	8001740 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <CO_NMT_process+0x9c>
 8001734:	2305      	movs	r3, #5
 8001736:	e000      	b.n	800173a <CO_NMT_process+0x9e>
 8001738:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800173a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800173e:	e003      	b.n	8001748 <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800174e:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	789b      	ldrb	r3, [r3, #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d02a      	beq.n	80017ae <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	2b82      	cmp	r3, #130	; 0x82
 800175e:	d01e      	beq.n	800179e <CO_NMT_process+0x102>
 8001760:	2b82      	cmp	r3, #130	; 0x82
 8001762:	dc20      	bgt.n	80017a6 <CO_NMT_process+0x10a>
 8001764:	2b81      	cmp	r3, #129	; 0x81
 8001766:	d016      	beq.n	8001796 <CO_NMT_process+0xfa>
 8001768:	2b81      	cmp	r3, #129	; 0x81
 800176a:	dc1c      	bgt.n	80017a6 <CO_NMT_process+0x10a>
 800176c:	2b80      	cmp	r3, #128	; 0x80
 800176e:	d00e      	beq.n	800178e <CO_NMT_process+0xf2>
 8001770:	2b80      	cmp	r3, #128	; 0x80
 8001772:	dc18      	bgt.n	80017a6 <CO_NMT_process+0x10a>
 8001774:	2b01      	cmp	r3, #1
 8001776:	d002      	beq.n	800177e <CO_NMT_process+0xe2>
 8001778:	2b02      	cmp	r3, #2
 800177a:	d004      	beq.n	8001786 <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 800177c:	e013      	b.n	80017a6 <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 800177e:	2305      	movs	r3, #5
 8001780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001784:	e010      	b.n	80017a8 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 8001786:	2304      	movs	r3, #4
 8001788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800178c:	e00c      	b.n	80017a8 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 800178e:	237f      	movs	r3, #127	; 0x7f
 8001790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001794:	e008      	b.n	80017a8 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 8001796:	2302      	movs	r3, #2
 8001798:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800179c:	e004      	b.n	80017a8 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80017a4:	e000      	b.n	80017a8 <CO_NMT_process+0x10c>
                break;
 80017a6:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	889b      	ldrh	r3, [r3, #4]
 80017b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	2112      	movs	r1, #18
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe0f 	bl	80013ec <CO_isError>
 80017ce:	62b8      	str	r0, [r7, #40]	; 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	211b      	movs	r1, #27
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe08 	bl	80013ec <CO_isError>
 80017dc:	6278      	str	r0, [r7, #36]	; 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	211c      	movs	r1, #28
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe01 	bl	80013ec <CO_isError>
 80017ea:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <CO_NMT_process+0x16c>
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <CO_NMT_process+0x168>
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <CO_NMT_process+0x168>
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <CO_NMT_process+0x16c>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <CO_NMT_process+0x16e>
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe08 	bl	800143a <CO_getErrorRegister>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	889b      	ldrh	r3, [r3, #4]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4013      	ands	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <CO_NMT_process+0x1b8>
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <CO_NMT_process+0x1b8>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <CO_NMT_process+0x1ba>
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 8001858:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800185c:	2b05      	cmp	r3, #5
 800185e:	d111      	bne.n	8001884 <CO_NMT_process+0x1e8>
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <CO_NMT_process+0x1d0>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00b      	beq.n	8001884 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <CO_NMT_process+0x1e0>
 8001878:	2304      	movs	r3, #4
 800187a:	e000      	b.n	800187e <CO_NMT_process+0x1e2>
 800187c:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 800187e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001882:	e011      	b.n	80018a8 <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	b21b      	sxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	da0c      	bge.n	80018a8 <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 800188e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001892:	2b7f      	cmp	r3, #127	; 0x7f
 8001894:	d108      	bne.n	80018a8 <CO_NMT_process+0x20c>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d105      	bne.n	80018a8 <CO_NMT_process+0x20c>
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80018a2:	2305      	movs	r3, #5
 80018a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80018ae:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80018bc:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 80018be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3738      	adds	r7, #56	; 0x38
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b088      	sub	sp, #32
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <OD_readOriginal+0x20>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <OD_readOriginal+0x20>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80018ea:	2309      	movs	r3, #9
 80018ec:	e041      	b.n	8001972 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001900:	230e      	movs	r3, #14
 8001902:	e036      	b.n	8001972 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d103      	bne.n	8001918 <OD_readOriginal+0x4e>
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d922      	bls.n	800195e <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	429a      	cmp	r2, r3
 8001920:	d801      	bhi.n	8001926 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001922:	2309      	movs	r3, #9
 8001924:	e025      	b.n	8001972 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4413      	add	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d90a      	bls.n	8001958 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	441a      	add	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001952:	23ff      	movs	r3, #255	; 0xff
 8001954:	75fb      	strb	r3, [r7, #23]
 8001956:	e002      	b.n	800195e <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	69b9      	ldr	r1, [r7, #24]
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f008 fe28 	bl	800a5b8 <memcpy>

    *countRead = dataLenToCopy;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	601a      	str	r2, [r3, #0]
    return returnCode;
 800196e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800197a:	b580      	push	{r7, lr}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <OD_writeOriginal+0x20>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <OD_writeOriginal+0x20>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800199a:	2309      	movs	r3, #9
 800199c:	e056      	b.n	8001a4c <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 80019b4:	230e      	movs	r3, #14
 80019b6:	e049      	b.n	8001a4c <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <OD_writeOriginal+0x52>
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d924      	bls.n	8001a16 <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d801      	bhi.n	80019da <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80019d6:	2309      	movs	r3, #9
 80019d8:	e038      	b.n	8001a4c <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d90a      	bls.n	8001a10 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	441a      	add	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001a0a:	23ff      	movs	r3, #255	; 0xff
 8001a0c:	74fb      	strb	r3, [r7, #19]
 8001a0e:	e002      	b.n	8001a16 <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d201      	bcs.n	8001a22 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	e014      	b.n	8001a4c <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d80f      	bhi.n	8001a4a <OD_writeOriginal+0xd0>
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d80b      	bhi.n	8001a4a <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f008 fdbe 	bl	800a5b8 <memcpy>
 8001a3c:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001a44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a48:	e000      	b.n	8001a4c <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 8001a4a:	2309      	movs	r3, #9
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8001a62:	2302      	movs	r3, #2
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a7e:	2302      	movs	r3, #2
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <OD_find+0x1a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <OD_find+0x1e>
        return NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e046      	b.n	8001b38 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 8001ab6:	e026      	b.n	8001b06 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001ab8:	8afa      	ldrh	r2, [r7, #22]
 8001aba:	8abb      	ldrh	r3, [r7, #20]
 8001abc:	4413      	add	r3, r2
 8001abe:	105b      	asrs	r3, r3, #1
 8001ac0:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	89fa      	ldrh	r2, [r7, #14]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	887a      	ldrh	r2, [r7, #2]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d101      	bne.n	8001ae2 <OD_find+0x56>
            return entry;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	e02a      	b.n	8001b38 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d209      	bcs.n	8001b00 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <OD_find+0x6e>
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	e000      	b.n	8001afc <OD_find+0x70>
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	82bb      	strh	r3, [r7, #20]
 8001afe:	e002      	b.n	8001b06 <OD_find+0x7a>
        } else {
            min = cur + 1U;
 8001b00:	89fb      	ldrh	r3, [r7, #14]
 8001b02:	3301      	adds	r3, #1
 8001b04:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001b06:	8afa      	ldrh	r2, [r7, #22]
 8001b08:	8abb      	ldrh	r3, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3d4      	bcc.n	8001ab8 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001b0e:	8afa      	ldrh	r2, [r7, #22]
 8001b10:	8abb      	ldrh	r3, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d10f      	bne.n	8001b36 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	8afa      	ldrh	r2, [r7, #22]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d101      	bne.n	8001b36 <OD_find+0xaa>
            return entry;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	e000      	b.n	8001b38 <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8001b44:	b480      	push	{r7}
 8001b46:	b08d      	sub	sp, #52	; 0x34
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	460b      	mov	r3, r1
 8001b52:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <OD_getSub+0x1e>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8001b62:	2305      	movs	r3, #5
 8001b64:	e0d7      	b.n	8001d16 <OD_getSub+0x1d2>
    }
    if (io == NULL) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 8001b6c:	2309      	movs	r3, #9
 8001b6e:	e0d2      	b.n	8001d16 <OD_getSub+0x1d2>
    }

    OD_stream_t* stream = &io->stream;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	78db      	ldrb	r3, [r3, #3]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d051      	beq.n	8001c24 <OD_getSub+0xe0>
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	f300 808d 	bgt.w	8001ca0 <OD_getSub+0x15c>
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d002      	beq.n	8001b90 <OD_getSub+0x4c>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d015      	beq.n	8001bba <OD_getSub+0x76>
 8001b8e:	e087      	b.n	8001ca0 <OD_getSub+0x15c>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <OD_getSub+0x56>
                return ODR_SUB_NOT_EXIST;
 8001b96:	230e      	movs	r3, #14
 8001b98:	e0bd      	b.n	8001d16 <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	617b      	str	r3, [r7, #20]

            stream->attribute = odo->attribute;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	791a      	ldrb	r2, [r3, #4]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	609a      	str	r2, [r3, #8]
            break;
 8001bb8:	e074      	b.n	8001ca4 <OD_getSub+0x160>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	7afa      	ldrb	r2, [r7, #11]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d301      	bcc.n	8001bc8 <OD_getSub+0x84>
                return ODR_SUB_NOT_EXIST;
 8001bc4:	230e      	movs	r3, #14
 8001bc6:	e0a6      	b.n	8001d16 <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61fb      	str	r3, [r7, #28]

            if (subIndex == 0U) {
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10b      	bne.n	8001bec <OD_getSub+0xa8>
                stream->attribute = odo->attribute0;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	7a1a      	ldrb	r2, [r3, #8]
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	2201      	movs	r2, #1
 8001be8:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 8001bea:	e05b      	b.n	8001ca4 <OD_getSub+0x160>
                stream->attribute = odo->attribute;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	7a5a      	ldrb	r2, [r3, #9]
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <OD_getSub+0xd0>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	7afa      	ldrb	r2, [r7, #11]
 8001c06:	3a01      	subs	r2, #1
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4413      	add	r3, r2
 8001c12:	e000      	b.n	8001c16 <OD_getSub+0xd2>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	609a      	str	r2, [r3, #8]
            break;
 8001c22:	e03f      	b.n	8001ca4 <OD_getSub+0x160>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	623b      	str	r3, [r7, #32]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001c34:	e01c      	b.n	8001c70 <OD_getSub+0x12c>
                if (odoArr[i].subIndex == subIndex) {
 8001c36:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	461a      	mov	r2, r3
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	4413      	add	r3, r2
 8001c48:	791b      	ldrb	r3, [r3, #4]
 8001c4a:	7afa      	ldrb	r2, [r7, #11]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10a      	bne.n	8001c66 <OD_getSub+0x122>
                    odo = &odoArr[i];
 8001c50:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	4413      	add	r3, r2
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001c64:	e00a      	b.n	8001c7c <OD_getSub+0x138>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3dc      	bcc.n	8001c36 <OD_getSub+0xf2>
                }
            }
            if (odo == NULL) {
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <OD_getSub+0x142>
                return ODR_SUB_NOT_EXIST;
 8001c82:	230e      	movs	r3, #14
 8001c84:	e047      	b.n	8001d16 <OD_getSub+0x1d2>
            }

            stream->attribute = odo->attribute;
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	795a      	ldrb	r2, [r3, #5]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	609a      	str	r2, [r3, #8]
            break;
 8001c9e:	e001      	b.n	8001ca4 <OD_getSub+0x160>
        }
        default: {
            return ODR_DEV_INCOMPAT;
 8001ca0:	2309      	movs	r3, #9
 8001ca2:	e038      	b.n	8001d16 <OD_getSub+0x1d2>
            break;
        }
    }

    /* Access data from the original OD location */
    if ((entry->extension == NULL) || odOrig) {
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <OD_getSub+0x16e>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <OD_getSub+0x182>
        io->read = OD_readOriginal;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <OD_getSub+0x1e0>)
 8001cb6:	619a      	str	r2, [r3, #24]
        io->write = OD_writeOriginal;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <OD_getSub+0x1e4>)
 8001cbc:	61da      	str	r2, [r3, #28]
        stream->object = NULL;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	e01c      	b.n	8001d00 <OD_getSub+0x1bc>
    }
    /* Access data from extension specified by application */
    else {
        io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <OD_getSub+0x194>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	e000      	b.n	8001cda <OD_getSub+0x196>
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <OD_getSub+0x1e8>)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6193      	str	r3, [r2, #24]
        io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <OD_getSub+0x1ac>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	e000      	b.n	8001cf2 <OD_getSub+0x1ae>
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <OD_getSub+0x1ec>)
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	61d3      	str	r3, [r2, #28]
        stream->object = entry->extension->object;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	881a      	ldrh	r2, [r3, #0]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	7afa      	ldrb	r2, [r7, #11]
 8001d12:	751a      	strb	r2, [r3, #20]

    return ODR_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3734      	adds	r7, #52	; 0x34
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	080018cb 	.word	0x080018cb
 8001d28:	0800197b 	.word	0x0800197b
 8001d2c:	08001a55 	.word	0x08001a55
 8001d30:	08001a71 	.word	0x08001a71

08001d34 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db03      	blt.n	8001d4e <OD_getSDOabCode+0x1a>
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b19      	cmp	r3, #25
 8001d4c:	dd02      	ble.n	8001d54 <OD_getSDOabCode+0x20>
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <OD_getSDOabCode+0x38>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	e004      	b.n	8001d5e <OD_getSDOabCode+0x2a>
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <OD_getSDOabCode+0x38>)
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	0800b924 	.word	0x0800b924

08001d70 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b091      	sub	sp, #68	; 0x44
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001d86:	2309      	movs	r3, #9
 8001d88:	e02b      	b.n	8001de2 <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	2220      	movs	r2, #32
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f008 fc38 	bl	800a608 <memset>
    OD_stream_t* stream = &io.stream;
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countRd = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001da2:	f107 0218 	add.w	r2, r7, #24
 8001da6:	7af9      	ldrb	r1, [r7, #11]
 8001da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff feca 	bl	8001b44 <OD_getSub>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 8001db6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <OD_get_value+0x54>
        return ret;
 8001dbe:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001dc2:	e00e      	b.n	8001de2 <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 8001dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001dce:	230b      	movs	r3, #11
 8001dd0:	e007      	b.n	8001de2 <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 8001dd2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001dde:	47a0      	blx	r4
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3744      	adds	r7, #68	; 0x44
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001dea:	b590      	push	{r4, r7, lr}
 8001dec:	b091      	sub	sp, #68	; 0x44
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	460b      	mov	r3, r1
 8001df8:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001e00:	2309      	movs	r3, #9
 8001e02:	e02b      	b.n	8001e5c <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	2220      	movs	r2, #32
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f008 fbfb 	bl	800a608 <memset>
    OD_stream_t* stream = &io.stream;
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001e1c:	f107 0218 	add.w	r2, r7, #24
 8001e20:	7af9      	ldrb	r1, [r7, #11]
 8001e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fe8d 	bl	8001b44 <OD_getSub>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 8001e30:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <OD_set_value+0x54>
        return ret;
 8001e38:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001e3c:	e00e      	b.n	8001e5c <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8001e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001e48:	230b      	movs	r3, #11
 8001e4a:	e007      	b.n	8001e5c <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8001e4c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e58:	47a0      	blx	r4
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3744      	adds	r7, #68	; 0x44
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}

08001e64 <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	; 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	460b      	mov	r3, r1
 8001e72:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001e7a:	f107 0210 	add.w	r2, r7, #16
 8001e7e:	7af9      	ldrb	r1, [r7, #11]
 8001e80:	2301      	movs	r3, #1
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff fe5e 	bl	8001b44 <OD_getSub>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001e8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <OD_getPtr+0x42>
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001eac:	e00a      	b.n	8001ec4 <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <OD_getPtr+0x60>
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d002      	beq.n	8001ec4 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001ebe:	230b      	movs	r3, #11
 8001ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <OD_getPtr+0x6e>
        *err = errCopy;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001ed0:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001ed2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <OD_getPtr+0x7c>
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e000      	b.n	8001ee2 <OD_getPtr+0x7e>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3738      	adds	r7, #56	; 0x38
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <OD_getIndex+0x14>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	e000      	b.n	8001f00 <OD_getIndex+0x16>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f1c:	7af9      	ldrb	r1, [r7, #11]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2301      	movs	r3, #1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff22 	bl	8001d70 <OD_get_value>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af02      	add	r7, sp, #8
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	460b      	mov	r3, r1
 8001f44:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f46:	7af9      	ldrb	r1, [r7, #11]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff ff0d 	bl	8001d70 <OD_get_value>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDOclient_receive(void* object, void* msg) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)object;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	791b      	ldrb	r3, [r3, #4]
 8001f72:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3305      	adds	r3, #5
 8001f78:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if ((SDO_C->state != CO_SDO_ST_IDLE) && (DLC == 8U) && (!CO_FLAG_READ(SDO_C->CANrxNew) || (data[0] == 0x80U))) {
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d014      	beq.n	8001fb0 <CO_SDOclient_receive+0x50>
 8001f86:	7cfb      	ldrb	r3, [r7, #19]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d111      	bne.n	8001fb0 <CO_SDOclient_receive+0x50>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <CO_SDOclient_receive+0x3c>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d109      	bne.n	8001fb0 <CO_SDOclient_receive+0x50>
        bool_t state_not_upload_blk_sublock_crsp = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
        if ((data[0] == 0x80U) /* abort from server */
            || (state_not_upload_blk_sublock_sreq && state_not_upload_blk_sublock_crsp)) {
#endif
            /* copy data and set 'new message' flag */
            (void)memcpy((void*)&SDO_C->CANrxData[0], (const void*)&data[0], 8);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3370      	adds	r3, #112	; 0x70
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	68f9      	ldr	r1, [r7, #12]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 fb07 	bl	800a5b8 <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2201      	movs	r2, #1
 8001fae:	66da      	str	r2, [r3, #108]	; 0x6c
        } else { /* MISRA C 2004 14.10 */
        }

#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <CO_SDOclient_init>:
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOclient_init(CO_SDOclient_t* SDO_C, OD_t* OD, OD_entry_t* OD_1280_SDOcliPar, uint8_t nodeId,
                  CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
                  uint32_t* errInfo) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	70fb      	strb	r3, [r7, #3]
    bool_t index_SDOcliPar_min = (OD_getIndex(OD_1280_SDOcliPar) < (uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM));
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff8f 	bl	8001eea <OD_getIndex>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f241 237f 	movw	r3, #4735	; 0x127f
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    bool_t index_SDOcliPar_max = (OD_getIndex(OD_1280_SDOcliPar) > ((uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM) + 0x7FU));
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff82 	bl	8001eea <OD_getIndex>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f241 23ff 	movw	r3, #4863	; 0x12ff
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	bf8c      	ite	hi
 8001ff2:	2301      	movhi	r3, #1
 8001ff4:	2300      	movls	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	623b      	str	r3, [r7, #32]

    /* verify arguments */
    if ((SDO_C == NULL) || (OD_1280_SDOcliPar == NULL) || index_SDOcliPar_min || index_SDOcliPar_max
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00e      	beq.n	800201e <CO_SDOclient_init+0x66>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <CO_SDOclient_init+0x66>
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <CO_SDOclient_init+0x66>
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <CO_SDOclient_init+0x66>
        || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <CO_SDOclient_init+0x66>
 8002018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <CO_SDOclient_init+0x6c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e068      	b.n	80020f6 <CO_SDOclient_init+0x13e>
    /* Configure object variables */
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_LOCAL) != 0
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002028:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800202e:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002034:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800203a:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf, CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3348      	adds	r3, #72	; 0x48
 8002046:	2221      	movs	r2, #33	; 0x21
 8002048:	4619      	mov	r1, r3
 800204a:	f002 f8bb 	bl	80041c4 <CO_fifo_init>

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 800204e:	f107 021a 	add.w	r2, r7, #26
 8002052:	2301      	movs	r3, #1
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff58 	bl	8001f0c <OD_get_u8>
 800205c:	4603      	mov	r3, r0
 800205e:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8002060:	f107 0214 	add.w	r2, r7, #20
 8002064:	2301      	movs	r3, #1
 8002066:	2101      	movs	r1, #1
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff64 	bl	8001f36 <OD_get_u32>
 800206e:	4603      	mov	r3, r0
 8002070:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8002072:	f107 0210 	add.w	r2, r7, #16
 8002076:	2301      	movs	r3, #1
 8002078:	2102      	movs	r1, #2
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ff5b 	bl	8001f36 <OD_get_u32>
 8002080:	4603      	mov	r3, r0
 8002082:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 8002084:	f107 0219 	add.w	r2, r7, #25
 8002088:	2301      	movs	r3, #1
 800208a:	2103      	movs	r1, #3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff3d 	bl	8001f0c <OD_get_u8>
 8002092:	4603      	mov	r3, r0
 8002094:	773b      	strb	r3, [r7, #28]

    if ((odRet0 != ODR_OK) || (maxSubIndex != 3U) || (odRet1 != ODR_OK) || (odRet2 != ODR_OK) || (odRet3 != ODR_OK)) {
 8002096:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <CO_SDOclient_init+0x104>
 800209e:	7ebb      	ldrb	r3, [r7, #26]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d10b      	bne.n	80020bc <CO_SDOclient_init+0x104>
 80020a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <CO_SDOclient_init+0x104>
 80020ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <CO_SDOclient_init+0x104>
 80020b4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00c      	beq.n	80020d6 <CO_SDOclient_init+0x11e>
        if (errInfo != NULL) {
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <CO_SDOclient_init+0x118>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff11 	bl	8001eea <OD_getIndex>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80020d0:	f06f 030b 	mvn.w	r3, #11
 80020d4:	e00f      	b.n	80020f6 <CO_SDOclient_init+0x13e>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C, COB_IDClientToServer, COB_IDServerToClient,
 80020d6:	6979      	ldr	r1, [r7, #20]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	7e7b      	ldrb	r3, [r7, #25]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f80f 	bl	8002100 <CO_SDOclient_setup>
 80020e2:	4603      	mov	r3, r0
 80020e4:	76fb      	strb	r3, [r7, #27]
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 80020e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <CO_SDOclient_init+0x13c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e000      	b.n	80020f6 <CO_SDOclient_init+0x13e>
    }

    return CO_ERROR_NO;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <CO_SDOclient_setup>:
}
#endif

CO_SDO_return_t
CO_SDOclient_setup(CO_SDOclient_t* SDO_C, uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient,
                   uint8_t nodeIDOfTheSDOServer) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af04      	add	r7, sp, #16
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 8002114:	f06f 0301 	mvn.w	r3, #1
 8002118:	e05f      	b.n	80021da <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	66da      	str	r2, [r3, #108]	; 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDClientToServer & 0x7FFU) : 0U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db05      	blt.n	8002140 <CO_SDOclient_setup+0x40>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	b29b      	uxth	r3, r3
 8002138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213c:	b29b      	uxth	r3, r3
 800213e:	e000      	b.n	8002142 <CO_SDOclient_setup+0x42>
 8002140:	2300      	movs	r3, #0
 8002142:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDServerToClient & 0x7FFU) : 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db05      	blt.n	8002156 <CO_SDOclient_setup+0x56>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002152:	b29b      	uxth	r3, r3
 8002154:	e000      	b.n	8002158 <CO_SDOclient_setup+0x58>
 8002156:	2300      	movs	r3, #0
 8002158:	82bb      	strh	r3, [r7, #20]
    if ((CanIdC2S != 0U) && (CanIdS2C != 0U)) {
 800215a:	8afb      	ldrh	r3, [r7, #22]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <CO_SDOclient_setup+0x6e>
 8002160:	8abb      	ldrh	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	619a      	str	r2, [r3, #24]
 800216c:	e006      	b.n	800217c <CO_SDOclient_setup+0x7c>
    } else {
        CanIdC2S = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(SDO_C->CANdevRx, SDO_C->CANdevRxIdx, CanIdS2C, 0x7FF, false, (void*)SDO_C,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8899      	ldrh	r1, [r3, #4]
 8002184:	8aba      	ldrh	r2, [r7, #20]
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <CO_SDOclient_setup+0xe4>)
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002196:	f003 fe4f 	bl	8005e38 <CO_CANrxBufferInit>
 800219a:	4603      	mov	r3, r0
 800219c:	74fb      	strb	r3, [r7, #19]
                                              CO_SDOclient_receive);

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(SDO_C->CANdevTx, SDO_C->CANdevTxIdx, CanIdC2S, false, 8, false);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6898      	ldr	r0, [r3, #8]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8999      	ldrh	r1, [r3, #12]
 80021a6:	8afa      	ldrh	r2, [r7, #22]
 80021a8:	2300      	movs	r3, #0
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2308      	movs	r3, #8
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	f003 fe9f 	bl	8005ef4 <CO_CANtxBufferInit>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	611a      	str	r2, [r3, #16]

    if ((ret != CO_ERROR_NO) || (SDO_C->CANtxBuff == NULL)) {
 80021bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d103      	bne.n	80021cc <CO_SDOclient_setup+0xcc>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 80021d2:	f06f 0301 	mvn.w	r3, #1
 80021d6:	e000      	b.n	80021da <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	08001f61 	.word	0x08001f61

080021e8 <CO_getUint8>:
CO_getUint8(const void* buf) {
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80021f4:	73fb      	strb	r3, [r7, #15]
    return value;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002210:	60fb      	str	r3, [r7, #12]
    return value;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <OD_getIndex+0x14>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	e000      	b.n	8002236 <OD_getIndex+0x16>
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8002252:	2305      	movs	r3, #5
 8002254:	e003      	b.n	800225e <OD_extension_init+0x1c>
    entry->extension = extension;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af02      	add	r7, sp, #8
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	460b      	mov	r3, r1
 8002278:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800227a:	7af9      	ldrb	r1, [r7, #11]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fd73 	bl	8001d70 <OD_get_value>
 800228a:	4603      	mov	r3, r0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	460b      	mov	r3, r1
 80022a2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80022a4:	7af9      	ldrb	r1, [r7, #11]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2304      	movs	r3, #4
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff fd5e 	bl	8001d70 <OD_get_value>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af02      	add	r7, sp, #8
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	460b      	mov	r3, r1
 80022cc:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 80022ce:	1d3a      	adds	r2, r7, #4
 80022d0:	7af9      	ldrb	r1, [r7, #11]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2304      	movs	r3, #4
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fd86 	bl	8001dea <OD_set_value>
 80022de:	4603      	mov	r3, r0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	791b      	ldrb	r3, [r3, #4]
 80022fa:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	3305      	adds	r3, #5
 8002300:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d115      	bne.n	8002334 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d103      	bne.n	8002318 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2200      	movs	r2, #0
 8002314:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002316:	e00d      	b.n	8002334 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3340      	adds	r3, #64	; 0x40
 8002324:	7cfa      	ldrb	r2, [r7, #19]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f008 f945 	bl	800a5b8 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2201      	movs	r2, #1
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af04      	add	r7, sp, #16
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	460b      	mov	r3, r1
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	4613      	mov	r3, r2
 8002350:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	6a3a      	ldr	r2, [r7, #32]
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <CO_SDOserver_init_canRxTx+0x2e>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	429a      	cmp	r2, r3
 8002364:	d101      	bne.n	800236a <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8002366:	2300      	movs	r3, #0
 8002368:	e04e      	b.n	8002408 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db02      	blt.n	8002382 <CO_SDOserver_init_canRxTx+0x46>
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	b29b      	uxth	r3, r3
 8002380:	e000      	b.n	8002384 <CO_SDOserver_init_canRxTx+0x48>
 8002382:	2300      	movs	r3, #0
 8002384:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	db02      	blt.n	8002392 <CO_SDOserver_init_canRxTx+0x56>
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	b29b      	uxth	r3, r3
 8002390:	e000      	b.n	8002394 <CO_SDOserver_init_canRxTx+0x58>
 8002392:	2300      	movs	r3, #0
 8002394:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8002396:	8afb      	ldrh	r3, [r7, #22]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <CO_SDOserver_init_canRxTx+0x6e>
 800239c:	8abb      	ldrh	r3, [r7, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	611a      	str	r2, [r3, #16]
 80023a8:	e006      	b.n	80023b8 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 80023b8:	8afa      	ldrh	r2, [r7, #22]
 80023ba:	88f9      	ldrh	r1, [r7, #6]
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <CO_SDOserver_init_canRxTx+0xd4>)
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023cc:	68b8      	ldr	r0, [r7, #8]
 80023ce:	f003 fd33 	bl	8005e38 <CO_CANrxBufferInit>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	8aba      	ldrh	r2, [r7, #20]
 80023dc:	88b9      	ldrh	r1, [r7, #4]
 80023de:	2300      	movs	r3, #0
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2308      	movs	r3, #8
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	f003 fd84 	bl	8005ef4 <CO_CANtxBufferInit>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80023fa:	23ff      	movs	r3, #255	; 0xff
 80023fc:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8002404:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	080022e9 	.word	0x080022e9

08002414 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b08f      	sub	sp, #60	; 0x3c
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <OD_write_1201_additional+0x20>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <OD_write_1201_additional+0x20>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8002434:	2309      	movs	r3, #9
 8002436:	e0f9      	b.n	800262c <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	7d1b      	ldrb	r3, [r3, #20]
 8002442:	2b03      	cmp	r3, #3
 8002444:	f200 80e8 	bhi.w	8002618 <OD_write_1201_additional+0x204>
 8002448:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <OD_write_1201_additional+0x3c>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002461 	.word	0x08002461
 8002454:	08002465 	.word	0x08002465
 8002458:	08002529 	.word	0x08002529
 800245c:	080025ef 	.word	0x080025ef
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8002460:	2304      	movs	r3, #4
 8002462:	e0e3      	b.n	800262c <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f7ff fecd 	bl	8002204 <CO_getUint32>
 800246a:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002480:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	43db      	mvns	r3, r3
 8002486:	0fdb      	lsrs	r3, r3, #31
 8002488:	b2db      	uxtb	r3, r3
 800248a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4b69      	ldr	r3, [pc, #420]	; (8002634 <OD_write_1201_additional+0x220>)
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d134      	bne.n	8002500 <OD_write_1201_additional+0xec>
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <OD_write_1201_additional+0x98>
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <OD_write_1201_additional+0x98>
 80024a4:	8afa      	ldrh	r2, [r7, #22]
 80024a6:	8abb      	ldrh	r3, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d129      	bne.n	8002500 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <OD_write_1201_additional+0xf0>
 80024b2:	8afb      	ldrh	r3, [r7, #22]
 80024b4:	2b7f      	cmp	r3, #127	; 0x7f
 80024b6:	d923      	bls.n	8002500 <OD_write_1201_additional+0xec>
 80024b8:	8afb      	ldrh	r3, [r7, #22]
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d903      	bls.n	80024c8 <OD_write_1201_additional+0xb4>
 80024c0:	8afb      	ldrh	r3, [r7, #22]
 80024c2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80024c6:	d91b      	bls.n	8002500 <OD_write_1201_additional+0xec>
 80024c8:	8afb      	ldrh	r3, [r7, #22]
 80024ca:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80024ce:	d903      	bls.n	80024d8 <OD_write_1201_additional+0xc4>
 80024d0:	8afb      	ldrh	r3, [r7, #22]
 80024d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024d6:	d313      	bcc.n	8002500 <OD_write_1201_additional+0xec>
 80024d8:	8afb      	ldrh	r3, [r7, #22]
 80024da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024de:	d903      	bls.n	80024e8 <OD_write_1201_additional+0xd4>
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80024e6:	d30b      	bcc.n	8002500 <OD_write_1201_additional+0xec>
 80024e8:	8afb      	ldrh	r3, [r7, #22]
 80024ea:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80024ee:	d303      	bcc.n	80024f8 <OD_write_1201_additional+0xe4>
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f6:	d303      	bcc.n	8002500 <OD_write_1201_additional+0xec>
 80024f8:	8afb      	ldrh	r3, [r7, #22]
 80024fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024fe:	d901      	bls.n	8002504 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8002500:	230f      	movs	r3, #15
 8002502:	e093      	b.n	800262c <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4603      	mov	r3, r0
 8002520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002522:	f7ff ff0b 	bl	800233c <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8002526:	e07a      	b.n	800261e <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8002528:	68b8      	ldr	r0, [r7, #8]
 800252a:	f7ff fe6b 	bl	8002204 <CO_getUint32>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	b29b      	uxth	r3, r3
 8002534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002538:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	b29b      	uxth	r3, r3
 8002540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002544:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	43db      	mvns	r3, r3
 800254a:	0fdb      	lsrs	r3, r3, #31
 800254c:	b2db      	uxtb	r3, r3
 800254e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <OD_write_1201_additional+0x220>)
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d134      	bne.n	80025c4 <OD_write_1201_additional+0x1b0>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <OD_write_1201_additional+0x15c>
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <OD_write_1201_additional+0x15c>
 8002568:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800256a:	8c3b      	ldrh	r3, [r7, #32]
 800256c:	429a      	cmp	r2, r3
 800256e:	d129      	bne.n	80025c4 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <OD_write_1201_additional+0x1b4>
 8002576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002578:	2b7f      	cmp	r3, #127	; 0x7f
 800257a:	d923      	bls.n	80025c4 <OD_write_1201_additional+0x1b0>
 800257c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d903      	bls.n	800258c <OD_write_1201_additional+0x178>
 8002584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002586:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800258a:	d91b      	bls.n	80025c4 <OD_write_1201_additional+0x1b0>
 800258c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800258e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002592:	d903      	bls.n	800259c <OD_write_1201_additional+0x188>
 8002594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002596:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800259a:	d313      	bcc.n	80025c4 <OD_write_1201_additional+0x1b0>
 800259c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800259e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025a2:	d903      	bls.n	80025ac <OD_write_1201_additional+0x198>
 80025a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025a6:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80025aa:	d30b      	bcc.n	80025c4 <OD_write_1201_additional+0x1b0>
 80025ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025ae:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80025b2:	d303      	bcc.n	80025bc <OD_write_1201_additional+0x1a8>
 80025b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ba:	d303      	bcc.n	80025c4 <OD_write_1201_additional+0x1b0>
 80025bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025c2:	d901      	bls.n	80025c8 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 80025c4:	230f      	movs	r3, #15
 80025c6:	e031      	b.n	800262c <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	9201      	str	r2, [sp, #4]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	4602      	mov	r2, r0
 80025e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025e8:	f7ff fea8 	bl	800233c <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 80025ec:	e017      	b.n	800261e <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d001      	beq.n	80025f8 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80025f4:	230b      	movs	r3, #11
 80025f6:	e019      	b.n	800262c <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80025f8:	68b8      	ldr	r0, [r7, #8]
 80025fa:	f7ff fdf5 	bl	80021e8 <CO_getUint8>
 80025fe:	4603      	mov	r3, r0
 8002600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8002604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <OD_write_1201_additional+0x200>
 800260c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002610:	2b00      	cmp	r3, #0
 8002612:	da03      	bge.n	800261c <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8002614:	230f      	movs	r3, #15
 8002616:	e009      	b.n	800262c <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8002618:	230e      	movs	r3, #14
 800261a:	e007      	b.n	800262c <OD_write_1201_additional+0x218>
            break;
 800261c:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff f9a8 	bl	800197a <OD_writeOriginal>
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3734      	adds	r7, #52	; 0x34
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	3ffff800 	.word	0x3ffff800

08002638 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <CO_SDOserver_init+0x26>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <CO_SDOserver_init+0x26>
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <CO_SDOserver_init+0x26>
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e0f5      	b.n	8002850 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8002670:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002676:	fb03 f202 	mul.w	r2, r3, r2
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	679a      	str	r2, [r3, #120]	; 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d117      	bne.n	80026ba <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <CO_SDOserver_init+0x60>
 8002690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	da02      	bge.n	800269e <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	e0d8      	b.n	8002850 <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80026a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80026b0:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	611a      	str	r2, [r3, #16]
 80026b8:	e0a4      	b.n	8002804 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fdb0 	bl	8002220 <OD_getIndex>
 80026c0:	4603      	mov	r3, r0
 80026c2:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 80026c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026c6:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80026ca:	d123      	bne.n	8002714 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <CO_SDOserver_init+0xa2>
 80026d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da02      	bge.n	80026e0 <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e0b7      	b.n	8002850 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80026e8:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80026f2:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80026fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80026fc:	2301      	movs	r3, #1
 80026fe:	2101      	movs	r1, #1
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fddc 	bl	80022be <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8002706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002708:	2301      	movs	r3, #1
 800270a:	2102      	movs	r1, #2
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fdd6 	bl	80022be <OD_set_u32>
 8002712:	e077      	b.n	8002804 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8002714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002716:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800271a:	d96f      	bls.n	80027fc <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 800271c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800271e:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8002722:	d26b      	bcs.n	80027fc <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8002724:	f107 021d 	add.w	r2, r7, #29
 8002728:	2301      	movs	r3, #1
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fd9c 	bl	800226a <OD_get_u8>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8002738:	f107 0218 	add.w	r2, r7, #24
 800273c:	2301      	movs	r3, #1
 800273e:	2101      	movs	r1, #1
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fda7 	bl	8002294 <OD_get_u32>
 8002746:	4603      	mov	r3, r0
 8002748:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 800274c:	f107 0214 	add.w	r2, r7, #20
 8002750:	2301      	movs	r3, #1
 8002752:	2102      	movs	r1, #2
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fd9d 	bl	8002294 <OD_get_u32>
 800275a:	4603      	mov	r3, r0
 800275c:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 800275e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <CO_SDOserver_init+0x14a>
 8002766:	7f7b      	ldrb	r3, [r7, #29]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d002      	beq.n	8002772 <CO_SDOserver_init+0x13a>
 800276c:	7f7b      	ldrb	r3, [r7, #29]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d107      	bne.n	8002782 <CO_SDOserver_init+0x14a>
 8002772:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 800277a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 8002782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8002788:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800278a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278c:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 800278e:	f06f 030b 	mvn.w	r3, #11
 8002792:	e05d      	b.n	8002850 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db05      	blt.n	80027a6 <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 800279e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	e000      	b.n	80027a8 <CO_SDOserver_init+0x170>
 80027a6:	2300      	movs	r3, #0
 80027a8:	84fb      	strh	r3, [r7, #38]	; 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db05      	blt.n	80027bc <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 80027b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	e000      	b.n	80027be <CO_SDOserver_init+0x186>
 80027bc:	2300      	movs	r3, #0
 80027be:	84bb      	strh	r3, [r7, #36]	; 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <CO_SDOserver_init+0x220>)
 80027ca:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a23      	ldr	r2, [pc, #140]	; (800285c <CO_SDOserver_init+0x224>)
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3358      	adds	r3, #88	; 0x58
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fd32 	bl	8002242 <OD_extension_init>
 80027de:	4603      	mov	r3, r0
 80027e0:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 80027e2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 80027f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80027f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f4:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 80027f6:	f06f 030b 	mvn.w	r3, #11
 80027fa:	e029      	b.n	8002850 <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	e026      	b.n	8002850 <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8002802:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800280e:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002814:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800281e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002832:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8002834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002838:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800283c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800283e:	9201      	str	r2, [sp, #4]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4603      	mov	r3, r0
 8002844:	460a      	mov	r2, r1
 8002846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fd77 	bl	800233c <CO_SDOserver_init_canRxTx>
 800284e:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8002850:	4618      	mov	r0, r3
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	080018cb 	.word	0x080018cb
 800285c:	08002415 	.word	0x08002415

08002860 <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b08b      	sub	sp, #44	; 0x2c
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	460b      	mov	r3, r1
 8002870:	71fb      	strb	r3, [r7, #7]
 8002872:	4613      	mov	r3, r2
 8002874:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800287c:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8082 	beq.w	800298c <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <validateAndWriteToOD+0x5c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002898:	429a      	cmp	r2, r3
 800289a:	d00f      	beq.n	80028bc <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d901      	bls.n	80028ac <validateAndWriteToOD+0x4c>
 80028a8:	4a73      	ldr	r2, [pc, #460]	; (8002a78 <validateAndWriteToOD+0x218>)
 80028aa:	e000      	b.n	80028ae <validateAndWriteToOD+0x4e>
 80028ac:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <validateAndWriteToOD+0x21c>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	751a      	strb	r2, [r3, #20]
            return false;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e0d8      	b.n	8002a6e <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da42      	bge.n	8002954 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <validateAndWriteToOD+0x7e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d93a      	bls.n	8002954 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028e4:	3302      	adds	r3, #2
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d834      	bhi.n	8002954 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->bufOffsetWr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	66da      	str	r2, [r3, #108]	; 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <validateAndWriteToOD+0xc2>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	429a      	cmp	r2, r3
 8002920:	d913      	bls.n	800294a <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->bufOffsetWr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	621a      	str	r2, [r3, #32]
 8002952:	e02d      	b.n	80029b0 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	621a      	str	r2, [r3, #32]
 8002962:	e025      	b.n	80029b0 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d020      	beq.n	80029b0 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	429a      	cmp	r2, r3
 8002976:	d201      	bcs.n	800297c <validateAndWriteToOD+0x11c>
 8002978:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <validateAndWriteToOD+0x218>)
 800297a:	e000      	b.n	800297e <validateAndWriteToOD+0x11e>
 800297c:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <validateAndWriteToOD+0x21c>)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	751a      	strb	r2, [r3, #20]
            return false;
 8002988:	2300      	movs	r3, #0
 800298a:	e070      	b.n	8002a6e <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <validateAndWriteToOD+0x150>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299c:	429a      	cmp	r2, r3
 800299e:	d907      	bls.n	80029b0 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4a35      	ldr	r2, [pc, #212]	; (8002a78 <validateAndWriteToOD+0x218>)
 80029a4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	751a      	strb	r2, [r3, #20]
            return false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e05e      	b.n	8002a6e <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b8:	f3ef 8210 	mrs	r2, PRIMASK
 80029bc:	617a      	str	r2, [r7, #20]
  return(result);
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80029c2:	b672      	cpsid	i
}
 80029c4:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f103 0018 	add.w	r0, r3, #24
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	47a0      	blx	r4
 80029e2:	4603      	mov	r3, r0
 80029e4:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80029fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <validateAndWriteToOD+0x1ca>
 8002a06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d00c      	beq.n	8002a2a <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8002a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff f98d 	bl	8001d34 <OD_getSDOabCode>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	751a      	strb	r2, [r3, #20]
        return false;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e021      	b.n	8002a6e <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <validateAndWriteToOD+0x1ec>
 8002a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d107      	bne.n	8002a4c <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <validateAndWriteToOD+0x21c>)
 8002a40:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	751a      	strb	r2, [r3, #20]
        return false;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e010      	b.n	8002a6e <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10b      	bne.n	8002a6c <validateAndWriteToOD+0x20c>
 8002a54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <validateAndWriteToOD+0x218>)
 8002a60:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	751a      	strb	r2, [r3, #20]
        return false;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	372c      	adds	r7, #44	; 0x2c
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	06070012 	.word	0x06070012
 8002a7c:	06070013 	.word	0x06070013

08002a80 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08d      	sub	sp, #52	; 0x34
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 80ab 	bne.w	8002bfe <readFromOd+0x17e>
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f080 80a6 	bcs.w	8002bfe <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ac4:	4413      	add	r3, r2
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f007 fd83 	bl	800a5d4 <memmove>
        SDO->bufOffsetRd = 0;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f1c3 0320 	rsb	r3, r3, #32
 8002ae4:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aee:	f3ef 8210 	mrs	r2, PRIMASK
 8002af2:	617a      	str	r2, [r7, #20]
  return(result);
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f103 0018 	add.w	r0, r3, #24
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	3380      	adds	r3, #128	; 0x80
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	18d1      	adds	r1, r2, r3
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	6a3a      	ldr	r2, [r7, #32]
 8002b14:	47a0      	blx	r4
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f383 8810 	msr	PRIMASK, r3
}
 8002b2a:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8002b2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <readFromOd+0xd8>
 8002b34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d00c      	beq.n	8002b58 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8002b3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f8f6 	bl	8001d34 <OD_getSDOabCode>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	751a      	strb	r2, [r3, #20]
            return false;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e053      	b.n	8002c00 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d027      	beq.n	8002bb6 <readFromOd+0x136>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da21      	bge.n	8002bb6 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	3380      	adds	r3, #128	; 0x80
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	3380      	adds	r3, #128	; 0x80
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fb22 	bl	80001d0 <strlen>
 8002b8c:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0U) {
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <readFromOd+0x118>
                countStr = 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d20a      	bcs.n	8002bb6 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	441a      	add	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <readFromOd+0x156>
 8002bcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d110      	bne.n	8002bf8 <readFromOd+0x178>
            SDO->finished = false;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d90a      	bls.n	8002bfe <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <readFromOd+0x188>)
 8002bec:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	751a      	strb	r2, [r3, #20]
                return false;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e003      	b.n	8002c00 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	675a      	str	r2, [r3, #116]	; 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3734      	adds	r7, #52	; 0x34
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	06040047 	.word	0x06040047

08002c0c <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b09b      	sub	sp, #108	; 0x6c
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8002c20:	f06f 0301 	mvn.w	r3, #1
 8002c24:	f000 bd04 	b.w	8003630 <CO_SDOserver_process+0xa24>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	657b      	str	r3, [r7, #84]	; 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	7d1b      	ldrb	r3, [r3, #20]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <CO_SDOserver_process+0x56>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <CO_SDOserver_process+0x56>
 8002c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c60:	e2d9      	b.n	8003216 <CO_SDOserver_process+0x60a>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <CO_SDOserver_process+0x64>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c82:	e2c8      	b.n	8003216 <CO_SDOserver_process+0x60a>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8002c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 82c5 	beq.w	8003216 <CO_SDOserver_process+0x60a>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	7d1b      	ldrb	r3, [r3, #20]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 80cc 	bne.w	8002e30 <CO_SDOserver_process+0x224>
            bool_t upload = false;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d103      	bne.n	8002cb2 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2211      	movs	r2, #17
 8002cae:	751a      	strb	r2, [r3, #20]
 8002cb0:	e00f      	b.n	8002cd2 <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d105      	bne.n	8002cc8 <CO_SDOserver_process+0xbc>
                upload = true;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2221      	movs	r2, #33	; 0x21
 8002cc4:	751a      	strb	r2, [r3, #20]
 8002cc6:	e004      	b.n	8002cd2 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8002cc8:	4ba7      	ldr	r3, [pc, #668]	; (8002f68 <CO_SDOserver_process+0x35c>)
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d162      	bne.n	8002d9e <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7fe febe 	bl	8001a8c <OD_find>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f103 0218 	add.w	r2, r3, #24
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f7fe ff11 	bl	8001b44 <OD_getSub>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                if (odRet != ODR_OK) {
 8002d28:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8002d30:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fffd 	bl	8001d34 <OD_getSDOabCode>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	751a      	strb	r2, [r3, #20]
 8002d44:	e02b      	b.n	8002d9e <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8002d54:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <CO_SDOserver_process+0x360>)
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	751a      	strb	r2, [r3, #20]
 8002d5e:	e01e      	b.n	8002d9e <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 8002d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00c      	beq.n	8002d80 <CO_SDOserver_process+0x174>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8002d74:	4b7e      	ldr	r3, [pc, #504]	; (8002f70 <CO_SDOserver_process+0x364>)
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	751a      	strb	r2, [r3, #20]
 8002d7e:	e00e      	b.n	8002d9e <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 8002d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <CO_SDOserver_process+0x192>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 8002d94:	4b77      	ldr	r3, [pc, #476]	; (8002f74 <CO_SDOserver_process+0x368>)
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8002d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d045      	beq.n	8002e30 <CO_SDOserver_process+0x224>
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d142      	bne.n	8002e30 <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->bufOffsetWr = 0;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8002dc6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2207      	movs	r2, #7
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fe56 	bl	8002a80 <readFromOd>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02a      	beq.n	8002e30 <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01a      	beq.n	8002e18 <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0U) {
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	669a      	str	r2, [r3, #104]	; 0x68
 8002dfc:	e018      	b.n	8002e30 <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d011      	beq.n	8002e30 <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8002e0c:	4b5a      	ldr	r3, [pc, #360]	; (8002f78 <CO_SDOserver_process+0x36c>)
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	751a      	strb	r2, [r3, #20]
 8002e16:	e00b      	b.n	8002e30 <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e1e:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db02      	blt.n	8002e2a <CO_SDOserver_process+0x21e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	e000      	b.n	8002e2c <CO_SDOserver_process+0x220>
 8002e2a:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	7d1b      	ldrb	r3, [r3, #20]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	7d1b      	ldrb	r3, [r3, #20]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d005      	beq.n	8002e58 <CO_SDOserver_process+0x24c>
 8002e4c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <CO_SDOserver_process+0x24c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <CO_SDOserver_process+0x24e>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002e5e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (isOKstate) {
 8002e6a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 81be 	beq.w	80031f0 <CO_SDOserver_process+0x5e4>
            switch (SDO->state) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	7d1b      	ldrb	r3, [r3, #20]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b11      	subs	r3, #17
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	f200 81b1 	bhi.w	80031e4 <CO_SDOserver_process+0x5d8>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <CO_SDOserver_process+0x27c>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	080031e5 	.word	0x080031e5
 8002e90:	0800309d 	.word	0x0800309d
 8002e94:	080031e5 	.word	0x080031e5
 8002e98:	080031e5 	.word	0x080031e5
 8002e9c:	080031e5 	.word	0x080031e5
 8002ea0:	080031e5 	.word	0x080031e5
 8002ea4:	080031e5 	.word	0x080031e5
 8002ea8:	080031e5 	.word	0x080031e5
 8002eac:	080031e5 	.word	0x080031e5
 8002eb0:	080031e5 	.word	0x080031e5
 8002eb4:	080031e5 	.word	0x080031e5
 8002eb8:	080031e5 	.word	0x080031e5
 8002ebc:	080031e5 	.word	0x080031e5
 8002ec0:	080031e5 	.word	0x080031e5
 8002ec4:	080031e5 	.word	0x080031e5
 8002ec8:	08003193 	.word	0x08003193
 8002ecc:	080031e5 	.word	0x080031e5
 8002ed0:	0800319b 	.word	0x0800319b
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80a2 	beq.w	8003028 <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 8002eea:	2304      	movs	r3, #4
 8002eec:	65fb      	str	r3, [r7, #92]	; 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f10:	e007      	b.n	8002f22 <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 8002f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <CO_SDOserver_process+0x316>
 8002f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d801      	bhi.n	8002f22 <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	2300      	movs	r3, #0
 8002f28:	853b      	strh	r3, [r7, #40]	; 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f36:	4618      	mov	r0, r3
 8002f38:	f007 fb3e 	bl	800a5b8 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da21      	bge.n	8002f8c <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8002f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <CO_SDOserver_process+0x34a>
 8002f4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d21a      	bcs.n	8002f8c <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 8002f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10b      	bne.n	8002f7c <CO_SDOserver_process+0x370>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e00a      	b.n	8002f7e <CO_SDOserver_process+0x372>
 8002f68:	05040001 	.word	0x05040001
 8002f6c:	06010000 	.word	0x06010000
 8002f70:	06010001 	.word	0x06010001
 8002f74:	06010002 	.word	0x06010002
 8002f78:	06040047 	.word	0x06040047
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f80:	4413      	add	r3, r2
 8002f82:	65fb      	str	r3, [r7, #92]	; 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f88:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8002f8a:	e016      	b.n	8002fba <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f96:	621a      	str	r2, [r3, #32]
 8002f98:	e00f      	b.n	8002fba <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8002f9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d00b      	beq.n	8002fba <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002fa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d901      	bls.n	8002fae <CO_SDOserver_process+0x3a2>
 8002faa:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <CO_SDOserver_process+0x5e8>)
 8002fac:	e000      	b.n	8002fb0 <CO_SDOserver_process+0x3a4>
 8002fae:	4b92      	ldr	r3, [pc, #584]	; (80031f8 <CO_SDOserver_process+0x5ec>)
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	751a      	strb	r2, [r3, #20]
                            break;
 8002fb8:	e125      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc2:	f3ef 8210 	mrs	r2, PRIMASK
 8002fc6:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8002fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fca:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8002fcc:	b672      	cpsid	i
}
 8002fce:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f103 0018 	add.w	r0, r3, #24
 8002fda:	f107 0320 	add.w	r3, r7, #32
 8002fde:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002fe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fe4:	47a0      	blx	r4
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	bf00      	nop

                        if (odRet != ODR_OK) {
 8002ffc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003004:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fe93 	bl	8001d34 <OD_getSDOabCode>
 800300e:	4603      	mov	r3, r0
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	751a      	strb	r2, [r3, #20]
                            break;
 8003018:	e0f5      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2212      	movs	r2, #18
 800301e:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	675a      	str	r2, [r3, #116]	; 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 8003026:	e0ee      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	64bb      	str	r3, [r7, #72]	; 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3344      	adds	r3, #68	; 0x44
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	669a      	str	r2, [r3, #104]	; 0x68
                            if (sizeInOd > 0U) {
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01e      	beq.n	800308e <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003056:	429a      	cmp	r2, r3
 8003058:	d205      	bcs.n	8003066 <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 800305a:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <CO_SDOserver_process+0x5e8>)
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	751a      	strb	r2, [r3, #20]
                                    break;
 8003064:	e0cf      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                                else if ((SDO->sizeInd < sizeInOd)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306c:	429a      	cmp	r2, r3
 800306e:	d90e      	bls.n	800308e <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003076:	b25b      	sxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	db08      	blt.n	800308e <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <CO_SDOserver_process+0x5ec>)
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	751a      	strb	r2, [r3, #20]
                                    break;
 8003086:	e0be      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                            SDO->sizeInd = 0;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	669a      	str	r2, [r3, #104]	; 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2212      	movs	r2, #18
 8003092:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	675a      	str	r2, [r3, #116]	; 0x74
                    break;
 800309a:	e0b4      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d16d      	bne.n	8003186 <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	675a      	str	r2, [r3, #116]	; 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        if (toggle != SDO->toggle) {
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030d8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80030dc:	429a      	cmp	r2, r3
 80030de:	d005      	beq.n	80030ec <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <CO_SDOserver_process+0x5f0>)
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	751a      	strb	r2, [r3, #20]
                            break;
 80030ea:	e08c      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	64fb      	str	r3, [r7, #76]	; 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800310a:	18d0      	adds	r0, r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3341      	adds	r3, #65	; 0x41
 8003110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003112:	4619      	mov	r1, r3
 8003114:	f007 fa50 	bl	800a5b8 <memcpy>
                        SDO->bufOffsetWr += count;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800311e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        SDO->sizeTran += count;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	66da      	str	r2, [r3, #108]	; 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <CO_SDOserver_process+0x548>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	429a      	cmp	r2, r3
 8003146:	d905      	bls.n	8003154 <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <CO_SDOserver_process+0x5e8>)
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	751a      	strb	r2, [r3, #20]
                            break;
 8003152:	e058      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <CO_SDOserver_process+0x55e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003162:	f1c3 0320 	rsb	r3, r3, #32
 8003166:	2b08      	cmp	r3, #8
 8003168:	d809      	bhi.n	800317e <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 800316a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800316e:	2300      	movs	r3, #0
 8003170:	2200      	movs	r2, #0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff fb74 	bl	8002860 <validateAndWriteToOD>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d042      	beq.n	8003204 <CO_SDOserver_process+0x5f8>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2214      	movs	r2, #20
 8003182:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8003184:	e03f      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        abortCode = CO_SDO_AB_CMD;
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <CO_SDOserver_process+0x5f4>)
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	751a      	strb	r2, [r3, #20]
                    break;
 8003190:	e039      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2222      	movs	r2, #34	; 0x22
 8003196:	751a      	strb	r2, [r3, #20]
                    break;
 8003198:	e035      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d117      	bne.n	80031d8 <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                        if (toggle != SDO->toggle) {
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031bc:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d005      	beq.n	80031d0 <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <CO_SDOserver_process+0x5f0>)
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	751a      	strb	r2, [r3, #20]
                            break;
 80031ce:	e01a      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80031d6:	e016      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                        abortCode = CO_SDO_AB_CMD;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <CO_SDOserver_process+0x5f4>)
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	751a      	strb	r2, [r3, #20]
                    break;
 80031e2:	e010      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <CO_SDOserver_process+0x5f4>)
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	751a      	strb	r2, [r3, #20]
                    break;
 80031ee:	e00a      	b.n	8003206 <CO_SDOserver_process+0x5fa>
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
 80031f0:	bf00      	nop
 80031f2:	e008      	b.n	8003206 <CO_SDOserver_process+0x5fa>
 80031f4:	06070012 	.word	0x06070012
 80031f8:	06070013 	.word	0x06070013
 80031fc:	05030000 	.word	0x05030000
 8003200:	05040001 	.word	0x05040001
                                break;
 8003204:	bf00      	nop
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	63da      	str	r2, [r3, #60]	; 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8003216:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800321a:	2b01      	cmp	r3, #1
 800321c:	d11e      	bne.n	800325c <CO_SDOserver_process+0x650>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003226:	429a      	cmp	r2, r3
 8003228:	d205      	bcs.n	8003236 <CO_SDOserver_process+0x62a>
            SDO->timeoutTimer += timeDifference_us;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323e:	429a      	cmp	r2, r3
 8003240:	d304      	bcc.n	800324c <CO_SDOserver_process+0x640>
            abortCode = CO_SDO_AB_TIMEOUT;
 8003242:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <CO_SDOserver_process+0x8a8>)
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <CO_SDOserver_process+0x650>
            ret = CO_SDO_RT_transmittBufferFull;
 8003256:	2304      	movs	r3, #4
 8003258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 800325c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 81a8 	bne.w	80035b6 <CO_SDOserver_process+0x9aa>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	3305      	adds	r3, #5
 800326c:	2208      	movs	r2, #8
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f007 f9c9 	bl	800a608 <memset>

        switch (SDO->state) {
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	7d1b      	ldrb	r3, [r3, #20]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3b12      	subs	r3, #18
 800327e:	2b12      	cmp	r3, #18
 8003280:	f200 819b 	bhi.w	80035ba <CO_SDOserver_process+0x9ae>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <CO_SDOserver_process+0x680>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032d9 	.word	0x080032d9
 8003290:	080035bb 	.word	0x080035bb
 8003294:	0800335b 	.word	0x0800335b
 8003298:	080035bb 	.word	0x080035bb
 800329c:	080035bb 	.word	0x080035bb
 80032a0:	080035bb 	.word	0x080035bb
 80032a4:	080035bb 	.word	0x080035bb
 80032a8:	080035bb 	.word	0x080035bb
 80032ac:	080035bb 	.word	0x080035bb
 80032b0:	080035bb 	.word	0x080035bb
 80032b4:	080035bb 	.word	0x080035bb
 80032b8:	080035bb 	.word	0x080035bb
 80032bc:	080035bb 	.word	0x080035bb
 80032c0:	080035bb 	.word	0x080035bb
 80032c4:	080035bb 	.word	0x080035bb
 80032c8:	080035bb 	.word	0x080035bb
 80032cc:	080033b7 	.word	0x080033b7
 80032d0:	080035bb 	.word	0x080035bb
 80032d4:	08003485 	.word	0x08003485
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2260      	movs	r2, #96	; 0x60
 80032de:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003306:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f002 fe65 	bl	8005fe8 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <CO_SDOserver_process+0x728>
                    SDO->state = CO_SDO_ST_IDLE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8003332:	e145      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
                    SDO->toggle = 0x00;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->sizeTran = 0;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	66da      	str	r2, [r3, #108]	; 0x6c
                    SDO->bufOffsetWr = 0;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    SDO->bufOffsetRd = 0;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2213      	movs	r2, #19
 8003356:	751a      	strb	r2, [r3, #20]
                break;
 8003358:	e132      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <CO_SDOserver_process+0x76e>
 8003376:	2210      	movs	r2, #16
 8003378:	e000      	b.n	800337c <CO_SDOserver_process+0x770>
 800337a:	2200      	movs	r2, #0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	67da      	str	r2, [r3, #124]	; 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f002 fe28 	bl	8005fe8 <CO_CANsend>
                if (SDO->finished) {
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <CO_SDOserver_process+0x7a2>
                    SDO->state = CO_SDO_ST_IDLE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 80033ac:	e108      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2213      	movs	r2, #19
 80033b2:	751a      	strb	r2, [r3, #20]
                break;
 80033b4:	e104      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d024      	beq.n	8003408 <CO_SDOserver_process+0x7fc>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d820      	bhi.n	8003408 <CO_SDOserver_process+0x7fc>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f1c3 0304 	rsb	r3, r3, #4
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f103 0009 	add.w	r0, r3, #9
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f4:	461a      	mov	r2, r3
 80033f6:	f007 f8df 	bl	800a5b8 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003406:	e020      	b.n	800344a <CO_SDOserver_process+0x83e>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <CO_SDOserver_process+0x822>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2241      	movs	r2, #65	; 0x41
 8003420:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	3309      	adds	r3, #9
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e003      	b.n	8003436 <CO_SDOserver_process+0x82a>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->timeoutTimer = 0;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2223      	movs	r2, #35	; 0x23
 8003448:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003470:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f002 fdb3 	bl	8005fe8 <CO_CANsend>
                break;
 8003482:	e09d      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8003484:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003488:	2300      	movs	r3, #0
 800348a:	2207      	movs	r2, #7
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff faf7 	bl	8002a80 <readFromOd>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8092 	beq.w	80035be <CO_SDOserver_process+0x9b2>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80034a4:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <CO_SDOserver_process+0x8ac>
 80034b0:	2210      	movs	r2, #16
 80034b2:	e002      	b.n	80034ba <CO_SDOserver_process+0x8ae>
 80034b4:	05040000 	.word	0x05040000
 80034b8:	2200      	movs	r2, #0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	65bb      	str	r3, [r7, #88]	; 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 80034d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d906      	bls.n	80034e4 <CO_SDOserver_process+0x8d8>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01b      	beq.n	8003516 <CO_SDOserver_process+0x90a>
 80034de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d118      	bne.n	8003516 <CO_SDOserver_process+0x90a>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	795a      	ldrb	r2, [r3, #5]
 80034ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003514:	e007      	b.n	8003526 <CO_SDOserver_process+0x91a>
                } else {
                    SDO->timeoutTimer = 0;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2223      	movs	r2, #35	; 0x23
 8003520:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8003522:	2307      	movs	r3, #7
 8003524:	65bb      	str	r3, [r7, #88]	; 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	1d98      	adds	r0, r3, #6
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003538:	4413      	add	r3, r2
 800353a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800353c:	4619      	mov	r1, r3
 800353e:	f007 f83b 	bl	800a5b8 <memcpy>
                SDO->bufOffsetRd += count;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800354a:	441a      	add	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran += count;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003558:	441a      	add	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01e      	beq.n	80035a4 <CO_SDOserver_process+0x998>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800356e:	429a      	cmp	r2, r3
 8003570:	d905      	bls.n	800357e <CO_SDOserver_process+0x972>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <CO_SDOserver_process+0xa2c>)
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	751a      	strb	r2, [r3, #20]
                        break;
 800357c:	e020      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 800357e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <CO_SDOserver_process+0x998>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358e:	429a      	cmp	r2, r3
 8003590:	d208      	bcs.n	80035a4 <CO_SDOserver_process+0x998>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <CO_SDOserver_process+0xa30>)
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	751a      	strb	r2, [r3, #20]
                        break;
 80035a2:	e00d      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f002 fd1a 	bl	8005fe8 <CO_CANsend>
                break;
 80035b4:	e004      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
            default: {
                /* none */
                break;
            }
        } /* switch (SDO->state) */
    }
 80035b6:	bf00      	nop
 80035b8:	e002      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
                break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <CO_SDOserver_process+0x9b4>
                    break;
 80035be:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 80035c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d131      	bne.n	800362c <CO_SDOserver_process+0xa20>
        if (SDO->state == CO_SDO_ST_ABORT) {
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	7d1b      	ldrb	r3, [r3, #20]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d12c      	bne.n	800362c <CO_SDOserver_process+0xa20>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003604:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	3309      	adds	r3, #9
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f002 fce4 	bl	8005fe8 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8003626:	23f6      	movs	r3, #246	; 0xf6
 8003628:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 800362c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8003630:	4618      	mov	r0, r3
 8003632:	376c      	adds	r7, #108	; 0x6c
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	06070012 	.word	0x06070012
 800363c:	06070013 	.word	0x06070013

08003640 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 800364c:	73fb      	strb	r3, [r7, #15]
    return value;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <CO_getUint32>:
CO_getUint32(const void* buf) {
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003668:	60fb      	str	r3, [r7, #12]
    return value;
 800366a:	68fb      	ldr	r3, [r7, #12]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <OD_getIndex+0x14>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	e000      	b.n	800368e <OD_getIndex+0x16>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80036aa:	2305      	movs	r3, #5
 80036ac:	e003      	b.n	80036b6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	460b      	mov	r3, r1
 80036d0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80036d2:	7af9      	ldrb	r1, [r7, #11]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2301      	movs	r3, #1
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7fe fb47 	bl	8001d70 <OD_get_value>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	460b      	mov	r3, r1
 80036fa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80036fc:	7af9      	ldrb	r1, [r7, #11]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2304      	movs	r3, #4
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7fe fb32 	bl	8001d70 <OD_get_value>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7c9b      	ldrb	r3, [r3, #18]
 8003722:	3301      	adds	r3, #1
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	749a      	strb	r2, [r3, #18]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7c9a      	ldrb	r2, [r3, #18]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7c5b      	ldrb	r3, [r3, #17]
 8003732:	429a      	cmp	r2, r3
 8003734:	d902      	bls.n	800373c <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf0c      	ite	eq
 800374a:	2301      	moveq	r3, #1
 800374c:	2300      	movne	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	7c92      	ldrb	r2, [r2, #18]
 800375e:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f002 fc3c 	bl	8005fe8 <CO_CANsend>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 800377a:	b480      	push	{r7}
 800377c:	b087      	sub	sp, #28
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	791b      	ldrb	r3, [r3, #4]
 800378c:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	7c5b      	ldrb	r3, [r3, #17]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e019      	b.n	80037da <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	721a      	strb	r2, [r3, #8]
 80037b2:	e012      	b.n	80037da <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d109      	bne.n	80037ce <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	3305      	adds	r3, #5
 80037be:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e005      	b.n	80037da <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00c      	beq.n	80037fa <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2201      	movs	r2, #1
 80037f8:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b08f      	sub	sp, #60	; 0x3c
 800380c:	af04      	add	r7, sp, #16
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <OD_write_1005+0x2e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	7d1b      	ldrb	r3, [r3, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <OD_write_1005+0x2e>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <OD_write_1005+0x2e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d102      	bne.n	8003836 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8003836:	2309      	movs	r3, #9
 8003838:	e0a2      	b.n	8003980 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8003840:	68b8      	ldr	r0, [r7, #8]
 8003842:	f7ff ff0b 	bl	800365c <CO_getUint32>
 8003846:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003850:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	4b48      	ldr	r3, [pc, #288]	; (8003988 <OD_write_1005+0x180>)
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d133      	bne.n	80038d6 <OD_write_1005+0xce>
 800386e:	8bfb      	ldrh	r3, [r7, #30]
 8003870:	2b7f      	cmp	r3, #127	; 0x7f
 8003872:	d930      	bls.n	80038d6 <OD_write_1005+0xce>
 8003874:	8bfb      	ldrh	r3, [r7, #30]
 8003876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387a:	d903      	bls.n	8003884 <OD_write_1005+0x7c>
 800387c:	8bfb      	ldrh	r3, [r7, #30]
 800387e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003882:	d928      	bls.n	80038d6 <OD_write_1005+0xce>
 8003884:	8bfb      	ldrh	r3, [r7, #30]
 8003886:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800388a:	d903      	bls.n	8003894 <OD_write_1005+0x8c>
 800388c:	8bfb      	ldrh	r3, [r7, #30]
 800388e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003892:	d320      	bcc.n	80038d6 <OD_write_1005+0xce>
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800389a:	d903      	bls.n	80038a4 <OD_write_1005+0x9c>
 800389c:	8bfb      	ldrh	r3, [r7, #30]
 800389e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80038a2:	d318      	bcc.n	80038d6 <OD_write_1005+0xce>
 80038a4:	8bfb      	ldrh	r3, [r7, #30]
 80038a6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80038aa:	d303      	bcc.n	80038b4 <OD_write_1005+0xac>
 80038ac:	8bfb      	ldrh	r3, [r7, #30]
 80038ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b2:	d310      	bcc.n	80038d6 <OD_write_1005+0xce>
 80038b4:	8bfb      	ldrh	r3, [r7, #30]
 80038b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038ba:	d80c      	bhi.n	80038d6 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <OD_write_1005+0xd2>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <OD_write_1005+0xd2>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80038d0:	8bfa      	ldrh	r2, [r7, #30]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 80038d6:	230f      	movs	r3, #15
 80038d8:	e052      	b.n	8003980 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80038e0:	8bfa      	ldrh	r2, [r7, #30]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d039      	beq.n	800395a <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80038ee:	8bfa      	ldrh	r2, [r7, #30]
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <OD_write_1005+0x184>)
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003900:	f002 fa9a 	bl	8005e38 <CO_CANrxBufferInit>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8003908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8003910:	2309      	movs	r3, #9
 8003912:	e035      	b.n	8003980 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <OD_write_1005+0x122>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <OD_write_1005+0x124>
 800392a:	2300      	movs	r3, #0
 800392c:	8bfa      	ldrh	r2, [r7, #30]
 800392e:	2400      	movs	r4, #0
 8003930:	9401      	str	r4, [sp, #4]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	f002 fadd 	bl	8005ef4 <CO_CANtxBufferInit>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 800394e:	2309      	movs	r3, #9
 8003950:	e016      	b.n	8003980 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	8bfa      	ldrh	r2, [r7, #30]
 8003956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	2200      	movs	r2, #0
 800396a:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7fd fffe 	bl	800197a <OD_writeOriginal>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	372c      	adds	r7, #44	; 0x2c
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}
 8003988:	bffff800 	.word	0xbffff800
 800398c:	0800377b 	.word	0x0800377b

08003990 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <OD_write_1019+0x2e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	7d1b      	ldrb	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <OD_write_1019+0x2e>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <OD_write_1019+0x2e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 80039be:	2309      	movs	r3, #9
 80039c0:	e040      	b.n	8003a44 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f7ff fe39 	bl	8003640 <CO_getUint8>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <OD_write_1019+0x4e>
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	2bf0      	cmp	r3, #240	; 0xf0
 80039dc:	d901      	bls.n	80039e2 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80039de:	230f      	movs	r3, #15
 80039e0:	e030      	b.n	8003a44 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80039ec:	2317      	movs	r3, #23
 80039ee:	e029      	b.n	8003a44 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <OD_write_1019+0x7a>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <OD_write_1019+0x7c>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2400      	movs	r4, #0
 8003a0e:	9401      	str	r4, [sp, #4]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	f002 fa6e 	bl	8005ef4 <CO_CANtxBufferInit>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	62da      	str	r2, [r3, #44]	; 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8003a2c:	2309      	movs	r3, #9
 8003a2e:	e009      	b.n	8003a44 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	7cfa      	ldrb	r2, [r7, #19]
 8003a34:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7fd ff9c 	bl	800197a <OD_writeOriginal>
 8003a42:	4603      	mov	r3, r0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd90      	pop	{r4, r7, pc}

08003a4c <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	; 0x30
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <CO_SYNC_init+0x32>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <CO_SYNC_init+0x32>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <CO_SYNC_init+0x32>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e0fd      	b.n	8003c80 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8003a84:	225c      	movs	r2, #92	; 0x5c
 8003a86:	2100      	movs	r1, #0
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f006 fdbd 	bl	800a608 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8003a92:	f107 0218 	add.w	r2, r7, #24
 8003a96:	2301      	movs	r3, #1
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe26 	bl	80036ec <OD_get_u32>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8003aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00c      	beq.n	8003ac6 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8003aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fde0 	bl	8003678 <OD_getIndex>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003ac0:	f06f 030b 	mvn.w	r3, #11
 8003ac4:	e0dc      	b.n	8003c80 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <CO_SYNC_init+0x23c>)
 8003ad0:	63da      	str	r2, [r3, #60]	; 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a6d      	ldr	r2, [pc, #436]	; (8003c8c <CO_SYNC_init+0x240>)
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3338      	adds	r3, #56	; 0x38
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fddb 	bl	800369a <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	2100      	movs	r1, #0
 8003aea:	6838      	ldr	r0, [r7, #0]
 8003aec:	f7fe f9ba 	bl	8001e64 <OD_getPtr>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 8003afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8003b04:	6838      	ldr	r0, [r7, #0]
 8003b06:	f7ff fdb7 	bl	8003678 <OD_getIndex>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003b12:	f06f 030b 	mvn.w	r3, #11
 8003b16:	e0b3      	b.n	8003c80 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b20:	f7fe f9a0 	bl	8001e64 <OD_getPtr>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d010      	beq.n	8003b52 <CO_SYNC_init+0x106>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10c      	bne.n	8003b52 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8003b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8003b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b40:	f7ff fd9a 	bl	8003678 <OD_getIndex>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003b4c:	f06f 030b 	mvn.w	r3, #11
 8003b50:	e096      	b.n	8003c80 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d033      	beq.n	8003bc4 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8003b5c:	f107 0217 	add.w	r2, r7, #23
 8003b60:	2301      	movs	r3, #1
 8003b62:	2100      	movs	r1, #0
 8003b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b66:	f7ff fdac 	bl	80036c2 <OD_get_u8>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8003b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d006      	beq.n	8003b8a <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8003b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b7e:	f7ff fd7b 	bl	8003678 <OD_getIndex>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b88:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8003b8a:	f06f 030b 	mvn.w	r3, #11
 8003b8e:	e077      	b.n	8003c80 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8003b96:	2302      	movs	r3, #2
 8003b98:	75fb      	strb	r3, [r7, #23]
 8003b9a:	e004      	b.n	8003ba6 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2bf0      	cmp	r3, #240	; 0xf0
 8003ba0:	d901      	bls.n	8003ba6 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8003ba2:	23f0      	movs	r3, #240	; 0xf0
 8003ba4:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	64da      	str	r2, [r3, #76]	; 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a36      	ldr	r2, [pc, #216]	; (8003c88 <CO_SYNC_init+0x23c>)
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a36      	ldr	r2, [pc, #216]	; (8003c90 <CO_SYNC_init+0x244>)
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	334c      	adds	r3, #76	; 0x4c
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bc0:	f7ff fd6b 	bl	800369a <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8003bc4:	7dfa      	ldrb	r2, [r7, #23]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevTx = CANdevTx;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SYNC->CANdevRx = CANdevRx;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c06:	869a      	strh	r2, [r3, #52]	; 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003c0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <CO_SYNC_init+0x248>)
 8003c1e:	9302      	str	r3, [sp, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	2300      	movs	r3, #0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2e:	f002 f903 	bl	8005e38 <CO_CANrxBufferInit>
 8003c32:	4603      	mov	r3, r0
 8003c34:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 8003c36:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <CO_SYNC_init+0x1f8>
        return ret;
 8003c3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003c42:	e01d      	b.n	8003c80 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c4c:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <CO_SYNC_init+0x20c>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <CO_SYNC_init+0x20e>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	9001      	str	r0, [sp, #4]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c66:	f002 f945 	bl	8005ef4 <CO_CANtxBufferInit>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	e000      	b.n	8003c80 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	080018cb 	.word	0x080018cb
 8003c8c:	08003809 	.word	0x08003809
 8003c90:	08003991 	.word	0x08003991
 8003c94:	0800377b 	.word	0x0800377b

08003c98 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8088 	beq.w	8003dc2 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d902      	bls.n	8003ccc <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <CO_SYNC_process+0x5c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	e000      	b.n	8003cf6 <CO_SYNC_process+0x5e>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d031      	beq.n	8003d62 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d828      	bhi.n	8003d62 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fcfe 	bl	8003716 <CO_SYNCsend>
 8003d1a:	e022      	b.n	8003d62 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	7c1b      	ldrb	r3, [r3, #16]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d11e      	bne.n	8003d62 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d202      	bcs.n	8003d3c <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d20d      	bcs.n	8003d62 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003d54:	2218      	movs	r2, #24
 8003d56:	2101      	movs	r1, #1
 8003d58:	f7fc ff7d 	bl	8000c56 <CO_error>
                        SYNC->timeoutError = 2;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <CO_SYNC_process+0xfe>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <CO_SYNC_process+0xfe>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d909      	bls.n	8003d96 <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	615a      	str	r2, [r3, #20]
 8003d94:	e002      	b.n	8003d9c <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	7a1b      	ldrb	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01a      	beq.n	8003dda <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	7a1b      	ldrb	r3, [r3, #8]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	f248 2340 	movw	r3, #33344	; 0x8240
 8003db2:	2219      	movs	r2, #25
 8003db4:	2101      	movs	r1, #1
 8003db6:	f7fc ff4e 	bl	8000c56 <CO_error>
            SYNC->receiveError = 0;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	721a      	strb	r2, [r3, #8]
 8003dc0:	e00b      	b.n	8003dda <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10f      	bne.n	8003e00 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	7c1b      	ldrb	r3, [r3, #16]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d108      	bne.n	8003dfa <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2300      	movs	r3, #0
 8003df2:	2218      	movs	r2, #24
 8003df4:	2100      	movs	r1, #0
 8003df6:	f7fc ff2e 	bl	8000c56 <CO_error>
        }
        SYNC->timeoutError = 1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <CO_getUint16>:
CO_getUint16(const void* buf) {
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8003e18:	81fb      	strh	r3, [r7, #14]
    return value;
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003e34:	60fb      	str	r3, [r7, #12]
    return value;
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <OD_getIndex+0x14>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	e000      	b.n	8003e5a <OD_getIndex+0x16>
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8003e76:	2305      	movs	r3, #5
 8003e78:	e003      	b.n	8003e82 <OD_extension_init+0x1c>
    entry->extension = extension;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af02      	add	r7, sp, #8
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003e9e:	7af9      	ldrb	r1, [r7, #11]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7fd ff61 	bl	8001d70 <OD_get_value>
 8003eae:	4603      	mov	r3, r0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	791b      	ldrb	r3, [r3, #4]
 8003eca:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	3305      	adds	r3, #5
 8003ed0:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d108      	bne.n	8003eea <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2206      	movs	r2, #6
 8003edc:	68f9      	ldr	r1, [r7, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f006 fb6a 	bl	800a5b8 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00c      	beq.n	8003f22 <OD_write_1012+0x2e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	7d1b      	ldrb	r3, [r3, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <OD_write_1012+0x2e>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <OD_write_1012+0x2e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d102      	bne.n	8003f22 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8003f22:	2309      	movs	r3, #9
 8003f24:	e051      	b.n	8003fca <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8003f2c:	68b8      	ldr	r0, [r7, #8]
 8003f2e:	f7ff ff7b 	bl	8003e28 <CO_getUint32>
 8003f32:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3c:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <OD_write_1012+0xe0>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d126      	bne.n	8003f96 <OD_write_1012+0xa2>
 8003f48:	8afb      	ldrh	r3, [r7, #22]
 8003f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4c:	d923      	bls.n	8003f96 <OD_write_1012+0xa2>
 8003f4e:	8afb      	ldrh	r3, [r7, #22]
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f54:	d903      	bls.n	8003f5e <OD_write_1012+0x6a>
 8003f56:	8afb      	ldrh	r3, [r7, #22]
 8003f58:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003f5c:	d91b      	bls.n	8003f96 <OD_write_1012+0xa2>
 8003f5e:	8afb      	ldrh	r3, [r7, #22]
 8003f60:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003f64:	d903      	bls.n	8003f6e <OD_write_1012+0x7a>
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f6c:	d313      	bcc.n	8003f96 <OD_write_1012+0xa2>
 8003f6e:	8afb      	ldrh	r3, [r7, #22]
 8003f70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f74:	d903      	bls.n	8003f7e <OD_write_1012+0x8a>
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003f7c:	d30b      	bcc.n	8003f96 <OD_write_1012+0xa2>
 8003f7e:	8afb      	ldrh	r3, [r7, #22]
 8003f80:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003f84:	d303      	bcc.n	8003f8e <OD_write_1012+0x9a>
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f8c:	d303      	bcc.n	8003f96 <OD_write_1012+0xa2>
 8003f8e:	8afb      	ldrh	r3, [r7, #22]
 8003f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f94:	d901      	bls.n	8003f9a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8003f96:	230f      	movs	r3, #15
 8003f98:	e017      	b.n	8003fca <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	0fdb      	lsrs	r3, r3, #31
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7fd fcd9 	bl	800197a <OD_writeOriginal>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	3ffff800 	.word	0x3ffff800

08003fd8 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <CO_TIME_init+0x20>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <CO_TIME_init+0x20>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	e061      	b.n	80040c2 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8003ffe:	222c      	movs	r2, #44	; 0x2c
 8004000:	2100      	movs	r1, #0
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f006 fb00 	bl	800a608 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8004008:	f107 0214 	add.w	r2, r7, #20
 800400c:	2301      	movs	r3, #1
 800400e:	2100      	movs	r1, #0
 8004010:	68b8      	ldr	r0, [r7, #8]
 8004012:	f7ff ff3c 	bl	8003e8e <OD_get_u32>
 8004016:	4603      	mov	r3, r0
 8004018:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800401a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8004028:	68b8      	ldr	r0, [r7, #8]
 800402a:	f7ff ff0b 	bl	8003e44 <OD_getIndex>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004036:	f06f 030b 	mvn.w	r3, #11
 800403a:	e042      	b.n	80040c2 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a21      	ldr	r2, [pc, #132]	; (80040cc <CO_TIME_init+0xf4>)
 8004046:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <CO_TIME_init+0xf8>)
 800404c:	625a      	str	r2, [r3, #36]	; 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	331c      	adds	r3, #28
 8004052:	4619      	mov	r1, r3
 8004054:	68b8      	ldr	r0, [r7, #8]
 8004056:	f7ff ff06 	bl	8003e66 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	b29b      	uxth	r3, r3
 800405e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004062:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	0fdb      	lsrs	r3, r3, #31
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8004094:	8bba      	ldrh	r2, [r7, #28]
 8004096:	8879      	ldrh	r1, [r7, #2]
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <CO_TIME_init+0xfc>)
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	2300      	movs	r3, #0
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f001 fec5 	bl	8005e38 <CO_CANrxBufferInit>
 80040ae:	4603      	mov	r3, r0
 80040b0:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 80040b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <CO_TIME_init+0xe8>
            return ret;
 80040ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80040be:	e000      	b.n	80040c2 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	080018cb 	.word	0x080018cb
 80040d0:	08003ef5 	.word	0x08003ef5
 80040d4:	08003eb9 	.word	0x08003eb9

080040d8 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d024      	beq.n	8004138 <CO_TIME_process+0x60>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01f      	beq.n	800413e <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fe91 	bl	8003e28 <CO_getUint32>
 8004106:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3304      	adds	r3, #4
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fe7c 	bl	8003e0a <CO_getUint16>
 8004112:	4603      	mov	r3, r0
 8004114:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8bfa      	ldrh	r2, [r7, #30]
 8004124:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 800412c:	2301      	movs	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8004136:	e002      	b.n	800413e <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d132      	bne.n	80041ae <CO_TIME_process+0xd6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d02f      	beq.n	80041ae <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	89db      	ldrh	r3, [r3, #14]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <CO_TIME_process+0xe0>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <CO_TIME_process+0xe0>)
 800416a:	fba3 1302 	umull	r1, r3, r3, r2
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <CO_TIME_process+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d90b      	bls.n	80041ae <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <CO_TIME_process+0xe8>)
 800419c:	4413      	add	r3, r2
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	899b      	ldrh	r3, [r3, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	10624dd3 	.word	0x10624dd3
 80041bc:	05265bff 	.word	0x05265bff
 80041c0:	fad9a400 	.word	0xfad9a400

080041c4 <CO_fifo_init>:
#error CO_CONFIG_CRC16_ENABLE must be enabled.
#endif
#endif

void
CO_fifo_init(CO_fifo_t* fifo, uint8_t* buf, size_t bufSize) {
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

    if ((fifo == NULL) || (buf == NULL) || (bufSize < 2U)) {
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <CO_fifo_init+0x38>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <CO_fifo_init+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d90c      	bls.n	80041fc <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]

    return;
 80041fa:	e000      	b.n	80041fe <CO_fifo_init+0x3a>
        return;
 80041fc:	bf00      	nop
}
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	e006      	b.n	800422e <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8004220:	220c      	movs	r2, #12
 8004222:	2100      	movs	r1, #0
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f006 f9ef 	bl	800a608 <memset>

    return ret;
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8004260:	e100      	b.n	8004464 <CO_LEDs_process+0x22c>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	7a5b      	ldrb	r3, [r3, #9]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	613b      	str	r3, [r7, #16]

        tick = true;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8004282:	3b50      	subs	r3, #80	; 0x50
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	791b      	ldrb	r3, [r3, #4]
 800428c:	3301      	adds	r3, #1
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	711a      	strb	r2, [r3, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	791b      	ldrb	r3, [r3, #4]
 8004298:	2b03      	cmp	r3, #3
 800429a:	f240 80cb 	bls.w	8004434 <CO_LEDs_process+0x1fc>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	711a      	strb	r2, [r3, #4]
            rd = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	7a5b      	ldrb	r3, [r3, #9]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e003      	b.n	80042ca <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 80042c2:	7fbb      	ldrb	r3, [r7, #30]
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	795b      	ldrb	r3, [r3, #5]
 80042ce:	3301      	adds	r3, #1
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	715a      	strb	r2, [r3, #5]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	795b      	ldrb	r3, [r3, #5]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d010      	beq.n	8004300 <CO_LEDs_process+0xc8>
 80042de:	2b06      	cmp	r3, #6
 80042e0:	dc12      	bgt.n	8004308 <CO_LEDs_process+0xd0>
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d002      	beq.n	80042ec <CO_LEDs_process+0xb4>
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d005      	beq.n	80042f6 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 80042ea:	e00d      	b.n	8004308 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e009      	b.n	800430a <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 80042f6:	7fbb      	ldrb	r3, [r7, #30]
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	77bb      	strb	r3, [r7, #30]
 80042fe:	e004      	b.n	800430a <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	715a      	strb	r2, [r3, #5]
 8004306:	e000      	b.n	800430a <CO_LEDs_process+0xd2>
                default: /* none */ break;
 8004308:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	799b      	ldrb	r3, [r3, #6]
 800430e:	3301      	adds	r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	719a      	strb	r2, [r3, #6]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	799b      	ldrb	r3, [r3, #6]
 800431a:	3b01      	subs	r3, #1
 800431c:	2b07      	cmp	r3, #7
 800431e:	d821      	bhi.n	8004364 <CO_LEDs_process+0x12c>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <CO_LEDs_process+0xf0>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004349 	.word	0x08004349
 800432c:	08004353 	.word	0x08004353
 8004330:	08004349 	.word	0x08004349
 8004334:	08004353 	.word	0x08004353
 8004338:	08004365 	.word	0x08004365
 800433c:	08004365 	.word	0x08004365
 8004340:	08004365 	.word	0x08004365
 8004344:	0800435d 	.word	0x0800435d
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8004348:	7ffb      	ldrb	r3, [r7, #31]
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e009      	b.n	8004366 <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8004352:	7fbb      	ldrb	r3, [r7, #30]
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	77bb      	strb	r3, [r7, #30]
 800435a:	e004      	b.n	8004366 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	719a      	strb	r2, [r3, #6]
 8004362:	e000      	b.n	8004366 <CO_LEDs_process+0x12e>
                default: /* none */ break;
 8004364:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	79db      	ldrb	r3, [r3, #7]
 800436a:	3301      	adds	r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	71da      	strb	r2, [r3, #7]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	79db      	ldrb	r3, [r3, #7]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b09      	cmp	r3, #9
 800437a:	d825      	bhi.n	80043c8 <CO_LEDs_process+0x190>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <CO_LEDs_process+0x14c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043b7 	.word	0x080043b7
 800438c:	080043ad 	.word	0x080043ad
 8004390:	080043b7 	.word	0x080043b7
 8004394:	080043ad 	.word	0x080043ad
 8004398:	080043b7 	.word	0x080043b7
 800439c:	080043c9 	.word	0x080043c9
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043c1 	.word	0x080043c1
                case 1:
                case 3:
                case 5: rd |= CO_LED_flash_3; break;
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
 80043ae:	f043 0310 	orr.w	r3, r3, #16
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e009      	b.n	80043ca <CO_LEDs_process+0x192>
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
 80043b6:	7fbb      	ldrb	r3, [r7, #30]
 80043b8:	f043 0310 	orr.w	r3, r3, #16
 80043bc:	77bb      	strb	r3, [r7, #30]
 80043be:	e004      	b.n	80043ca <CO_LEDs_process+0x192>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	71da      	strb	r2, [r3, #7]
 80043c6:	e000      	b.n	80043ca <CO_LEDs_process+0x192>
                default: /* none */ break;
 80043c8:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	7a1b      	ldrb	r3, [r3, #8]
 80043ce:	3301      	adds	r3, #1
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	721a      	strb	r2, [r3, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	7a1b      	ldrb	r3, [r3, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	2b0b      	cmp	r3, #11
 80043de:	d834      	bhi.n	800444a <CO_LEDs_process+0x212>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <CO_LEDs_process+0x1b0>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	08004419 	.word	0x08004419
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004419 	.word	0x08004419
 80043f4:	08004423 	.word	0x08004423
 80043f8:	08004419 	.word	0x08004419
 80043fc:	08004423 	.word	0x08004423
 8004400:	08004419 	.word	0x08004419
 8004404:	08004423 	.word	0x08004423
 8004408:	0800444b 	.word	0x0800444b
 800440c:	0800444b 	.word	0x0800444b
 8004410:	0800444b 	.word	0x0800444b
 8004414:	0800442d 	.word	0x0800442d
                case 1:
                case 3:
                case 5:
                case 7: rd |= CO_LED_flash_4; break;
 8004418:	7ffb      	ldrb	r3, [r7, #31]
 800441a:	f043 0320 	orr.w	r3, r3, #32
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e014      	b.n	800444c <CO_LEDs_process+0x214>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
 8004422:	7fbb      	ldrb	r3, [r7, #30]
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	77bb      	strb	r3, [r7, #30]
 800442a:	e00f      	b.n	800444c <CO_LEDs_process+0x214>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	721a      	strb	r2, [r3, #8]
 8004432:	e00b      	b.n	800444c <CO_LEDs_process+0x214>
                default: /* none */ break;
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	7a5b      	ldrb	r3, [r3, #9]
 8004438:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800443c:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	7a9b      	ldrb	r3, [r3, #10]
 8004442:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004446:	77bb      	strb	r3, [r7, #30]
 8004448:	e000      	b.n	800444c <CO_LEDs_process+0x214>
                default: /* none */ break;
 800444a:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <CO_LEDs_process+0x224>
            rd |= CO_LED_flicker;
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e003      	b.n	8004464 <CO_LEDs_process+0x22c>
        } else {
            gr |= CO_LED_flicker;
 800445c:	7fbb      	ldrb	r3, [r7, #30]
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800446c:	4293      	cmp	r3, r2
 800446e:	f63f aef8 	bhi.w	8004262 <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d077      	beq.n	8004568 <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <CO_LEDs_process+0x24c>
            rd_co = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
 8004482:	e032      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8004484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <CO_LEDs_process+0x25e>
            rd_co = rd & CO_LED_flicker;
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
 8004494:	e029      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else if (ErrRpdo) {
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <CO_LEDs_process+0x26e>
            rd_co = rd & CO_LED_flash_4;
 800449c:	7ffb      	ldrb	r3, [r7, #31]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	75fb      	strb	r3, [r7, #23]
 80044a4:	e021      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else if (ErrSync) {
 80044a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <CO_LEDs_process+0x27e>
            rd_co = rd & CO_LED_flash_3;
 80044ac:	7ffb      	ldrb	r3, [r7, #31]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	75fb      	strb	r3, [r7, #23]
 80044b4:	e019      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else if (ErrHbCons) {
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <CO_LEDs_process+0x28e>
            rd_co = rd & CO_LED_flash_2;
 80044bc:	7ffb      	ldrb	r3, [r7, #31]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	75fb      	strb	r3, [r7, #23]
 80044c4:	e011      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else if (ErrCANbusWarn) {
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <CO_LEDs_process+0x29e>
            rd_co = rd & CO_LED_flash_1;
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	75fb      	strb	r3, [r7, #23]
 80044d4:	e009      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else if (ErrOther) {
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <CO_LEDs_process+0x2ae>
            rd_co = rd & CO_LED_blink;
 80044dc:	7ffb      	ldrb	r3, [r7, #31]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	75fb      	strb	r3, [r7, #23]
 80044e4:	e001      	b.n	80044ea <CO_LEDs_process+0x2b2>
        } else {
            rd_co = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <CO_LEDs_process+0x2c2>
            gr_co = gr & CO_LED_flicker;
 80044f0:	7fbb      	ldrb	r3, [r7, #30]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	75bb      	strb	r3, [r7, #22]
 80044f8:	e022      	b.n	8004540 <CO_LEDs_process+0x308>
        } else if (firmwareDownload) {
 80044fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <CO_LEDs_process+0x2d2>
            gr_co = gr & CO_LED_flash_3;
 8004500:	7fbb      	ldrb	r3, [r7, #30]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	75bb      	strb	r3, [r7, #22]
 8004508:	e01a      	b.n	8004540 <CO_LEDs_process+0x308>
        } else if (NMTstate == CO_NMT_STOPPED) {
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d104      	bne.n	800451c <CO_LEDs_process+0x2e4>
            gr_co = gr & CO_LED_flash_1;
 8004512:	7fbb      	ldrb	r3, [r7, #30]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	75bb      	strb	r3, [r7, #22]
 800451a:	e011      	b.n	8004540 <CO_LEDs_process+0x308>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b7f      	cmp	r3, #127	; 0x7f
 8004522:	d104      	bne.n	800452e <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_blink;
 8004524:	7fbb      	ldrb	r3, [r7, #30]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	75bb      	strb	r3, [r7, #22]
 800452c:	e008      	b.n	8004540 <CO_LEDs_process+0x308>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	2b05      	cmp	r3, #5
 8004534:	d102      	bne.n	800453c <CO_LEDs_process+0x304>
            gr_co = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	75bb      	strb	r3, [r7, #22]
 800453a:	e001      	b.n	8004540 <CO_LEDs_process+0x308>
        } else {
            gr_co = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <CO_LEDs_process+0x316>
            rd |= CO_LED_CANopen;
 8004546:	7ffb      	ldrb	r3, [r7, #31]
 8004548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800454c:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 800454e:	7dbb      	ldrb	r3, [r7, #22]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <CO_LEDs_process+0x324>
            gr |= CO_LED_CANopen;
 8004554:	7fbb      	ldrb	r3, [r7, #30]
 8004556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800455a:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	7ffa      	ldrb	r2, [r7, #31]
 8004560:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	7fba      	ldrb	r2, [r7, #30]
 8004566:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8004568:	bf00      	nop
 800456a:	3724      	adds	r7, #36	; 0x24
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b090      	sub	sp, #64	; 0x40
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	791b      	ldrb	r3, [r3, #4]
 8004586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800458a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800458e:	2b08      	cmp	r3, #8
 8004590:	f040 814c 	bne.w	800482c <CO_LSSslave_receive+0x2b8>
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 8147 	bne.w	800482c <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 800459e:	2300      	movs	r3, #0
 80045a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	3305      	adds	r3, #5
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t cs = data[0];
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 80045b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d12c      	bne.n	8004612 <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <CO_LSSslave_receive+0x56>
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d020      	beq.n	800460a <CO_LSSslave_receive+0x96>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 80045c8:	e12a      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	7c1b      	ldrb	r3, [r3, #16]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d110      	bne.n	80045f4 <CO_LSSslave_receive+0x80>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d8:	2bff      	cmp	r3, #255	; 0xff
 80045da:	d10b      	bne.n	80045f4 <CO_LSSslave_receive+0x80>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2bff      	cmp	r3, #255	; 0xff
 80045e4:	d006      	beq.n	80045f4 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80045ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80045f0:	2301      	movs	r3, #1
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80045f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f6:	2200      	movs	r2, #0
 80045f8:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	3314      	adds	r3, #20
 80045fe:	2210      	movs	r2, #16
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f006 f800 	bl	800a608 <memset>
                    break;
 8004608:	e10a      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	2201      	movs	r2, #1
 800460e:	741a      	strb	r2, [r3, #16]
 8004610:	e106      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	7c1b      	ldrb	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 80ee 	bne.w	80047f8 <CO_LSSslave_receive+0x284>
            switch (cs) {
 800461c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004620:	3b40      	subs	r3, #64	; 0x40
 8004622:	2b11      	cmp	r3, #17
 8004624:	f200 80f7 	bhi.w	8004816 <CO_LSSslave_receive+0x2a2>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <CO_LSSslave_receive+0xbc>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004679 	.word	0x08004679
 8004634:	08004689 	.word	0x08004689
 8004638:	08004699 	.word	0x08004699
 800463c:	080046a9 	.word	0x080046a9
 8004640:	08004817 	.word	0x08004817
 8004644:	08004817 	.word	0x08004817
 8004648:	08004817 	.word	0x08004817
 800464c:	08004817 	.word	0x08004817
 8004650:	08004817 	.word	0x08004817
 8004654:	08004817 	.word	0x08004817
 8004658:	08004817 	.word	0x08004817
 800465c:	08004817 	.word	0x08004817
 8004660:	08004817 	.word	0x08004817
 8004664:	08004817 	.word	0x08004817
 8004668:	08004817 	.word	0x08004817
 800466c:	08004817 	.word	0x08004817
 8004670:	08004817 	.word	0x08004817
 8004674:	08004705 	.word	0x08004705
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	3301      	adds	r3, #1
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	615a      	str	r2, [r3, #20]
                    break;
 8004686:	e0cb      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	3301      	adds	r3, #1
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	619a      	str	r2, [r3, #24]
                    break;
 8004696:	e0c3      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	3301      	adds	r3, #1
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	61da      	str	r2, [r3, #28]
                    break;
 80046a6:	e0bb      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	3301      	adds	r3, #1
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	f040 80ab 	bne.w	800481a <CO_LSSslave_receive+0x2a6>
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	f040 80a4 	bne.w	800481a <CO_LSSslave_receive+0x2a6>
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	429a      	cmp	r2, r3
 80046dc:	f040 809d 	bne.w	800481a <CO_LSSslave_receive+0x2a6>
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	f040 8096 	bne.w	800481a <CO_LSSslave_receive+0x2a6>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f0:	2201      	movs	r2, #1
 80046f2:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 80046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80046fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80046fe:	2301      	movs	r3, #1
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    break;
 8004702:	e08a      	b.n	800481a <CO_LSSslave_receive+0x2a6>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2bff      	cmp	r3, #255	; 0xff
 800470c:	f040 8087 	bne.w	800481e <CO_LSSslave_receive+0x2aa>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	2bff      	cmp	r3, #255	; 0xff
 8004718:	f040 8081 	bne.w	800481e <CO_LSSslave_receive+0x2aa>
                        uint8_t bitCheck = data[5];
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	795b      	ldrb	r3, [r3, #5]
 8004720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        uint8_t lssSub = data[6];
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	799b      	ldrb	r3, [r3, #6]
 8004728:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                        uint8_t lssNext = data[7];
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	79db      	ldrb	r3, [r3, #7]
 8004730:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 8004734:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004738:	2b1f      	cmp	r3, #31
 800473a:	d903      	bls.n	8004744 <CO_LSSslave_receive+0x1d0>
 800473c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d16d      	bne.n	8004820 <CO_LSSslave_receive+0x2ac>
 8004744:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004748:	2b03      	cmp	r3, #3
 800474a:	d869      	bhi.n	8004820 <CO_LSSslave_receive+0x2ac>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 800474c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004750:	2b03      	cmp	r3, #3
 8004752:	d865      	bhi.n	8004820 <CO_LSSslave_receive+0x2ac>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	3301      	adds	r3, #1
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
                        ack = false;
 8004760:	2300      	movs	r3, #0
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8004764:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d10d      	bne.n	8004788 <CO_LSSslave_receive+0x214>
                            /* Confirm, Reset */
                            ack = true;
 800476c:	2301      	movs	r3, #1
 800476e:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	2210      	movs	r2, #16
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f005 ff41 	bl	800a608 <memset>
 8004786:	e02c      	b.n	80047e2 <CO_LSSslave_receive+0x26e>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800478e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004792:	429a      	cmp	r2, r3
 8004794:	d125      	bne.n	80047e2 <CO_LSSslave_receive+0x26e>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8004796:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 80047a4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	405a      	eors	r2, r3
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <CO_LSSslave_receive+0x26e>
                                /* all requested bits match */
                                ack = true;
 80047ba:	2301      	movs	r3, #1
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38
                                LSSslave->fastscanPos = lssNext;
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80047c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 80047c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <CO_LSSslave_receive+0x26e>
 80047d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80047d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80047d8:	429a      	cmp	r2, r3
 80047da:	d202      	bcs.n	80047e2 <CO_LSSslave_receive+0x26e>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	2201      	movs	r2, #1
 80047e0:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01a      	beq.n	800481e <CO_LSSslave_receive+0x2aa>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80047ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            request_LSSslave_process = true;
 80047f2:	2301      	movs	r3, #1
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                        }
                    }
                    break;
 80047f6:	e012      	b.n	800481e <CO_LSSslave_receive+0x2aa>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	3349      	adds	r3, #73	; 0x49
 80047fc:	2208      	movs	r2, #8
 80047fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004800:	4618      	mov	r0, r3
 8004802:	f005 fed9 	bl	800a5b8 <memcpy>
            LSSslave->service = cs;
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800480c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8004810:	2301      	movs	r3, #1
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004814:	e004      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                    break;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                    break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <CO_LSSslave_receive+0x2ac>
                    break;
 800481e:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	2201      	movs	r2, #1
 800482a:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 800482c:	bf00      	nop
 800482e:	3740      	adds	r7, #64	; 0x40
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af04      	add	r7, sp, #16
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004842:	2300      	movs	r3, #0
 8004844:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d018      	beq.n	800487e <CO_LSSslave_init+0x4a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <CO_LSSslave_init+0x4a>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d012      	beq.n	800487e <CO_LSSslave_init+0x4a>
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00f      	beq.n	800487e <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <CO_LSSslave_init+0x4a>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <CO_LSSslave_init+0x42>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	b25b      	sxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	da06      	bge.n	8004884 <CO_LSSslave_init+0x50>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2bff      	cmp	r3, #255	; 0xff
 800487c:	d002      	beq.n	8004884 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	e046      	b.n	8004912 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8004884:	2274      	movs	r2, #116	; 0x74
 8004886:	2100      	movs	r1, #0
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f005 febd 	bl	800a608 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2210      	movs	r2, #16
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f005 fe8f 	bl	800a5b8 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 80048c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80048c6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <CO_LSSslave_init+0xe8>)
 80048ca:	9302      	str	r3, [sp, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	2300      	movs	r3, #0
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80048d8:	6a38      	ldr	r0, [r7, #32]
 80048da:	f001 faad 	bl	8005e38 <CO_CANrxBufferInit>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e6:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 80048e8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048ea:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80048ec:	2300      	movs	r3, #0
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2308      	movs	r3, #8
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048f8:	f001 fafc 	bl	8005ef4 <CO_CANtxBufferInit>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	671a      	str	r2, [r3, #112]	; 0x70

    if (LSSslave->TXbuff == NULL) {
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800490a:	23ff      	movs	r3, #255	; 0xff
 800490c:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800490e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	08004575 	.word	0x08004575

08004920 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8203 	beq.w	8004d3c <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	3305      	adds	r3, #5
 8004940:	2208      	movs	r2, #8
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f005 fe5f 	bl	800a608 <memset>

        switch (LSSslave->service) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004950:	3b04      	subs	r3, #4
 8004952:	2b5a      	cmp	r3, #90	; 0x5a
 8004954:	f200 81dd 	bhi.w	8004d12 <CO_LSSslave_process+0x3f2>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <CO_LSSslave_process+0x40>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004acd 	.word	0x08004acd
 8004964:	08004d13 	.word	0x08004d13
 8004968:	08004d13 	.word	0x08004d13
 800496c:	08004d13 	.word	0x08004d13
 8004970:	08004d13 	.word	0x08004d13
 8004974:	08004d13 	.word	0x08004d13
 8004978:	08004d13 	.word	0x08004d13
 800497c:	08004d13 	.word	0x08004d13
 8004980:	08004d13 	.word	0x08004d13
 8004984:	08004d13 	.word	0x08004d13
 8004988:	08004d13 	.word	0x08004d13
 800498c:	08004d13 	.word	0x08004d13
 8004990:	08004d13 	.word	0x08004d13
 8004994:	08004ae1 	.word	0x08004ae1
 8004998:	08004d13 	.word	0x08004d13
 800499c:	08004b2f 	.word	0x08004b2f
 80049a0:	08004d13 	.word	0x08004d13
 80049a4:	08004bcb 	.word	0x08004bcb
 80049a8:	08004d13 	.word	0x08004d13
 80049ac:	08004c09 	.word	0x08004c09
 80049b0:	08004d13 	.word	0x08004d13
 80049b4:	08004d13 	.word	0x08004d13
 80049b8:	08004d13 	.word	0x08004d13
 80049bc:	08004d13 	.word	0x08004d13
 80049c0:	08004d13 	.word	0x08004d13
 80049c4:	08004d13 	.word	0x08004d13
 80049c8:	08004d13 	.word	0x08004d13
 80049cc:	08004d13 	.word	0x08004d13
 80049d0:	08004d13 	.word	0x08004d13
 80049d4:	08004d13 	.word	0x08004d13
 80049d8:	08004d13 	.word	0x08004d13
 80049dc:	08004d13 	.word	0x08004d13
 80049e0:	08004d13 	.word	0x08004d13
 80049e4:	08004d13 	.word	0x08004d13
 80049e8:	08004d13 	.word	0x08004d13
 80049ec:	08004d13 	.word	0x08004d13
 80049f0:	08004d13 	.word	0x08004d13
 80049f4:	08004d13 	.word	0x08004d13
 80049f8:	08004d13 	.word	0x08004d13
 80049fc:	08004d13 	.word	0x08004d13
 8004a00:	08004d13 	.word	0x08004d13
 8004a04:	08004d13 	.word	0x08004d13
 8004a08:	08004d13 	.word	0x08004d13
 8004a0c:	08004d13 	.word	0x08004d13
 8004a10:	08004d13 	.word	0x08004d13
 8004a14:	08004d13 	.word	0x08004d13
 8004a18:	08004d13 	.word	0x08004d13
 8004a1c:	08004d13 	.word	0x08004d13
 8004a20:	08004d13 	.word	0x08004d13
 8004a24:	08004d13 	.word	0x08004d13
 8004a28:	08004d13 	.word	0x08004d13
 8004a2c:	08004d13 	.word	0x08004d13
 8004a30:	08004d13 	.word	0x08004d13
 8004a34:	08004d13 	.word	0x08004d13
 8004a38:	08004d13 	.word	0x08004d13
 8004a3c:	08004d13 	.word	0x08004d13
 8004a40:	08004d13 	.word	0x08004d13
 8004a44:	08004d13 	.word	0x08004d13
 8004a48:	08004d13 	.word	0x08004d13
 8004a4c:	08004d13 	.word	0x08004d13
 8004a50:	08004d13 	.word	0x08004d13
 8004a54:	08004d13 	.word	0x08004d13
 8004a58:	08004d13 	.word	0x08004d13
 8004a5c:	08004ad3 	.word	0x08004ad3
 8004a60:	08004d13 	.word	0x08004d13
 8004a64:	08004d13 	.word	0x08004d13
 8004a68:	08004d13 	.word	0x08004d13
 8004a6c:	08004d13 	.word	0x08004d13
 8004a70:	08004d13 	.word	0x08004d13
 8004a74:	08004d13 	.word	0x08004d13
 8004a78:	08004d13 	.word	0x08004d13
 8004a7c:	08004d13 	.word	0x08004d13
 8004a80:	08004d13 	.word	0x08004d13
 8004a84:	08004d13 	.word	0x08004d13
 8004a88:	08004d13 	.word	0x08004d13
 8004a8c:	08004d13 	.word	0x08004d13
 8004a90:	08004d13 	.word	0x08004d13
 8004a94:	08004d05 	.word	0x08004d05
 8004a98:	08004d13 	.word	0x08004d13
 8004a9c:	08004d13 	.word	0x08004d13
 8004aa0:	08004d13 	.word	0x08004d13
 8004aa4:	08004d13 	.word	0x08004d13
 8004aa8:	08004d13 	.word	0x08004d13
 8004aac:	08004d13 	.word	0x08004d13
 8004ab0:	08004d13 	.word	0x08004d13
 8004ab4:	08004d13 	.word	0x08004d13
 8004ab8:	08004c5f 	.word	0x08004c5f
 8004abc:	08004c81 	.word	0x08004c81
 8004ac0:	08004ca3 	.word	0x08004ca3
 8004ac4:	08004cc5 	.word	0x08004cc5
 8004ac8:	08004ce7 	.word	0x08004ce7
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 8004acc:	2301      	movs	r3, #1
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8004ad0:	e126      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	2244      	movs	r2, #68	; 0x44
 8004ad8:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8004ada:	2301      	movs	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004ade:	e11f      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004ae6:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <CO_LSSslave_process+0x1dc>
 8004af4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	da02      	bge.n	8004b02 <CO_LSSslave_process+0x1e2>
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2bff      	cmp	r3, #255	; 0xff
 8004b00:	d104      	bne.n	8004b0c <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	7cfa      	ldrb	r2, [r7, #19]
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e002      	b.n	8004b12 <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004b1c:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004b26:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004b2c:	e0f8      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80ef 	beq.w	8004d16 <CO_LSSslave_process+0x3f6>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004b3e:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004b46:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004b54:	7f7b      	ldrb	r3, [r7, #29]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d121      	bne.n	8004b9e <CO_LSSslave_process+0x27e>
 8004b5a:	7f3b      	ldrb	r3, [r7, #28]
 8004b5c:	2b05      	cmp	r3, #5
 8004b5e:	d01e      	beq.n	8004b9e <CO_LSSslave_process+0x27e>
 8004b60:	7f3b      	ldrb	r3, [r7, #28]
 8004b62:	2b09      	cmp	r3, #9
 8004b64:	d81b      	bhi.n	8004b9e <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8004b66:	7f3b      	ldrb	r3, [r7, #28]
 8004b68:	4a77      	ldr	r2, [pc, #476]	; (8004d48 <CO_LSSslave_process+0x428>)
 8004b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b6e:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b78:	8b79      	ldrh	r1, [r7, #26]
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4798      	blx	r3
 8004b7e:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	8b7a      	ldrh	r2, [r7, #26]
 8004b8c:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004b8e:	e009      	b.n	8004ba4 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8004b90:	23ff      	movs	r3, #255	; 0xff
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004b9c:	e002      	b.n	8004ba4 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004bae:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004bb8:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004bc2:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004bc8:	e0aa      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a3 	beq.w	8004d1a <CO_LSSslave_process+0x3fa>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80a0 	beq.w	8004d1e <CO_LSSslave_process+0x3fe>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	8bfb      	ldrh	r3, [r7, #30]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004c00:	8bf9      	ldrh	r1, [r7, #30]
 8004c02:	4610      	mov	r0, r2
 8004c04:	4798      	blx	r3
                }
                break;
 8004c06:	e08a      	b.n	8004d1e <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <CO_LSSslave_process+0x2fe>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1c:	e011      	b.n	8004c42 <CO_LSSslave_process+0x322>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c2a:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8004c30:	8812      	ldrh	r2, [r2, #0]
 8004c32:	4798      	blx	r3
 8004c34:	6238      	str	r0, [r7, #32]
                    if (!result) {
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <CO_LSSslave_process+0x322>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c4c:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c56:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004c5c:	e060      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c68:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	3306      	adds	r3, #6
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004c7e:	e04f      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c8a:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	3306      	adds	r3, #6
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004ca0:	e03e      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004cac:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	3306      	adds	r3, #6
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004cc2:	e02d      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004cce:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	3306      	adds	r3, #6
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004ce4:	e01c      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004cf0:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8004cfc:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004d02:	e00d      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	224f      	movs	r2, #79	; 0x4f
 8004d0a:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8004d10:	e006      	b.n	8004d20 <CO_LSSslave_process+0x400>
            }
            default: {
                /* none */
                break;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <CO_LSSslave_process+0x400>
                    break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <CO_LSSslave_process+0x400>
                    break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <CO_LSSslave_process+0x400>
                break;
 8004d1e:	bf00      	nop
            }
        }

        if (CANsend) {
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <CO_LSSslave_process+0x416>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f001 f959 	bl	8005fe8 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3730      	adds	r7, #48	; 0x30
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	0800b98c 	.word	0x0800b98c

08004d4c <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	08db      	lsrs	r3, r3, #3
 8004d5c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	2201      	movs	r2, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	73bb      	strb	r3, [r7, #14]
               : false;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b09      	cmp	r3, #9
 8004d76:	d807      	bhi.n	8004d88 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	5cd2      	ldrb	r2, [r2, r3]
 8004d7e:	7bbb      	ldrb	r3, [r7, #14]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b2db      	uxtb	r3, r3
               : false;
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <CO_isError+0x40>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <CO_isError+0x42>
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <CO_getErrorRegister+0x1e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <CO_getErrorRegister+0x1e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	e000      	b.n	8004dba <CO_getErrorRegister+0x20>
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <CO_NMT_getInternalState+0x16>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8004dda:	e000      	b.n	8004dde <CO_NMT_getInternalState+0x18>
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <CO_LSSslave_getState+0x14>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7c1b      	ldrb	r3, [r3, #16]
 8004dfc:	e000      	b.n	8004e00 <CO_LSSslave_getState+0x16>
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
    uint32_t mem = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8004e22:	2144      	movs	r1, #68	; 0x44
 8004e24:	2001      	movs	r0, #1
 8004e26:	f005 f9bf 	bl	800a1a8 <calloc>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80ee 	beq.w	8005012 <CO_new+0x206>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3344      	adds	r3, #68	; 0x44
 8004e3a:	617b      	str	r3, [r7, #20]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8004e3c:	212c      	movs	r1, #44	; 0x2c
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f005 f9b2 	bl	800a1a8 <calloc>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80e0 	beq.w	8005016 <CO_new+0x20a>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	332c      	adds	r3, #44	; 0x2c
 8004e5a:	617b      	str	r3, [r7, #20]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8004e60:	2130      	movs	r1, #48	; 0x30
 8004e62:	2001      	movs	r0, #1
 8004e64:	f005 f9a0 	bl	800a1a8 <calloc>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	615a      	str	r2, [r3, #20]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80d0 	beq.w	800501a <CO_new+0x20e>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3330      	adds	r3, #48	; 0x30
 8004e7e:	617b      	str	r3, [r7, #20]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8004e80:	7afb      	ldrb	r3, [r7, #11]
 8004e82:	2110      	movs	r1, #16
 8004e84:	4618      	mov	r0, r3
 8004e86:	f005 f98f 	bl	800a1a8 <calloc>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80c1 	beq.w	800501e <CO_new+0x212>
 8004e9c:	7afb      	ldrb	r3, [r7, #11]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8004ea6:	2150      	movs	r1, #80	; 0x50
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f005 f97d 	bl	800a1a8 <calloc>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	61da      	str	r2, [r3, #28]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80b1 	beq.w	8005022 <CO_new+0x216>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3350      	adds	r3, #80	; 0x50
 8004ec4:	617b      	str	r3, [r7, #20]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 8004ec6:	2311      	movs	r3, #17
 8004ec8:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8004eca:	7abb      	ldrb	r3, [r7, #10]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d912      	bls.n	8004ef6 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8004ed0:	7abb      	ldrb	r3, [r7, #10]
 8004ed2:	2108      	movs	r1, #8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f005 f967 	bl	800a1a8 <calloc>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 809d 	beq.w	8005026 <CO_new+0x21a>
 8004eec:	7abb      	ldrb	r3, [r7, #10]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8004ef6:	21ac      	movs	r1, #172	; 0xac
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f005 f955 	bl	800a1a8 <calloc>
 8004efe:	4603      	mov	r3, r0
 8004f00:	461a      	mov	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 808d 	beq.w	800502a <CO_new+0x21e>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	33ac      	adds	r3, #172	; 0xac
 8004f14:	617b      	str	r3, [r7, #20]

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0U) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8004f16:	217c      	movs	r1, #124	; 0x7c
 8004f18:	2001      	movs	r0, #1
 8004f1a:	f005 f945 	bl	800a1a8 <calloc>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d07f      	beq.n	800502e <CO_new+0x222>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	337c      	adds	r3, #124	; 0x7c
 8004f32:	617b      	str	r3, [r7, #20]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8004f34:	212c      	movs	r1, #44	; 0x2c
 8004f36:	2001      	movs	r0, #1
 8004f38:	f005 f936 	bl	800a1a8 <calloc>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d072      	beq.n	8005032 <CO_new+0x226>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	332c      	adds	r3, #44	; 0x2c
 8004f50:	617b      	str	r3, [r7, #20]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8004f52:	215c      	movs	r1, #92	; 0x5c
 8004f54:	2001      	movs	r0, #1
 8004f56:	f005 f927 	bl	800a1a8 <calloc>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d065      	beq.n	8005036 <CO_new+0x22a>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	335c      	adds	r3, #92	; 0x5c
 8004f6e:	617b      	str	r3, [r7, #20]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8004f70:	210c      	movs	r1, #12
 8004f72:	2001      	movs	r0, #1
 8004f74:	f005 f918 	bl	800a1a8 <calloc>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d058      	beq.n	800503a <CO_new+0x22e>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	617b      	str	r3, [r7, #20]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8004f8e:	2174      	movs	r1, #116	; 0x74
 8004f90:	2001      	movs	r0, #1
 8004f92:	f005 f909 	bl	800a1a8 <calloc>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d04b      	beq.n	800503e <CO_new+0x232>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3374      	adds	r3, #116	; 0x74
 8004faa:	617b      	str	r3, [r7, #20]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8004fac:	2138      	movs	r1, #56	; 0x38
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f005 f8fa 	bl	800a1a8 <calloc>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d03e      	beq.n	8005042 <CO_new+0x236>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3338      	adds	r3, #56	; 0x38
 8004fc8:	617b      	str	r3, [r7, #20]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8004fca:	210c      	movs	r1, #12
 8004fcc:	200e      	movs	r0, #14
 8004fce:	f005 f8eb 	bl	800a1a8 <calloc>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d031      	beq.n	8005046 <CO_new+0x23a>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	33a8      	adds	r3, #168	; 0xa8
 8004fe6:	617b      	str	r3, [r7, #20]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8004fe8:	2118      	movs	r1, #24
 8004fea:	2006      	movs	r0, #6
 8004fec:	f005 f8dc 	bl	800a1a8 <calloc>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d024      	beq.n	800504a <CO_new+0x23e>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3390      	adds	r3, #144	; 0x90
 8005004:	617b      	str	r3, [r7, #20]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
        coFinal = co;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e01c      	b.n	800504c <CO_new+0x240>
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8005012:	bf00      	nop
 8005014:	e01a      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005016:	bf00      	nop
 8005018:	e018      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 800501a:	bf00      	nop
 800501c:	e016      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 800501e:	bf00      	nop
 8005020:	e014      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8005022:	bf00      	nop
 8005024:	e012      	b.n	800504c <CO_new+0x240>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005026:	bf00      	nop
 8005028:	e010      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800502a:	bf00      	nop
 800502c:	e00e      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 800502e:	bf00      	nop
 8005030:	e00c      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8005032:	bf00      	nop
 8005034:	e00a      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005036:	bf00      	nop
 8005038:	e008      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800503a:	bf00      	nop
 800503c:	e006      	b.n	800504c <CO_new+0x240>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800503e:	bf00      	nop
 8005040:	e004      	b.n	800504c <CO_new+0x240>
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <CO_new+0x240>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <CO_new+0x240>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 800504a:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <CO_new+0x24c>
        CO_delete(co);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f80b 	bl	800506e <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <CO_new+0x258>
        *heapMemoryUsed = mem;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8005064:	693b      	ldr	r3, [r7, #16]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <CO_delete>:

void
CO_delete(CO_t* co) {
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d058      	beq.n	800512e <CO_delete+0xc0>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fec3 	bl	8005e0c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4618      	mov	r0, r3
 800508c:	f005 fa8c 	bl	800a5a8 <free>
    CO_free(co->CANrx);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4618      	mov	r0, r3
 8005096:	f005 fa87 	bl	800a5a8 <free>
    CO_free(co->CANmodule);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	f005 fa82 	bl	800a5a8 <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	4618      	mov	r0, r3
 80050aa:	f005 fa7d 	bl	800a5a8 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	4618      	mov	r0, r3
 80050b4:	f005 fa78 	bl	800a5a8 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	4618      	mov	r0, r3
 80050be:	f005 fa73 	bl	800a5a8 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	4618      	mov	r0, r3
 80050c8:	f005 fa6e 	bl	800a5a8 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4618      	mov	r0, r3
 80050d2:	f005 fa69 	bl	800a5a8 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4618      	mov	r0, r3
 80050dc:	f005 fa64 	bl	800a5a8 <free>
#endif

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	4618      	mov	r0, r3
 80050e6:	f005 fa5f 	bl	800a5a8 <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 fa5a 	bl	800a5a8 <free>

    /* Emergency */
    CO_free(co->em);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f005 fa55 	bl	800a5a8 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4618      	mov	r0, r3
 8005104:	f005 fa50 	bl	800a5a8 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	4618      	mov	r0, r3
 800510e:	f005 fa4b 	bl	800a5a8 <free>
    CO_free(co->HBcons);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	4618      	mov	r0, r3
 8005118:	f005 fa46 	bl	800a5a8 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	4618      	mov	r0, r3
 8005122:	f005 fa41 	bl	800a5a8 <free>

    /* CANopen object */
    CO_free(co);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f005 fa3e 	bl	800a5a8 <free>
 800512c:	e000      	b.n	8005130 <CO_delete+0xc2>
        return;
 800512e:	bf00      	nop
}
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 8005136:	b580      	push	{r7, lr}
 8005138:	b08a      	sub	sp, #40	; 0x28
 800513a:	af04      	add	r7, sp, #16
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	e01a      	b.n	8005186 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8005158:	68b8      	ldr	r0, [r7, #8]
 800515a:	f000 fd67 	bl	8005c2c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6858      	ldr	r0, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	9202      	str	r2, [sp, #8]
 800516e:	2206      	movs	r2, #6
 8005170:	9201      	str	r2, [sp, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	230e      	movs	r3, #14
 8005176:	460a      	mov	r2, r1
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	f000 fd7f 	bl	8005c7c <CO_CANmodule_init>
 800517e:	4603      	mov	r3, r0
 8005180:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8005182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 800518e:	b580      	push	{r7, lr}
 8005190:	b08c      	sub	sp, #48	; 0x30
 8005192:	af06      	add	r7, sp, #24
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	e01a      	b.n	80051de <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	6852      	ldr	r2, [r2, #4]
 80051b4:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80051b8:	9105      	str	r1, [sp, #20]
 80051ba:	2105      	movs	r1, #5
 80051bc:	9104      	str	r1, [sp, #16]
 80051be:	9203      	str	r2, [sp, #12]
 80051c0:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80051c4:	9202      	str	r2, [sp, #8]
 80051c6:	220d      	movs	r2, #13
 80051c8:	9201      	str	r2, [sp, #4]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	f7ff fb2f 	bl	8004834 <CO_LSSslave_init>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 80051da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 80051e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ea:	b093      	sub	sp, #76	; 0x4c
 80051ec:	af0a      	add	r7, sp, #40	; 0x28
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	e16b      	b.n	80054da <CO_CANopenInit+0x2f2>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <CO_CANopenInit+0x26>
        em = co->em;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005214:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005218:	2bff      	cmp	r3, #255	; 0xff
 800521a:	d103      	bne.n	8005224 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e00a      	b.n	800523a <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8005224:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <CO_CANopenInit+0x4c>
 800522c:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8005230:	2b00      	cmp	r3, #0
 8005232:	da02      	bge.n	800523a <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	e14f      	b.n	80054da <CO_CANopenInit+0x2f2>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe ffe2 	bl	8004208 <CO_LEDs_init>
 8005244:	4603      	mov	r3, r0
 8005246:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 8005248:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <CO_CANopenInit+0x6e>
            return err;
 8005250:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005254:	e141      	b.n	80054da <CO_CANopenInit+0x2f2>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800525e:	f06f 0312 	mvn.w	r3, #18
 8005262:	e13a      	b.n	80054da <CO_CANopenInit+0x2f2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	69d8      	ldr	r0, [r3, #28]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685c      	ldr	r4, [r3, #4]
 800526c:	4b9d      	ldr	r3, [pc, #628]	; (80054e4 <CO_CANopenInit+0x2fc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f103 050c 	add.w	r5, r3, #12
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 800527a:	4b9a      	ldr	r3, [pc, #616]	; (80054e4 <CO_CANopenInit+0x2fc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005280:	336c      	adds	r3, #108	; 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8005282:	4a98      	ldr	r2, [pc, #608]	; (80054e4 <CO_CANopenInit+0x2fc>)
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005288:	3218      	adds	r2, #24
 800528a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 8005292:	9104      	str	r1, [sp, #16]
 8005294:	9203      	str	r2, [sp, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	9202      	str	r2, [sp, #8]
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	2311      	movs	r3, #17
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4633      	mov	r3, r6
 80052a2:	462a      	mov	r2, r5
 80052a4:	4621      	mov	r1, r4
 80052a6:	f7fb faab 	bl	8000800 <CO_EM_init>
 80052aa:	4603      	mov	r3, r0
 80052ac:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 80052ae:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <CO_CANopenInit+0xd4>
            return err;
 80052b6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80052ba:	e10e      	b.n	80054da <CO_CANopenInit+0x2f2>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691c      	ldr	r4, [r3, #16]
 80052c0:	4b88      	ldr	r3, [pc, #544]	; (80054e4 <CO_CANopenInit+0x2fc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f103 0590 	add.w	r5, r3, #144	; 0x90
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 80052d6:	b289      	uxth	r1, r1
 80052d8:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 80052dc:	b289      	uxth	r1, r1
 80052de:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 80052e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80052e4:	9008      	str	r0, [sp, #32]
 80052e6:	9107      	str	r1, [sp, #28]
 80052e8:	2104      	movs	r1, #4
 80052ea:	9106      	str	r1, [sp, #24]
 80052ec:	9205      	str	r2, [sp, #20]
 80052ee:	2200      	movs	r2, #0
 80052f0:	9204      	str	r2, [sp, #16]
 80052f2:	2200      	movs	r2, #0
 80052f4:	9203      	str	r2, [sp, #12]
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4633      	mov	r3, r6
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4629      	mov	r1, r5
 8005308:	4620      	mov	r0, r4
 800530a:	f7fc f909 	bl	8001520 <CO_NMT_init>
 800530e:	4603      	mov	r3, r0
 8005310:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8005312:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <CO_CANopenInit+0x138>
            return err;
 800531a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800531e:	e0dc      	b.n	80054da <CO_CANopenInit+0x2f2>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6958      	ldr	r0, [r3, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8005328:	4b6e      	ldr	r3, [pc, #440]	; (80054e4 <CO_CANopenInit+0x2fc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 800532e:	3384      	adds	r3, #132	; 0x84
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	6852      	ldr	r2, [r2, #4]
 8005334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005336:	9103      	str	r1, [sp, #12]
 8005338:	2105      	movs	r1, #5
 800533a:	9102      	str	r1, [sp, #8]
 800533c:	9201      	str	r2, [sp, #4]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2308      	movs	r3, #8
 8005342:	4622      	mov	r2, r4
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	f7fb fdf1 	bl	8000f2c <CO_HBconsumer_init>
 800534a:	4603      	mov	r3, r0
 800534c:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 800534e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <CO_CANopenInit+0x174>
            return err;
 8005356:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800535a:	e0be      	b.n	80054da <CO_CANopenInit+0x2f2>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800535c:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <CO_CANopenInit+0x2fc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	33b4      	adds	r3, #180	; 0xb4
 8005364:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005366:	2300      	movs	r3, #0
 8005368:	837b      	strh	r3, [r7, #26]
 800536a:	e030      	b.n	80053ce <CO_CANopenInit+0x1e6>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005370:	8b7b      	ldrh	r3, [r7, #26]
 8005372:	21ac      	movs	r1, #172	; 0xac
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	18d5      	adds	r5, r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	8b7a      	ldrh	r2, [r7, #26]
 8005380:	3203      	adds	r2, #3
 8005382:	b292      	uxth	r2, r2
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	6849      	ldr	r1, [r1, #4]
 8005388:	8b78      	ldrh	r0, [r7, #26]
 800538a:	3002      	adds	r0, #2
 800538c:	b280      	uxth	r0, r0
 800538e:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 8005392:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8005394:	9405      	str	r4, [sp, #20]
 8005396:	9004      	str	r0, [sp, #16]
 8005398:	9103      	str	r1, [sp, #12]
 800539a:	9202      	str	r2, [sp, #8]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	4633      	mov	r3, r6
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	4628      	mov	r0, r5
 80053ac:	f7fd f944 	bl	8002638 <CO_SDOserver_init>
 80053b0:	4603      	mov	r3, r0
 80053b2:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 80053b4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <CO_CANopenInit+0x1da>
                return err;
 80053bc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80053c0:	e08b      	b.n	80054da <CO_CANopenInit+0x2f2>
            }
            SDOsrvPar++;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	330c      	adds	r3, #12
 80053c6:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80053c8:	8b7b      	ldrh	r3, [r7, #26]
 80053ca:	3301      	adds	r3, #1
 80053cc:	837b      	strh	r3, [r7, #26]
 80053ce:	8b7b      	ldrh	r3, [r7, #26]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0cb      	beq.n	800536c <CO_CANopenInit+0x184>
        }
    }

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    if (CO_GET_CNT(SDO_CLI) > 0U) {
        OD_entry_t* SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 80053d4:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <CO_CANopenInit+0x2fc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	33c0      	adds	r3, #192	; 0xc0
 80053dc:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 80053de:	2300      	movs	r3, #0
 80053e0:	827b      	strh	r3, [r7, #18]
 80053e2:	e02e      	b.n	8005442 <CO_CANopenInit+0x25a>
            err = CO_SDOclient_init(&co->SDOclient[i], od, SDOcliPar, nodeId, co->CANmodule,
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80053e8:	8a7a      	ldrh	r2, [r7, #18]
 80053ea:	4613      	mov	r3, r2
 80053ec:	015b      	lsls	r3, r3, #5
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	18cd      	adds	r5, r1, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	8a7a      	ldrh	r2, [r7, #18]
 80053fa:	3204      	adds	r2, #4
 80053fc:	b292      	uxth	r2, r2
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6849      	ldr	r1, [r1, #4]
 8005402:	8a78      	ldrh	r0, [r7, #18]
 8005404:	3003      	adds	r0, #3
 8005406:	b280      	uxth	r0, r0
 8005408:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 800540c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800540e:	9404      	str	r4, [sp, #16]
 8005410:	9003      	str	r0, [sp, #12]
 8005412:	9102      	str	r1, [sp, #8]
 8005414:	9201      	str	r2, [sp, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	4633      	mov	r3, r6
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	4628      	mov	r0, r5
 8005420:	f7fc fdca 	bl	8001fb8 <CO_SDOclient_init>
 8005424:	4603      	mov	r3, r0
 8005426:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            SDOcliPar++;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	330c      	adds	r3, #12
 800542c:	617b      	str	r3, [r7, #20]
            if (err != CO_ERROR_NO) {
 800542e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <CO_CANopenInit+0x254>
                return err;
 8005436:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800543a:	e04e      	b.n	80054da <CO_CANopenInit+0x2f2>
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 800543c:	8a7b      	ldrh	r3, [r7, #18]
 800543e:	3301      	adds	r3, #1
 8005440:	827b      	strh	r3, [r7, #18]
 8005442:	8a7b      	ldrh	r3, [r7, #18]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0cd      	beq.n	80053e4 <CO_CANopenInit+0x1fc>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800544c:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <CO_CANopenInit+0x2fc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2302      	movs	r3, #2
 8005460:	f7fe fdba 	bl	8003fd8 <CO_TIME_init>
 8005464:	4603      	mov	r3, r0
 8005466:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8005468:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <CO_CANopenInit+0x28e>
            return err;
 8005470:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005474:	e031      	b.n	80054da <CO_CANopenInit+0x2f2>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800547a:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <CO_CANopenInit+0x2fc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f103 0624 	add.w	r6, r3, #36	; 0x24
 8005484:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <CO_CANopenInit+0x2fc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <CO_CANopenInit+0x2fc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005494:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005496:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <CO_CANopenInit+0x2fc>)
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800549c:	32a8      	adds	r2, #168	; 0xa8
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	6849      	ldr	r1, [r1, #4]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	6840      	ldr	r0, [r0, #4]
 80054a6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80054a8:	9406      	str	r4, [sp, #24]
 80054aa:	2400      	movs	r4, #0
 80054ac:	9405      	str	r4, [sp, #20]
 80054ae:	9004      	str	r0, [sp, #16]
 80054b0:	2001      	movs	r0, #1
 80054b2:	9003      	str	r0, [sp, #12]
 80054b4:	9102      	str	r1, [sp, #8]
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4663      	mov	r3, ip
 80054bc:	4632      	mov	r2, r6
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4628      	mov	r0, r5
 80054c2:	f7fe fac3 	bl	8003a4c <CO_SYNC_init>
 80054c6:	4603      	mov	r3, r0
 80054c8:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 80054ca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <CO_CANopenInit+0x2f0>
            return err;
 80054d2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80054d6:	e000      	b.n	80054da <CO_CANopenInit+0x2f2>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	2000018c 	.word	0x2000018c

080054e8 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	e015      	b.n	800552e <CO_CANopenInitPDO+0x46>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <CO_CANopenInitPDO+0x30>
 8005508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db03      	blt.n	8005518 <CO_CANopenInitPDO+0x30>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <CO_CANopenInitPDO+0x3e>
 8005520:	f06f 0312 	mvn.w	r3, #18
 8005524:	e003      	b.n	800552e <CO_CANopenInitPDO+0x46>
 8005526:	f04f 33ff 	mov.w	r3, #4294967295
 800552a:	e000      	b.n	800552e <CO_CANopenInitPDO+0x46>
            TPDOmap++;
        }
    }
#endif

    return CO_ERROR_NO;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800553a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553c:	b09b      	sub	sp, #108	; 0x6c
 800553e:	af08      	add	r7, sp, #32
 8005540:	61f8      	str	r0, [r7, #28]
 8005542:	61b9      	str	r1, [r7, #24]
 8005544:	617a      	str	r2, [r7, #20]
 8005546:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fc37 	bl	8004dc6 <CO_NMT_getInternalState>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 800555e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005562:	2b7f      	cmp	r3, #127	; 0x7f
 8005564:	d003      	beq.n	800556e <CO_process+0x34>
 8005566:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800556a:	2b05      	cmp	r3, #5
 800556c:	d101      	bne.n	8005572 <CO_process+0x38>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <CO_process+0x3a>
 8005572:	2300      	movs	r3, #0
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fddd 	bl	800613a <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff f9cb 	bl	8004920 <CO_LSSslave_process>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	8a5b      	ldrh	r3, [r3, #18]
 80055a2:	867b      	strh	r3, [r7, #50]	; 0x32
    bool_t LSSslave_configuration = false;
 80055a4:	2300      	movs	r3, #0
 80055a6:	643b      	str	r3, [r7, #64]	; 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fc1c 	bl	8004dea <CO_LSSslave_getState>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <CO_process+0x82>
            LSSslave_configuration = true;
 80055b8:	2301      	movs	r3, #1
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2118      	movs	r1, #24
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fbc2 	bl	8004d4c <CO_isError>
 80055c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	211b      	movs	r1, #27
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fbbb 	bl	8004d4c <CO_isError>
 80055d6:	62b8      	str	r0, [r7, #40]	; 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	211c      	movs	r1, #28
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff fbb4 	bl	8004d4c <CO_isError>
 80055e4:	6278      	str	r0, [r7, #36]	; 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <CO_process+0xbc>
 80055f0:	f997 5023 	ldrsb.w	r5, [r7, #35]	; 0x23
 80055f4:	e000      	b.n	80055f8 <CO_process+0xbe>
 80055f6:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 80055f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055fa:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 800560a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800560c:	f240 3303 	movw	r3, #771	; 0x303
 8005610:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <CO_process+0xee>
 8005624:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8005626:	e000      	b.n	800562a <CO_process+0xf0>
 8005628:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <CO_process+0x106>
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <CO_process+0x102>
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <CO_process+0x106>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <CO_process+0x108>
 8005640:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005642:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fba6 	bl	8004d9a <CO_getErrorRegister>
 800564e:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	2300      	movs	r3, #0
 8005662:	9306      	str	r3, [sp, #24]
 8005664:	9205      	str	r2, [sp, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	9304      	str	r3, [sp, #16]
 800566a:	9403      	str	r4, [sp, #12]
 800566c:	2300      	movs	r3, #0
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567a:	462a      	mov	r2, r5
 800567c:	6979      	ldr	r1, [r7, #20]
 800567e:	4630      	mov	r0, r6
 8005680:	f7fe fdda 	bl	8004238 <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <CO_process+0x158>
        return reset;
 800568c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005690:	e047      	b.n	8005722 <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	69d8      	ldr	r0, [r3, #28]
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800569c:	f7fb f990 	bl	80009c0 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	6918      	ldr	r0, [r3, #16]
 80056a4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	f7fb fff6 	bl	800169c <CO_NMT_process>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80056b6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80056ba:	2b7f      	cmp	r3, #127	; 0x7f
 80056bc:	d003      	beq.n	80056c6 <CO_process+0x18c>
 80056be:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d101      	bne.n	80056ca <CO_process+0x190>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <CO_process+0x192>
 80056ca:	2300      	movs	r3, #0
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80056d4:	e011      	b.n	80056fa <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056de:	21ac      	movs	r1, #172	; 0xac
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	18d0      	adds	r0, r2, r3
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ec:	f7fd fa8e 	bl	8002c0c <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80056f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056f4:	3301      	adds	r3, #1
 80056f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80056fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0e9      	beq.n	80056d6 <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	6958      	ldr	r0, [r3, #20]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570c:	f7fb fd50 	bl	80011b0 <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fcdd 	bl	80040d8 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 800571e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005722:	4618      	mov	r0, r3
 8005724:	374c      	adds	r7, #76	; 0x4c
 8005726:	46bd      	mov	sp, r7
 8005728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800572a <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800572a:	b580      	push	{r7, lr}
 800572c:	b088      	sub	sp, #32
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d12e      	bne.n	80057a0 <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fb3d 	bl	8004dc6 <CO_NMT_getInternalState>
 800574c:	4603      	mov	r3, r0
 800574e:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8005750:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005754:	2b7f      	cmp	r3, #127	; 0x7f
 8005756:	d003      	beq.n	8005760 <CO_process_SYNC+0x36>
 8005758:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800575c:	2b05      	cmp	r3, #5
 800575e:	d101      	bne.n	8005764 <CO_process_SYNC+0x3a>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <CO_process_SYNC+0x3c>
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	6979      	ldr	r1, [r7, #20]
 8005772:	f7fe fa91 	bl	8003c98 <CO_SYNC_process>
 8005776:	4603      	mov	r3, r0
 8005778:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d009      	beq.n	8005794 <CO_process_SYNC+0x6a>
 8005780:	2b02      	cmp	r3, #2
 8005782:	dc0f      	bgt.n	80057a4 <CO_process_SYNC+0x7a>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00f      	beq.n	80057a8 <CO_process_SYNC+0x7e>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d000      	beq.n	800578e <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 800578c:	e00a      	b.n	80057a4 <CO_process_SYNC+0x7a>
            case CO_SYNC_RX_TX: syncWas = true; break;
 800578e:	2301      	movs	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	e00a      	b.n	80057aa <CO_process_SYNC+0x80>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fc68 	bl	800606e <CO_CANclearPendingSyncPDOs>
 800579e:	e004      	b.n	80057aa <CO_process_SYNC+0x80>
        }
    }
 80057a0:	bf00      	nop
 80057a2:	e002      	b.n	80057aa <CO_process_SYNC+0x80>
                break;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <CO_process_SYNC+0x80>
            case CO_SYNC_NONE: break;
 80057a8:	bf00      	nop

    return syncWas;
 80057aa:	69fb      	ldr	r3, [r7, #28]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10e      	bne.n	80057e8 <CO_process_RPDO+0x34>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff faf9 	bl	8004dc6 <CO_NMT_getInternalState>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	bf0c      	ite	eq
 80057da:	2301      	moveq	r3, #1
 80057dc:	2300      	movne	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80057e2:	2300      	movs	r3, #0
 80057e4:	827b      	strh	r3, [r7, #18]
 80057e6:	e000      	b.n	80057ea <CO_process_RPDO+0x36>
        return;
 80057e8:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10e      	bne.n	8005824 <CO_process_TPDO+0x34>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fadb 	bl	8004dc6 <CO_NMT_getInternalState>
 8005810:	4603      	mov	r3, r0
 8005812:	2b05      	cmp	r3, #5
 8005814:	bf0c      	ite	eq
 8005816:	2301      	moveq	r3, #1
 8005818:	2300      	movne	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800581e:	2300      	movs	r3, #0
 8005820:	827b      	strh	r3, [r7, #18]
 8005822:	e000      	b.n	8005826 <CO_process_TPDO+0x36>
        return;
 8005824:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8005834:	4a13      	ldr	r2, [pc, #76]	; (8005884 <canopen_app_init+0x58>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800583e:	f107 0308 	add.w	r3, r7, #8
 8005842:	4619      	mov	r1, r3
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff fae1 	bl	8004e0c <CO_new>
 800584a:	4603      	mov	r3, r0
 800584c:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <canopen_app_init+0x5c>)
 800584e:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <canopen_app_init+0x5c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8005858:	480c      	ldr	r0, [pc, #48]	; (800588c <canopen_app_init+0x60>)
 800585a:	f005 f859 	bl	800a910 <puts>
        return 1;
 800585e:	2301      	movs	r3, #1
 8005860:	e00c      	b.n	800587c <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %lu bytes for CANopen objects\n", heapMemoryUsed);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4619      	mov	r1, r3
 8005866:	480a      	ldr	r0, [pc, #40]	; (8005890 <canopen_app_init+0x64>)
 8005868:	f004 ffcc 	bl	800a804 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <canopen_app_init+0x58>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a05      	ldr	r2, [pc, #20]	; (8005888 <canopen_app_init+0x5c>)
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8005876:	f000 f80d 	bl	8005894 <canopen_app_resetCommunication>
    return 0;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000220 	.word	0x20000220
 8005888:	20000224 	.word	0x20000224
 800588c:	0800b680 	.word	0x0800b680
 8005890:	0800b6a0 	.word	0x0800b6a0

08005894 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b08f      	sub	sp, #60	; 0x3c
 8005898:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 800589a:	487d      	ldr	r0, [pc, #500]	; (8005a90 <canopen_app_resetCommunication+0x1fc>)
 800589c:	f005 f838 	bl	800a910 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80058a0:	4b7c      	ldr	r3, [pc, #496]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80058aa:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f9bc 	bl	8005c2c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80058b4:	4b77      	ldr	r3, [pc, #476]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 faa6 	bl	8005e0c <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80058c0:	4b74      	ldr	r3, [pc, #464]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a74      	ldr	r2, [pc, #464]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 80058c6:	6811      	ldr	r1, [r2, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fc33 	bl	8005136 <CO_CANinit>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	4b71      	ldr	r3, [pc, #452]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80058d6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80058d8:	4b70      	ldr	r3, [pc, #448]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80058da:	f993 3000 	ldrsb.w	r3, [r3]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80058e2:	4b6e      	ldr	r3, [pc, #440]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80058e4:	f993 3000 	ldrsb.w	r3, [r3]
 80058e8:	4619      	mov	r1, r3
 80058ea:	486d      	ldr	r0, [pc, #436]	; (8005aa0 <canopen_app_resetCommunication+0x20c>)
 80058ec:	f004 ff8a 	bl	800a804 <iprintf>
        return 1;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0c8      	b.n	8005a86 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80058f4:	4b6b      	ldr	r3, [pc, #428]	; (8005aa4 <canopen_app_resetCommunication+0x210>)
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80058fa:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <canopen_app_resetCommunication+0x210>)
 80058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80058fe:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8005900:	4b68      	ldr	r3, [pc, #416]	; (8005aa4 <canopen_app_resetCommunication+0x210>)
 8005902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005904:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8005906:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <canopen_app_resetCommunication+0x210>)
 8005908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800590a:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 800590c:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	4b61      	ldr	r3, [pc, #388]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	4b60      	ldr	r3, [pc, #384]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3302      	adds	r3, #2
 800591c:	f107 0108 	add.w	r1, r7, #8
 8005920:	f7ff fc35 	bl	800518e <CO_LSSinit>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	4b5c      	ldr	r3, [pc, #368]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 800592a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800592c:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 800592e:	f993 3000 	ldrsb.w	r3, [r3]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8005936:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 8005938:	f993 3000 	ldrsb.w	r3, [r3]
 800593c:	4619      	mov	r1, r3
 800593e:	485a      	ldr	r0, [pc, #360]	; (8005aa8 <canopen_app_resetCommunication+0x214>)
 8005940:	f004 ff60 	bl	800a804 <iprintf>
        return 2;
 8005944:	2302      	movs	r3, #2
 8005946:	e09e      	b.n	8005a86 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8005948:	4b53      	ldr	r3, [pc, #332]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	4b52      	ldr	r3, [pc, #328]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8005958:	4b4e      	ldr	r3, [pc, #312]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	4b53      	ldr	r3, [pc, #332]	; (8005aac <canopen_app_resetCommunication+0x218>)
 800595e:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8005960:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 8005962:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	1d3a      	adds	r2, r7, #4
 8005968:	9207      	str	r2, [sp, #28]
 800596a:	9306      	str	r3, [sp, #24]
 800596c:	2300      	movs	r3, #0
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005974:	9304      	str	r3, [sp, #16]
 8005976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800597a:	9303      	str	r3, [sp, #12]
 800597c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005980:	9302      	str	r3, [sp, #8]
 8005982:	f242 1311 	movw	r3, #8465	; 0x2111
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	2300      	movs	r3, #0
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	460b      	mov	r3, r1
 800598e:	2200      	movs	r2, #0
 8005990:	2100      	movs	r1, #0
 8005992:	f7ff fc29 	bl	80051e8 <CO_CANopenInit>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 800599c:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 800599e:	4b3f      	ldr	r3, [pc, #252]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80059a0:	f993 3000 	ldrsb.w	r3, [r3]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01a      	beq.n	80059de <canopen_app_resetCommunication+0x14a>
 80059a8:	4b3c      	ldr	r3, [pc, #240]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80059aa:	f993 3000 	ldrsb.w	r3, [r3]
 80059ae:	f113 0f13 	cmn.w	r3, #19
 80059b2:	d014      	beq.n	80059de <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80059b4:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80059b6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ba:	f113 0f0c 	cmn.w	r3, #12
 80059be:	d105      	bne.n	80059cc <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4619      	mov	r1, r3
 80059c4:	483a      	ldr	r0, [pc, #232]	; (8005ab0 <canopen_app_resetCommunication+0x21c>)
 80059c6:	f004 ff1d 	bl	800a804 <iprintf>
 80059ca:	e006      	b.n	80059da <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 80059cc:	4b33      	ldr	r3, [pc, #204]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 80059ce:	f993 3000 	ldrsb.w	r3, [r3]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4837      	ldr	r0, [pc, #220]	; (8005ab4 <canopen_app_resetCommunication+0x220>)
 80059d6:	f004 ff15 	bl	800a804 <iprintf>
        }
        return 3;
 80059da:	2303      	movs	r3, #3
 80059dc:	e053      	b.n	8005a86 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80059de:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	4b2c      	ldr	r3, [pc, #176]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	4b30      	ldr	r3, [pc, #192]	; (8005aac <canopen_app_resetCommunication+0x218>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	785c      	ldrb	r4, [r3, #1]
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4623      	mov	r3, r4
 80059f8:	f7ff fd76 	bl	80054e8 <CO_CANopenInitPDO>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 8005a02:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005a04:	4b25      	ldr	r3, [pc, #148]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 8005a06:	f993 3000 	ldrsb.w	r3, [r3]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d014      	beq.n	8005a38 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8005a0e:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 8005a10:	f993 3000 	ldrsb.w	r3, [r3]
 8005a14:	f113 0f0c 	cmn.w	r3, #12
 8005a18:	d105      	bne.n	8005a26 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4824      	ldr	r0, [pc, #144]	; (8005ab0 <canopen_app_resetCommunication+0x21c>)
 8005a20:	f004 fef0 	bl	800a804 <iprintf>
 8005a24:	e006      	b.n	8005a34 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <canopen_app_resetCommunication+0x208>)
 8005a28:	f993 3000 	ldrsb.w	r3, [r3]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4822      	ldr	r0, [pc, #136]	; (8005ab8 <canopen_app_resetCommunication+0x224>)
 8005a30:	f004 fee8 	bl	800a804 <iprintf>
        }
        return 4;
 8005a34:	2304      	movs	r3, #4
 8005a36:	e026      	b.n	8005a86 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <canopen_app_resetCommunication+0x204>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f003 f91a 	bl	8008c78 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8005a4e:	481b      	ldr	r0, [pc, #108]	; (8005abc <canopen_app_resetCommunication+0x228>)
 8005a50:	f004 ff5e 	bl	800a910 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <canopen_app_resetCommunication+0x200>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f8f6 	bl	8005c4c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8005a60:	4817      	ldr	r0, [pc, #92]	; (8005ac0 <canopen_app_resetCommunication+0x22c>)
 8005a62:	f004 ff55 	bl	800a910 <puts>
    fflush(stdout);
 8005a66:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <canopen_app_resetCommunication+0x230>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f004 fc6b 	bl	800a348 <fflush>
    time_old = time_current = HAL_GetTick();
 8005a72:	f001 f9e1 	bl	8006e38 <HAL_GetTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <canopen_app_resetCommunication+0x234>)
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <canopen_app_resetCommunication+0x234>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a12      	ldr	r2, [pc, #72]	; (8005acc <canopen_app_resetCommunication+0x238>)
 8005a82:	6013      	str	r3, [r2, #0]
    return 0;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	0800b6cc 	.word	0x0800b6cc
 8005a94:	20000224 	.word	0x20000224
 8005a98:	20000220 	.word	0x20000220
 8005a9c:	20000230 	.word	0x20000230
 8005aa0:	0800b6f4 	.word	0x0800b6f4
 8005aa4:	20000000 	.word	0x20000000
 8005aa8:	0800b71c 	.word	0x0800b71c
 8005aac:	2000018c 	.word	0x2000018c
 8005ab0:	0800b748 	.word	0x0800b748
 8005ab4:	0800b770 	.word	0x0800b770
 8005ab8:	0800b79c 	.word	0x0800b79c
 8005abc:	0800b7c4 	.word	0x0800b7c4
 8005ac0:	0800b7ec 	.word	0x0800b7ec
 8005ac4:	200001a0 	.word	0x200001a0
 8005ac8:	2000022c 	.word	0x2000022c
 8005acc:	20000228 	.word	0x20000228

08005ad0 <canopen_app_process>:

void
canopen_app_process() {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8005ad6:	f001 f9af 	bl	8006e38 <HAL_GetTick>
 8005ada:	4603      	mov	r3, r0
 8005adc:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <canopen_app_process+0xc0>)
 8005ade:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <canopen_app_process+0xc0>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <canopen_app_process+0xc4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d04c      	beq.n	8005b86 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8005aec:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <canopen_app_process+0xc0>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <canopen_app_process+0xc4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8005b00:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <canopen_app_process+0xc0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a23      	ldr	r2, [pc, #140]	; (8005b94 <canopen_app_process+0xc4>)
 8005b06:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <canopen_app_process+0xc8>)
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	2100      	movs	r1, #0
 8005b12:	f7ff fd12 	bl	800553a <CO_process>
 8005b16:	4603      	mov	r3, r0
 8005b18:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <canopen_app_process+0xc8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	7a5a      	ldrb	r2, [r3, #9]
 8005b22:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <canopen_app_process+0xcc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	09d2      	lsrs	r2, r2, #7
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <canopen_app_process+0xc8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b32:	7a9a      	ldrb	r2, [r3, #10]
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <canopen_app_process+0xcc>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	09d2      	lsrs	r2, r2, #7
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d118      	bne.n	8005b76 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8005b44:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <canopen_app_process+0xcc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f003 f904 	bl	8008d58 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <canopen_app_process+0xcc>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f869 	bl	8005c2c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <canopen_app_process+0xc8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fa85 	bl	800506e <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8005b64:	480e      	ldr	r0, [pc, #56]	; (8005ba0 <canopen_app_process+0xd0>)
 8005b66:	f004 fed3 	bl	800a910 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <canopen_app_process+0xcc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fe5c 	bl	800582c <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8005b74:	e007      	b.n	8005b86 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d104      	bne.n	8005b86 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8005b7c:	4809      	ldr	r0, [pc, #36]	; (8005ba4 <canopen_app_process+0xd4>)
 8005b7e:	f004 fec7 	bl	800a910 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8005b82:	f002 f938 	bl	8007df6 <HAL_NVIC_SystemReset>
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000022c 	.word	0x2000022c
 8005b94:	20000228 	.word	0x20000228
 8005b98:	20000224 	.word	0x20000224
 8005b9c:	20000220 	.word	0x20000220
 8005ba0:	0800b808 	.word	0x0800b808
 8005ba4:	0800b830 	.word	0x0800b830

08005ba8 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8005bae:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb4:	f3ef 8210 	mrs	r2, PRIMASK
 8005bb8:	607a      	str	r2, [r7, #4]
  return(result);
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8005bbe:	b672      	cpsid	i
}
 8005bc0:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d120      	bne.n	8005c0e <canopen_app_interrupt+0x66>
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8005bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005be0:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fd9d 	bl	800572a <CO_process_SYNC>
 8005bf0:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f7ff fdda 	bl	80057b4 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	2300      	movs	r3, #0
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	f7ff fdf1 	bl	80057f0 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <canopen_app_interrupt+0x80>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c16:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f383 8810 	msr	PRIMASK, r3
}
 8005c1e:	bf00      	nop
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000224 	.word	0x20000224

08005c2c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d004      	beq.n	8005c44 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 fb26 	bl	8007290 <HAL_CAN_Stop>
#endif
    }
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 fad0 	bl	8007208 <HAL_CAN_Start>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	615a      	str	r2, [r3, #20]
        }
    }
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b090      	sub	sp, #64	; 0x40
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <CO_CANmodule_init+0x20>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <CO_CANmodule_init+0x20>
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca0:	e0ab      	b.n	8005dfa <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8005ca8:	4a56      	ldr	r2, [pc, #344]	; (8005e04 <CO_CANmodule_init+0x188>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	887a      	ldrh	r2, [r7, #2]
 8005cb8:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cbe:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005cc6:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005cf6:	e02b      	b.n	8005d50 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8005cf8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4413      	add	r3, r2
 8005d08:	2200      	movs	r2, #0
 8005d0a:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8005d0c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d20:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8005d22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8005d36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8005d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d50:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d52:	887b      	ldrh	r3, [r7, #2]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d3cf      	bcc.n	8005cf8 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8005d58:	2300      	movs	r3, #0
 8005d5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d5c:	e00c      	b.n	8005d78 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8005d5e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6c:	4413      	add	r3, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8005d72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d74:	3301      	adds	r3, #1
 8005d76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d78:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d3ed      	bcc.n	8005d5e <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <CO_CANmodule_init+0x18c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d102      	bne.n	8005d9c <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9a:	e001      	b.n	8005da0 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8005d9c:	230e      	movs	r3, #14
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005da4:	2301      	movs	r3, #1
 8005da6:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8005dc0:	230e      	movs	r3, #14
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f107 0214 	add.w	r2, r7, #20
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f93a 	bl	8007048 <HAL_CAN_ConfigFilter>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
 8005dde:	e00c      	b.n	8005dfa <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2113      	movs	r1, #19
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fcbd 	bl	8007766 <HAL_CAN_ActivateNotification>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	e000      	b.n	8005dfa <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3740      	adds	r7, #64	; 0x40
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000234 	.word	0x20000234
 8005e08:	40006400 	.word	0x40006400

08005e0c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <CO_CANmodule_disable+0x22>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 fa31 	bl	8007290 <HAL_CAN_Stop>
#endif
    }
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	4608      	mov	r0, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	817b      	strh	r3, [r7, #10]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	813b      	strh	r3, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005e52:	2300      	movs	r3, #0
 8005e54:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d03c      	beq.n	8005ed6 <CO_CANrxBufferInit+0x9e>
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d039      	beq.n	8005ed6 <CO_CANrxBufferInit+0x9e>
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d036      	beq.n	8005ed6 <CO_CANrxBufferInit+0x9e>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	891b      	ldrh	r3, [r3, #8]
 8005e6c:	897a      	ldrh	r2, [r7, #10]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d231      	bcs.n	8005ed6 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	897a      	ldrh	r2, [r7, #10]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8005e90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e98:	b21b      	sxth	r3, r3
 8005e9a:	6a3a      	ldr	r2, [r7, #32]
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	d001      	beq.n	8005ea4 <CO_CANrxBufferInit+0x6c>
 8005ea0:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <CO_CANrxBufferInit+0xb8>)
 8005ea2:	e000      	b.n	8005ea6 <CO_CANrxBufferInit+0x6e>
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b21b      	sxth	r3, r3
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8005eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b21b      	sxth	r3, r3
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <CO_CANrxBufferInit+0xa4>
            __NOP();
 8005ed2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005ed4:	e002      	b.n	8005edc <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005ed6:	23ff      	movs	r3, #255	; 0xff
 8005ed8:	75fb      	strb	r3, [r7, #23]
 8005eda:	e000      	b.n	8005ede <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005edc:	bf00      	nop
    }

    return ret;
 8005ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	ffff8000 	.word	0xffff8000

08005ef4 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	817b      	strh	r3, [r7, #10]
 8005f02:	4613      	mov	r3, r2
 8005f04:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d024      	beq.n	8005f5a <CO_CANtxBufferInit+0x66>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8a1b      	ldrh	r3, [r3, #16]
 8005f14:	897a      	ldrh	r2, [r7, #10]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d21f      	bcs.n	8005f5a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68d9      	ldr	r1, [r3, #12]
 8005f1e:	897a      	ldrh	r2, [r7, #10]
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8005f2c:	893b      	ldrh	r3, [r7, #8]
 8005f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	d002      	beq.n	8005f3e <CO_CANtxBufferInit+0x4a>
 8005f38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f3c:	e000      	b.n	8005f40 <CO_CANtxBufferInit+0x4c>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	431a      	orrs	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005f4c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f58:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 faab 	bl	80074d8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d028      	beq.n	8005fda <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8005f88:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <prv_send_can_message+0x7c>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8005f8e:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <prv_send_can_message+0x7c>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	791b      	ldrb	r3, [r3, #4]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <prv_send_can_message+0x7c>)
 8005f9c:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa6:	4a0f      	ldr	r2, [pc, #60]	; (8005fe4 <prv_send_can_message+0x7c>)
 8005fa8:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	0b9b      	lsrs	r3, r3, #14
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	4a0b      	ldr	r2, [pc, #44]	; (8005fe4 <prv_send_can_message+0x7c>)
 8005fb6:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6898      	ldr	r0, [r3, #8]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	1d5a      	adds	r2, r3, #5
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	4907      	ldr	r1, [pc, #28]	; (8005fe4 <prv_send_can_message+0x7c>)
 8005fc8:	f001 f9ab 	bl	8007322 <HAL_CAN_AddTxMessage>
 8005fcc:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8005fd8:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000238 	.word	0x20000238

08005fe8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8a5b      	ldrh	r3, [r3, #18]
 800600a:	f043 0308 	orr.w	r3, r3, #8
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8006014:	23f7      	movs	r3, #247	; 0xf7
 8006016:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006018:	f3ef 8310 	mrs	r3, PRIMASK
 800601c:	613b      	str	r3, [r7, #16]
  return(result);
 800601e:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006024:	b672      	cpsid	i
}
 8006026:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ff9c 	bl	8005f68 <prv_send_can_message>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	61da      	str	r2, [r3, #28]
 800603e:	e009      	b.n	8006054 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800604a:	b29b      	uxth	r3, r3
 800604c:	3301      	adds	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f383 8810 	msr	PRIMASK, r3
}
 8006060:	bf00      	nop

    return err;
 8006062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607a:	f3ef 8310 	mrs	r3, PRIMASK
 800607e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006080:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006086:	b672      	cpsid	i
}
 8006088:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d032      	beq.n	800610c <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8a1b      	ldrh	r3, [r3, #16]
 80060aa:	827b      	strh	r3, [r7, #18]
 80060ac:	e02b      	b.n	8006106 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68d9      	ldr	r1, [r3, #12]
 80060b2:	8a7a      	ldrh	r2, [r7, #18]
 80060b4:	4613      	mov	r3, r2
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01d      	beq.n	8006100 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68d9      	ldr	r1, [r3, #12]
 80060c8:	8a7a      	ldrh	r2, [r7, #18]
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	440b      	add	r3, r1
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d012      	beq.n	8006100 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68d9      	ldr	r1, [r3, #12]
 80060de:	8a7a      	ldrh	r2, [r7, #18]
 80060e0:	4613      	mov	r3, r2
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80060fc:	2302      	movs	r3, #2
 80060fe:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8006100:	8a7b      	ldrh	r3, [r7, #18]
 8006102:	3b01      	subs	r3, #1
 8006104:	827b      	strh	r3, [r7, #18]
 8006106:	8a7b      	ldrh	r3, [r7, #18]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1d0      	bne.n	80060ae <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f383 8810 	msr	PRIMASK, r3
}
 8006118:	bf00      	nop
    if (tpdoDeleted) {
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d006      	beq.n	800612e <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8a5b      	ldrh	r3, [r3, #18]
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	825a      	strh	r2, [r3, #18]
    }
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	d02e      	beq.n	80061be <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8a5b      	ldrh	r3, [r3, #18]
 8006164:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8006176:	89fb      	ldrh	r3, [r7, #14]
 8006178:	f043 0304 	orr.w	r3, r3, #4
 800617c:	81fb      	strh	r3, [r7, #14]
 800617e:	e01b      	b.n	80061b8 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8006180:	89fb      	ldrh	r3, [r7, #14]
 8006182:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8006196:	89fb      	ldrh	r3, [r7, #14]
 8006198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061b2:	f043 0302 	orr.w	r3, r3, #2
 80061b6:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	89fa      	ldrh	r2, [r7, #14]
 80061bc:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	; 0x30
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80061d8:	2300      	movs	r3, #0
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80061e2:	f107 0314 	add.w	r3, r7, #20
 80061e6:	3305      	adds	r3, #5
 80061e8:	4a2c      	ldr	r2, [pc, #176]	; (800629c <prv_read_can_received_msg+0xd0>)
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 f9a8 	bl	8007542 <HAL_CAN_GetRxMessage>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d14c      	bne.n	8006292 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80061f8:	4b28      	ldr	r3, [pc, #160]	; (800629c <prv_read_can_received_msg+0xd0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <prv_read_can_received_msg+0xd0>)
 80061fe:	68d2      	ldr	r2, [r2, #12]
 8006200:	2a02      	cmp	r2, #2
 8006202:	d102      	bne.n	800620a <prv_read_can_received_msg+0x3e>
 8006204:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006208:	e000      	b.n	800620c <prv_read_can_received_msg+0x40>
 800620a:	2200      	movs	r2, #0
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8006210:	4b22      	ldr	r3, [pc, #136]	; (800629c <prv_read_can_received_msg+0xd0>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 800621c:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <prv_read_can_received_msg+0xd4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8006226:	be00      	bkpt	0x0000
 8006228:	e01f      	b.n	800626a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800622a:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <prv_read_can_received_msg+0xd4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006232:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <prv_read_can_received_msg+0xd4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	891b      	ldrh	r3, [r3, #8]
 8006238:	857b      	strh	r3, [r7, #42]	; 0x2a
 800623a:	e013      	b.n	8006264 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	4053      	eors	r3, r2
 8006246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006248:	8852      	ldrh	r2, [r2, #2]
 800624a:	4013      	ands	r3, r2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d103      	bne.n	8006258 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8006256:	e008      	b.n	800626a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800625a:	3b01      	subs	r3, #1
 800625c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	330c      	adds	r3, #12
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006264:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e8      	bne.n	800623c <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800626a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <prv_read_can_received_msg+0xc8>
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00d      	beq.n	8006294 <prv_read_can_received_msg+0xc8>
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006286:	6852      	ldr	r2, [r2, #4]
 8006288:	f107 0114 	add.w	r1, r7, #20
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	e000      	b.n	8006294 <prv_read_can_received_msg+0xc8>
        return;
 8006292:	bf00      	nop
    }
}
 8006294:	3730      	adds	r7, #48	; 0x30
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000250 	.word	0x20000250
 80062a0:	20000234 	.word	0x20000234

080062a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ff8b 	bl	80061cc <prv_read_can_received_msg>
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 80062c6:	2200      	movs	r2, #0
 80062c8:	2101      	movs	r1, #1
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff ff7e 	bl	80061cc <prv_read_can_received_msg>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d03d      	beq.n	8006374 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006302:	60fb      	str	r3, [r7, #12]
  return(result);
 8006304:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800630a:	b672      	cpsid	i
}
 800630c:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8a1b      	ldrh	r3, [r3, #16]
 8006312:	827b      	strh	r3, [r7, #18]
 8006314:	e01e      	b.n	8006354 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d014      	beq.n	8006348 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 800631e:	6979      	ldr	r1, [r7, #20]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff fe21 	bl	8005f68 <prv_send_can_message>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00d      	beq.n	8006348 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8006348:	8a7b      	ldrh	r3, [r7, #18]
 800634a:	3b01      	subs	r3, #1
 800634c:	827b      	strh	r3, [r7, #18]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	3318      	adds	r3, #24
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	8a7b      	ldrh	r3, [r7, #18]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1dd      	bne.n	8006316 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f383 8810 	msr	PRIMASK, r3
}
 8006372:	bf00      	nop
    }
}
 8006374:	bf00      	nop
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2101      	movs	r1, #1
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff ffa4 	bl	80062d8 <CO_CANinterrupt_TX>
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000234 	.word	0x20000234

0800639c <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff ff94 	bl	80062d8 <CO_CANinterrupt_TX>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000234 	.word	0x20000234

080063bc <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ff84 	bl	80062d8 <CO_CANinterrupt_TX>
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000234 	.word	0x20000234

080063dc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    if (htim == &htim14) {
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d101      	bne.n	80063f0 <HAL_TIM_PeriodElapsedCallback+0x14>
        canopen_app_interrupt();
 80063ec:	f7ff fbdc 	bl	8005ba8 <canopen_app_interrupt>
    }
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000294 	.word	0x20000294

080063fc <disable_CAN_transmission>:

void disable_CAN_transmission(CO_CANmodule_t *CANmodule) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
    CANmodule->CANerrorStatus |= CO_CAN_ERRTX_BUS_OFF;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8a5b      	ldrh	r3, [r3, #18]
 8006408:	f043 0304 	orr.w	r3, r3, #4
 800640c:	b29a      	uxth	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	825a      	strh	r2, [r3, #18]
    // Дополнительно можно вызвать функцию, которая обработает это состояние
    CO_CANmodule_disable(CANmodule);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fcfa 	bl	8005e0c <CO_CANmodule_disable>
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <checkHeartbeat>:

void checkHeartbeat(CO_HBconsumer_t *HBcons) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b09e      	sub	sp, #120	; 0x78
 8006424:	af02      	add	r7, sp, #8
 8006426:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8006428:	2300      	movs	r3, #0
 800642a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800642e:	e03b      	b.n	80064a8 <checkHeartbeat+0x88>
        char msg[100];
        snprintf(msg, sizeof(msg), "Node %d NMT state: %d\r\n", i, HBcons->monitoredNodes[i].NMTstate);
 8006430:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	4413      	add	r3, r2
 8006440:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006444:	f107 0008 	add.w	r0, r7, #8
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	460b      	mov	r3, r1
 800644c:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <checkHeartbeat+0xa0>)
 800644e:	2164      	movs	r1, #100	; 0x64
 8006450:	f004 fa76 	bl	800a940 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f7f9 feb9 	bl	80001d0 <strlen>
 800645e:	4603      	mov	r3, r0
 8006460:	b29a      	uxth	r2, r3
 8006462:	f107 0108 	add.w	r1, r7, #8
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	4816      	ldr	r0, [pc, #88]	; (80064c4 <checkHeartbeat+0xa4>)
 800646c:	f002 fed5 	bl	800921a <HAL_UART_Transmit>

        if (HBcons->monitoredNodes[i].NMTstate == CO_NMT_OPERATIONAL) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	4413      	add	r3, r2
 800647c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006480:	2b05      	cmp	r3, #5
 8006482:	d106      	bne.n	8006492 <checkHeartbeat+0x72>
            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // Включаем светодиод LED2
 8006484:	2201      	movs	r2, #1
 8006486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800648a:	480f      	ldr	r0, [pc, #60]	; (80064c8 <checkHeartbeat+0xa8>)
 800648c:	f001 fef2 	bl	8008274 <HAL_GPIO_WritePin>
 8006490:	e005      	b.n	800649e <checkHeartbeat+0x7e>
        } else {
            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET); // Выключаем светодиод LED2
 8006492:	2200      	movs	r2, #0
 8006494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006498:	480b      	ldr	r0, [pc, #44]	; (80064c8 <checkHeartbeat+0xa8>)
 800649a:	f001 feeb 	bl	8008274 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800649e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064a2:	3301      	adds	r3, #1
 80064a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7a1b      	ldrb	r3, [r3, #8]
 80064ac:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d3bd      	bcc.n	8006430 <checkHeartbeat+0x10>
        }
    }
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3770      	adds	r7, #112	; 0x70
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	0800b84c 	.word	0x0800b84c
 80064c4:	200002dc 	.word	0x200002dc
 80064c8:	40021400 	.word	0x40021400

080064cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08e      	sub	sp, #56	; 0x38
 80064d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064d2:	f000 fc4b 	bl	8006d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064d6:	f000 f8a7 	bl	8006628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064da:	f000 f993 	bl	8006804 <MX_GPIO_Init>
  MX_CAN1_Init();
 80064de:	f000 f90d 	bl	80066fc <MX_CAN1_Init>
  MX_TIM14_Init();
 80064e2:	f000 f941 	bl	8006768 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80064e6:	f000 f963 	bl	80067b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)"Starting initialization\r\n", strlen("Starting initialization\r\n"), HAL_MAX_DELAY);
 80064ea:	f04f 33ff 	mov.w	r3, #4294967295
 80064ee:	2219      	movs	r2, #25
 80064f0:	493b      	ldr	r1, [pc, #236]	; (80065e0 <main+0x114>)
 80064f2:	483c      	ldr	r0, [pc, #240]	; (80065e4 <main+0x118>)
 80064f4:	f002 fe91 	bl	800921a <HAL_UART_Transmit>

  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 80064f8:	4b3b      	ldr	r3, [pc, #236]	; (80065e8 <main+0x11c>)
 80064fa:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 80064fc:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <main+0x120>)
 80064fe:	617b      	str	r3, [r7, #20]
  canOpenNodeSTM32.timerHandle = &htim14;
 8006500:	4b3b      	ldr	r3, [pc, #236]	; (80065f0 <main+0x124>)
 8006502:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.desiredNodeID = nodeId;
 8006504:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <main+0x128>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	723b      	strb	r3, [r7, #8]
  canOpenNodeSTM32.baudrate = 500;
 800650a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800650e:	817b      	strh	r3, [r7, #10]
  canopen_app_init(&canOpenNodeSTM32);
 8006510:	f107 0308 	add.w	r3, r7, #8
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff f989 	bl	800582c <canopen_app_init>

  HAL_UART_Transmit(&huart2, (uint8_t*)"CAN module initialization\r\n", strlen("CAN module initialization\r\n"), HAL_MAX_DELAY);
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	221b      	movs	r2, #27
 8006520:	4935      	ldr	r1, [pc, #212]	; (80065f8 <main+0x12c>)
 8006522:	4830      	ldr	r0, [pc, #192]	; (80065e4 <main+0x118>)
 8006524:	f002 fe79 	bl	800921a <HAL_UART_Transmit>

  // Инициализация CAN модуля
  CO_ReturnError_t err = CO_CANmodule_init(&CANmodule, &hcan1, CAN_rxArray, sizeof(CAN_rxArray)/sizeof(CAN_rxArray[0]),
 8006528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800652c:	9302      	str	r3, [sp, #8]
 800652e:	2320      	movs	r3, #32
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	4b32      	ldr	r3, [pc, #200]	; (80065fc <main+0x130>)
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2320      	movs	r3, #32
 8006538:	4a31      	ldr	r2, [pc, #196]	; (8006600 <main+0x134>)
 800653a:	492b      	ldr	r1, [pc, #172]	; (80065e8 <main+0x11c>)
 800653c:	4831      	ldr	r0, [pc, #196]	; (8006604 <main+0x138>)
 800653e:	f7ff fb9d 	bl	8005c7c <CO_CANmodule_init>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                           CAN_txArray, sizeof(CAN_txArray)/sizeof(CAN_txArray[0]), 500);
  if (err != CO_ERROR_NO) {
 8006548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <main+0x94>
      HAL_UART_Transmit(&huart2, (uint8_t*)"Error initializing CAN module\r\n", strlen("Error initializing CAN module\r\n"), HAL_MAX_DELAY);
 8006550:	f04f 33ff 	mov.w	r3, #4294967295
 8006554:	221f      	movs	r2, #31
 8006556:	492c      	ldr	r1, [pc, #176]	; (8006608 <main+0x13c>)
 8006558:	4822      	ldr	r0, [pc, #136]	; (80065e4 <main+0x118>)
 800655a:	f002 fe5e 	bl	800921a <HAL_UART_Transmit>
      while (1); // Обработка ошибки
 800655e:	e7fe      	b.n	800655e <main+0x92>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)"Heartbeat consumer initialization\r\n", strlen("Heartbeat consumer initialization\r\n"), HAL_MAX_DELAY);
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
 8006564:	2223      	movs	r2, #35	; 0x23
 8006566:	4929      	ldr	r1, [pc, #164]	; (800660c <main+0x140>)
 8006568:	481e      	ldr	r0, [pc, #120]	; (80065e4 <main+0x118>)
 800656a:	f002 fe56 	bl	800921a <HAL_UART_Transmit>

  // Инициализация Heartbeat Consumer
  err = CO_HBconsumer_init(&HBcons, &em, monitoredNodes, 1, &OD->list[11], &CANmodule, 0, NULL);
 800656e:	4b28      	ldr	r3, [pc, #160]	; (8006610 <main+0x144>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	3384      	adds	r3, #132	; 0x84
 8006576:	2200      	movs	r2, #0
 8006578:	9203      	str	r2, [sp, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	9202      	str	r2, [sp, #8]
 800657e:	4a21      	ldr	r2, [pc, #132]	; (8006604 <main+0x138>)
 8006580:	9201      	str	r2, [sp, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	2301      	movs	r3, #1
 8006586:	4a23      	ldr	r2, [pc, #140]	; (8006614 <main+0x148>)
 8006588:	4923      	ldr	r1, [pc, #140]	; (8006618 <main+0x14c>)
 800658a:	4824      	ldr	r0, [pc, #144]	; (800661c <main+0x150>)
 800658c:	f7fa fcce 	bl	8000f2c <CO_HBconsumer_init>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != CO_ERROR_NO) {
 8006596:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <main+0xe2>
      HAL_UART_Transmit(&huart2, (uint8_t*)"Error initializing Heartbeat consumer\r\n", strlen("Error initializing Heartbeat consumer\r\n"), HAL_MAX_DELAY);
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	2227      	movs	r2, #39	; 0x27
 80065a4:	491e      	ldr	r1, [pc, #120]	; (8006620 <main+0x154>)
 80065a6:	480f      	ldr	r0, [pc, #60]	; (80065e4 <main+0x118>)
 80065a8:	f002 fe37 	bl	800921a <HAL_UART_Transmit>
      while (1); // Обработка ошибки
 80065ac:	e7fe      	b.n	80065ac <main+0xe0>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)"Initialization complete\r\n", strlen("Initialization complete\r\n"), HAL_MAX_DELAY);
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	2219      	movs	r2, #25
 80065b4:	491b      	ldr	r1, [pc, #108]	; (8006624 <main+0x158>)
 80065b6:	480b      	ldr	r0, [pc, #44]	; (80065e4 <main+0x118>)
 80065b8:	f002 fe2f 	bl	800921a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    canopen_app_process();
 80065bc:	f7ff fa88 	bl	8005ad0 <canopen_app_process>
    disable_CAN_transmission(&CANmodule);
 80065c0:	4810      	ldr	r0, [pc, #64]	; (8006604 <main+0x138>)
 80065c2:	f7ff ff1b 	bl	80063fc <disable_CAN_transmission>
    uint32_t timeDifference_us = 2000; // Пример, нужно обновлять в зависимости от текущего времени
 80065c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80065ca:	623b      	str	r3, [r7, #32]
    uint32_t timerNext_us;

    // Обработка Heartbeat Consumer
    CO_HBconsumer_process(&HBcons, true, timeDifference_us, &timerNext_us);
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	2101      	movs	r1, #1
 80065d2:	4812      	ldr	r0, [pc, #72]	; (800661c <main+0x150>)
 80065d4:	f7fa fdec 	bl	80011b0 <CO_HBconsumer_process>

    // Проверка состояния Heartbeat и управление светодиодом
    checkHeartbeat(&HBcons);
 80065d8:	4810      	ldr	r0, [pc, #64]	; (800661c <main+0x150>)
 80065da:	f7ff ff21 	bl	8006420 <checkHeartbeat>
  {
 80065de:	e7ed      	b.n	80065bc <main+0xf0>
 80065e0:	0800b864 	.word	0x0800b864
 80065e4:	200002dc 	.word	0x200002dc
 80065e8:	2000026c 	.word	0x2000026c
 80065ec:	080066fd 	.word	0x080066fd
 80065f0:	20000294 	.word	0x20000294
 80065f4:	20000190 	.word	0x20000190
 80065f8:	0800b880 	.word	0x0800b880
 80065fc:	20000568 	.word	0x20000568
 8006600:	200003e8 	.word	0x200003e8
 8006604:	200003b0 	.word	0x200003b0
 8006608:	0800b89c 	.word	0x0800b89c
 800660c:	0800b8bc 	.word	0x0800b8bc
 8006610:	2000018c 	.word	0x2000018c
 8006614:	20000350 	.word	0x20000350
 8006618:	20000360 	.word	0x20000360
 800661c:	20000320 	.word	0x20000320
 8006620:	0800b8e0 	.word	0x0800b8e0
 8006624:	0800b908 	.word	0x0800b908

08006628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b094      	sub	sp, #80	; 0x50
 800662c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800662e:	f107 0320 	add.w	r3, r7, #32
 8006632:	2230      	movs	r2, #48	; 0x30
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f003 ffe6 	bl	800a608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	609a      	str	r2, [r3, #8]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800664c:	2300      	movs	r3, #0
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <SystemClock_Config+0xcc>)
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <SystemClock_Config+0xcc>)
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	6413      	str	r3, [r2, #64]	; 0x40
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <SystemClock_Config+0xcc>)
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006668:	2300      	movs	r3, #0
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <SystemClock_Config+0xd0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <SystemClock_Config+0xd0>)
 8006672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <SystemClock_Config+0xd0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006684:	2302      	movs	r3, #2
 8006686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006688:	2301      	movs	r3, #1
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800668c:	2310      	movs	r3, #16
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006690:	2302      	movs	r3, #2
 8006692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006698:	2308      	movs	r3, #8
 800669a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800669c:	23a8      	movs	r3, #168	; 0xa8
 800669e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066a0:	2302      	movs	r3, #2
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80066a4:	2304      	movs	r3, #4
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066a8:	f107 0320 	add.w	r3, r7, #32
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fdfb 	bl	80082a8 <HAL_RCC_OscConfig>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80066b8:	f000 f904 	bl	80068c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066bc:	230f      	movs	r3, #15
 80066be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066c0:	2302      	movs	r3, #2
 80066c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80066c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80066ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80066d4:	f107 030c 	add.w	r3, r7, #12
 80066d8:	2105      	movs	r1, #5
 80066da:	4618      	mov	r0, r3
 80066dc:	f002 f85c 	bl	8008798 <HAL_RCC_ClockConfig>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80066e6:	f000 f8ed 	bl	80068c4 <Error_Handler>
  }
}
 80066ea:	bf00      	nop
 80066ec:	3750      	adds	r7, #80	; 0x50
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40007000 	.word	0x40007000

080066fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006700:	4b17      	ldr	r3, [pc, #92]	; (8006760 <MX_CAN1_Init+0x64>)
 8006702:	4a18      	ldr	r2, [pc, #96]	; (8006764 <MX_CAN1_Init+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <MX_CAN1_Init+0x64>)
 8006708:	2215      	movs	r2, #21
 800670a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <MX_CAN1_Init+0x64>)
 800670e:	2200      	movs	r2, #0
 8006710:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <MX_CAN1_Init+0x64>)
 8006714:	2200      	movs	r2, #0
 8006716:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <MX_CAN1_Init+0x64>)
 800671a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800671e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <MX_CAN1_Init+0x64>)
 8006722:	2200      	movs	r2, #0
 8006724:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <MX_CAN1_Init+0x64>)
 8006728:	2200      	movs	r2, #0
 800672a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <MX_CAN1_Init+0x64>)
 800672e:	2200      	movs	r2, #0
 8006730:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006732:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <MX_CAN1_Init+0x64>)
 8006734:	2200      	movs	r2, #0
 8006736:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <MX_CAN1_Init+0x64>)
 800673a:	2200      	movs	r2, #0
 800673c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <MX_CAN1_Init+0x64>)
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <MX_CAN1_Init+0x64>)
 8006746:	2200      	movs	r2, #0
 8006748:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800674a:	4805      	ldr	r0, [pc, #20]	; (8006760 <MX_CAN1_Init+0x64>)
 800674c:	f000 fb80 	bl	8006e50 <HAL_CAN_Init>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8006756:	f000 f8b5 	bl	80068c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	2000026c 	.word	0x2000026c
 8006764:	40006400 	.word	0x40006400

08006768 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800676c:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <MX_TIM14_Init+0x40>)
 800676e:	4a0f      	ldr	r2, [pc, #60]	; (80067ac <MX_TIM14_Init+0x44>)
 8006770:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <MX_TIM14_Init+0x40>)
 8006774:	223f      	movs	r2, #63	; 0x3f
 8006776:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <MX_TIM14_Init+0x40>)
 800677a:	2200      	movs	r2, #0
 800677c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <MX_TIM14_Init+0x40>)
 8006780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006784:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006786:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <MX_TIM14_Init+0x40>)
 8006788:	2200      	movs	r2, #0
 800678a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <MX_TIM14_Init+0x40>)
 800678e:	2200      	movs	r2, #0
 8006790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006792:	4805      	ldr	r0, [pc, #20]	; (80067a8 <MX_TIM14_Init+0x40>)
 8006794:	f002 fa20 	bl	8008bd8 <HAL_TIM_Base_Init>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800679e:	f000 f891 	bl	80068c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000294 	.word	0x20000294
 80067ac:	40002000 	.word	0x40002000

080067b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80067b4:	4b11      	ldr	r3, [pc, #68]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <MX_USART2_UART_Init+0x50>)
 80067b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067c2:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067d6:	220c      	movs	r2, #12
 80067d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067e6:	4805      	ldr	r0, [pc, #20]	; (80067fc <MX_USART2_UART_Init+0x4c>)
 80067e8:	f002 fcca 	bl	8009180 <HAL_UART_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80067f2:	f000 f867 	bl	80068c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80067f6:	bf00      	nop
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200002dc 	.word	0x200002dc
 8006800:	40004400 	.word	0x40004400

08006804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	; 0x28
 8006808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	605a      	str	r2, [r3, #4]
 8006814:	609a      	str	r2, [r3, #8]
 8006816:	60da      	str	r2, [r3, #12]
 8006818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	4b27      	ldr	r3, [pc, #156]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	4a26      	ldr	r2, [pc, #152]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	6313      	str	r3, [r2, #48]	; 0x30
 800682a:	4b24      	ldr	r3, [pc, #144]	; (80068bc <MX_GPIO_Init+0xb8>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <MX_GPIO_Init+0xb8>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006840:	f043 0320 	orr.w	r3, r3, #32
 8006844:	6313      	str	r3, [r2, #48]	; 0x30
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	4a18      	ldr	r2, [pc, #96]	; (80068bc <MX_GPIO_Init+0xb8>)
 800685c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006860:	6313      	str	r3, [r2, #48]	; 0x30
 8006862:	4b16      	ldr	r3, [pc, #88]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	4a11      	ldr	r2, [pc, #68]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006878:	f043 0301 	orr.w	r3, r3, #1
 800687c:	6313      	str	r3, [r2, #48]	; 0x30
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <MX_GPIO_Init+0xb8>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, led2_Pin|led1_Pin, GPIO_PIN_RESET);
 800688a:	2200      	movs	r2, #0
 800688c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006890:	480b      	ldr	r0, [pc, #44]	; (80068c0 <MX_GPIO_Init+0xbc>)
 8006892:	f001 fcef 	bl	8008274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = led2_Pin|led1_Pin;
 8006896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800689a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800689c:	2301      	movs	r3, #1
 800689e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a4:	2300      	movs	r3, #0
 80068a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	4619      	mov	r1, r3
 80068ae:	4804      	ldr	r0, [pc, #16]	; (80068c0 <MX_GPIO_Init+0xbc>)
 80068b0:	f001 fb44 	bl	8007f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80068b4:	bf00      	nop
 80068b6:	3728      	adds	r7, #40	; 0x28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40023800 	.word	0x40023800
 80068c0:	40021400 	.word	0x40021400

080068c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80068c8:	b672      	cpsid	i
}
 80068ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80068cc:	e7fe      	b.n	80068cc <Error_Handler+0x8>
	...

080068d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	4b10      	ldr	r3, [pc, #64]	; (800691c <HAL_MspInit+0x4c>)
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	4a0f      	ldr	r2, [pc, #60]	; (800691c <HAL_MspInit+0x4c>)
 80068e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068e4:	6453      	str	r3, [r2, #68]	; 0x44
 80068e6:	4b0d      	ldr	r3, [pc, #52]	; (800691c <HAL_MspInit+0x4c>)
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068f2:	2300      	movs	r3, #0
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_MspInit+0x4c>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	4a08      	ldr	r2, [pc, #32]	; (800691c <HAL_MspInit+0x4c>)
 80068fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006900:	6413      	str	r3, [r2, #64]	; 0x40
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_MspInit+0x4c>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40023800 	.word	0x40023800

08006920 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	609a      	str	r2, [r3, #8]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a29      	ldr	r2, [pc, #164]	; (80069e4 <HAL_CAN_MspInit+0xc4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d14c      	bne.n	80069dc <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006942:	2300      	movs	r3, #0
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <HAL_CAN_MspInit+0xc8>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4a27      	ldr	r2, [pc, #156]	; (80069e8 <HAL_CAN_MspInit+0xc8>)
 800694c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
 8006952:	4b25      	ldr	r3, [pc, #148]	; (80069e8 <HAL_CAN_MspInit+0xc8>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	4b21      	ldr	r3, [pc, #132]	; (80069e8 <HAL_CAN_MspInit+0xc8>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	4a20      	ldr	r2, [pc, #128]	; (80069e8 <HAL_CAN_MspInit+0xc8>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6313      	str	r3, [r2, #48]	; 0x30
 800696e:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <HAL_CAN_MspInit+0xc8>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800697a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800697e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006980:	2302      	movs	r3, #2
 8006982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006988:	2303      	movs	r3, #3
 800698a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800698c:	2309      	movs	r3, #9
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	4619      	mov	r1, r3
 8006996:	4815      	ldr	r0, [pc, #84]	; (80069ec <HAL_CAN_MspInit+0xcc>)
 8006998:	f001 fad0 	bl	8007f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800699c:	2200      	movs	r2, #0
 800699e:	2100      	movs	r1, #0
 80069a0:	2013      	movs	r0, #19
 80069a2:	f001 f9fe 	bl	8007da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80069a6:	2013      	movs	r0, #19
 80069a8:	f001 fa17 	bl	8007dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2100      	movs	r1, #0
 80069b0:	2014      	movs	r0, #20
 80069b2:	f001 f9f6 	bl	8007da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80069b6:	2014      	movs	r0, #20
 80069b8:	f001 fa0f 	bl	8007dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80069bc:	2200      	movs	r2, #0
 80069be:	2100      	movs	r1, #0
 80069c0:	2015      	movs	r0, #21
 80069c2:	f001 f9ee 	bl	8007da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80069c6:	2015      	movs	r0, #21
 80069c8:	f001 fa07 	bl	8007dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	2016      	movs	r0, #22
 80069d2:	f001 f9e6 	bl	8007da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80069d6:	2016      	movs	r0, #22
 80069d8:	f001 f9ff 	bl	8007dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80069dc:	bf00      	nop
 80069de:	3728      	adds	r7, #40	; 0x28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40006400 	.word	0x40006400
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40020000 	.word	0x40020000

080069f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <HAL_TIM_Base_MspInit+0x48>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d115      	bne.n	8006a2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <HAL_TIM_Base_MspInit+0x4c>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <HAL_TIM_Base_MspInit+0x4c>)
 8006a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a10:	6413      	str	r3, [r2, #64]	; 0x40
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <HAL_TIM_Base_MspInit+0x4c>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	202d      	movs	r0, #45	; 0x2d
 8006a24:	f001 f9bd 	bl	8007da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006a28:	202d      	movs	r0, #45	; 0x2d
 8006a2a:	f001 f9d6 	bl	8007dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40002000 	.word	0x40002000
 8006a3c:	40023800 	.word	0x40023800

08006a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	609a      	str	r2, [r3, #8]
 8006a54:	60da      	str	r2, [r3, #12]
 8006a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <HAL_UART_MspInit+0x94>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d133      	bne.n	8006aca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a62:	2300      	movs	r3, #0
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <HAL_UART_MspInit+0x98>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <HAL_UART_MspInit+0x98>)
 8006a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a70:	6413      	str	r3, [r2, #64]	; 0x40
 8006a72:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <HAL_UART_MspInit+0x98>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <HAL_UART_MspInit+0x98>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <HAL_UART_MspInit+0x98>)
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <HAL_UART_MspInit+0x98>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006aaa:	2307      	movs	r3, #7
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aae:	f107 0314 	add.w	r3, r7, #20
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4809      	ldr	r0, [pc, #36]	; (8006adc <HAL_UART_MspInit+0x9c>)
 8006ab6:	f001 fa41 	bl	8007f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	2026      	movs	r0, #38	; 0x26
 8006ac0:	f001 f96f 	bl	8007da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006ac4:	2026      	movs	r0, #38	; 0x26
 8006ac6:	f001 f988 	bl	8007dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006aca:	bf00      	nop
 8006acc:	3728      	adds	r7, #40	; 0x28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40004400 	.word	0x40004400
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40020000 	.word	0x40020000

08006ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ae4:	e7fe      	b.n	8006ae4 <NMI_Handler+0x4>

08006ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006aea:	e7fe      	b.n	8006aea <HardFault_Handler+0x4>

08006aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006af0:	e7fe      	b.n	8006af0 <MemManage_Handler+0x4>

08006af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006af6:	e7fe      	b.n	8006af6 <BusFault_Handler+0x4>

08006af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006afc:	e7fe      	b.n	8006afc <UsageFault_Handler+0x4>

08006afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006afe:	b480      	push	{r7}
 8006b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b02:	bf00      	nop
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b10:	bf00      	nop
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b1e:	bf00      	nop
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b2c:	f000 f970 	bl	8006e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b30:	bf00      	nop
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006b38:	4802      	ldr	r0, [pc, #8]	; (8006b44 <CAN1_TX_IRQHandler+0x10>)
 8006b3a:	f000 fe3a 	bl	80077b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8006b3e:	bf00      	nop
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000026c 	.word	0x2000026c

08006b48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006b4c:	4802      	ldr	r0, [pc, #8]	; (8006b58 <CAN1_RX0_IRQHandler+0x10>)
 8006b4e:	f000 fe30 	bl	80077b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	2000026c 	.word	0x2000026c

08006b5c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006b60:	4802      	ldr	r0, [pc, #8]	; (8006b6c <CAN1_RX1_IRQHandler+0x10>)
 8006b62:	f000 fe26 	bl	80077b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000026c 	.word	0x2000026c

08006b70 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006b74:	4802      	ldr	r0, [pc, #8]	; (8006b80 <CAN1_SCE_IRQHandler+0x10>)
 8006b76:	f000 fe1c 	bl	80077b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	2000026c 	.word	0x2000026c

08006b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006b88:	4802      	ldr	r0, [pc, #8]	; (8006b94 <USART2_IRQHandler+0x10>)
 8006b8a:	f002 fbd9 	bl	8009340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200002dc 	.word	0x200002dc

08006b98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006b9c:	4802      	ldr	r0, [pc, #8]	; (8006ba8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8006b9e:	f002 f90a 	bl	8008db6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000294 	.word	0x20000294

08006bac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e00a      	b.n	8006bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006bbe:	f3af 8000 	nop.w
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	60ba      	str	r2, [r7, #8]
 8006bca:	b2ca      	uxtb	r2, r1
 8006bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	dbf0      	blt.n	8006bbe <_read+0x12>
  }

  return len;
 8006bdc:	687b      	ldr	r3, [r7, #4]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b086      	sub	sp, #24
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e009      	b.n	8006c0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	60ba      	str	r2, [r7, #8]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	dbf1      	blt.n	8006bf8 <_write+0x12>
  }
  return len;
 8006c14:	687b      	ldr	r3, [r7, #4]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <_close>:

int _close(int file)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c46:	605a      	str	r2, [r3, #4]
  return 0;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <_isatty>:

int _isatty(int file)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006c5e:	2301      	movs	r3, #1
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c90:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <_sbrk+0x5c>)
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <_sbrk+0x60>)
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <_sbrk+0x64>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ca4:	4b11      	ldr	r3, [pc, #68]	; (8006cec <_sbrk+0x64>)
 8006ca6:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <_sbrk+0x68>)
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006caa:	4b10      	ldr	r3, [pc, #64]	; (8006cec <_sbrk+0x64>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d207      	bcs.n	8006cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006cb8:	f003 fa7e 	bl	800a1b8 <__errno>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	220c      	movs	r2, #12
 8006cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc6:	e009      	b.n	8006cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <_sbrk+0x64>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <_sbrk+0x64>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4a05      	ldr	r2, [pc, #20]	; (8006cec <_sbrk+0x64>)
 8006cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cda:	68fb      	ldr	r3, [r7, #12]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20020000 	.word	0x20020000
 8006ce8:	00000400 	.word	0x00000400
 8006cec:	20000868 	.word	0x20000868
 8006cf0:	20000880 	.word	0x20000880

08006cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <SystemInit+0x20>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <SystemInit+0x20>)
 8006d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d08:	bf00      	nop
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	e000ed00 	.word	0xe000ed00

08006d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d1c:	480d      	ldr	r0, [pc, #52]	; (8006d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006d1e:	490e      	ldr	r1, [pc, #56]	; (8006d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006d20:	4a0e      	ldr	r2, [pc, #56]	; (8006d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d24:	e002      	b.n	8006d2c <LoopCopyDataInit>

08006d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d2a:	3304      	adds	r3, #4

08006d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d30:	d3f9      	bcc.n	8006d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d32:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006d34:	4c0b      	ldr	r4, [pc, #44]	; (8006d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d38:	e001      	b.n	8006d3e <LoopFillZerobss>

08006d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d3c:	3204      	adds	r2, #4

08006d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d40:	d3fb      	bcc.n	8006d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006d42:	f7ff ffd7 	bl	8006cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d46:	f003 fc07 	bl	800a558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d4a:	f7ff fbbf 	bl	80064cc <main>
  bx  lr    
 8006d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d58:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8006d5c:	0800bbc4 	.word	0x0800bbc4
  ldr r2, =_sbss
 8006d60:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8006d64:	20000880 	.word	0x20000880

08006d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d68:	e7fe      	b.n	8006d68 <ADC_IRQHandler>
	...

08006d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d70:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <HAL_Init+0x40>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <HAL_Init+0x40>)
 8006d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <HAL_Init+0x40>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <HAL_Init+0x40>)
 8006d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <HAL_Init+0x40>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a07      	ldr	r2, [pc, #28]	; (8006dac <HAL_Init+0x40>)
 8006d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d94:	2003      	movs	r0, #3
 8006d96:	f000 fff9 	bl	8007d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d9a:	200f      	movs	r0, #15
 8006d9c:	f000 f808 	bl	8006db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006da0:	f7ff fd96 	bl	80068d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40023c00 	.word	0x40023c00

08006db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006db8:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <HAL_InitTick+0x54>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <HAL_InitTick+0x58>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 f815 	bl	8007dfe <HAL_SYSTICK_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e00e      	b.n	8006dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d80a      	bhi.n	8006dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006de4:	2200      	movs	r2, #0
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	f000 ffd9 	bl	8007da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006df0:	4a06      	ldr	r2, [pc, #24]	; (8006e0c <HAL_InitTick+0x5c>)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e000      	b.n	8006dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000194 	.word	0x20000194
 8006e08:	2000019c 	.word	0x2000019c
 8006e0c:	20000198 	.word	0x20000198

08006e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_IncTick+0x20>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <HAL_IncTick+0x24>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4413      	add	r3, r2
 8006e20:	4a04      	ldr	r2, [pc, #16]	; (8006e34 <HAL_IncTick+0x24>)
 8006e22:	6013      	str	r3, [r2, #0]
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	2000019c 	.word	0x2000019c
 8006e34:	2000086c 	.word	0x2000086c

08006e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006e3c:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <HAL_GetTick+0x14>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	2000086c 	.word	0x2000086c

08006e50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e0ed      	b.n	800703e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fd56 	bl	8006920 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e84:	f7ff ffd8 	bl	8006e38 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e8a:	e012      	b.n	8006eb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e8c:	f7ff ffd4 	bl	8006e38 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b0a      	cmp	r3, #10
 8006e98:	d90b      	bls.n	8006eb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e0c5      	b.n	800703e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0e5      	beq.n	8006e8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0202 	bic.w	r2, r2, #2
 8006ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ed0:	f7ff ffb2 	bl	8006e38 <HAL_GetTick>
 8006ed4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ed6:	e012      	b.n	8006efe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ed8:	f7ff ffae 	bl	8006e38 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b0a      	cmp	r3, #10
 8006ee4:	d90b      	bls.n	8006efe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2205      	movs	r2, #5
 8006ef6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e09f      	b.n	800703e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7e1b      	ldrb	r3, [r3, #24]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d108      	bne.n	8006f26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e007      	b.n	8006f36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7e5b      	ldrb	r3, [r3, #25]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d108      	bne.n	8006f50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e007      	b.n	8006f60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7e9b      	ldrb	r3, [r3, #26]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d108      	bne.n	8006f7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0220 	orr.w	r2, r2, #32
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e007      	b.n	8006f8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0220 	bic.w	r2, r2, #32
 8006f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7edb      	ldrb	r3, [r3, #27]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d108      	bne.n	8006fa4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0210 	bic.w	r2, r2, #16
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e007      	b.n	8006fb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0210 	orr.w	r2, r2, #16
 8006fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7f1b      	ldrb	r3, [r3, #28]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d108      	bne.n	8006fce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e007      	b.n	8006fde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0208 	bic.w	r2, r2, #8
 8006fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7f5b      	ldrb	r3, [r3, #29]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d108      	bne.n	8006ff8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0204 	orr.w	r2, r2, #4
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e007      	b.n	8007008 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0204 	bic.w	r2, r2, #4
 8007006:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	ea42 0103 	orr.w	r1, r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	1e5a      	subs	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800705e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007060:	7cfb      	ldrb	r3, [r7, #19]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d003      	beq.n	800706e <HAL_CAN_ConfigFilter+0x26>
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	2b02      	cmp	r3, #2
 800706a:	f040 80be 	bne.w	80071ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800706e:	4b65      	ldr	r3, [pc, #404]	; (8007204 <HAL_CAN_ConfigFilter+0x1bc>)
 8007070:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007088:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	431a      	orrs	r2, r3
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2201      	movs	r2, #1
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	43db      	mvns	r3, r3
 80070c0:	401a      	ands	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d123      	bne.n	8007118 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	43db      	mvns	r3, r3
 80070da:	401a      	ands	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	3248      	adds	r2, #72	; 0x48
 80070f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800710c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800710e:	6979      	ldr	r1, [r7, #20]
 8007110:	3348      	adds	r3, #72	; 0x48
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	440b      	add	r3, r1
 8007116:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d122      	bne.n	8007166 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	431a      	orrs	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007140:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	3248      	adds	r2, #72	; 0x48
 8007146:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800715a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800715c:	6979      	ldr	r1, [r7, #20]
 800715e:	3348      	adds	r3, #72	; 0x48
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	440b      	add	r3, r1
 8007164:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	43db      	mvns	r3, r3
 8007178:	401a      	ands	r2, r3
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007180:	e007      	b.n	8007192 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	431a      	orrs	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	43db      	mvns	r3, r3
 80071a4:	401a      	ands	r2, r3
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80071ac:	e007      	b.n	80071be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d107      	bne.n	80071d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071dc:	f023 0201 	bic.w	r2, r3, #1
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e006      	b.n	80071f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
  }
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	40006400 	.word	0x40006400

08007208 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d12e      	bne.n	800727a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007234:	f7ff fe00 	bl	8006e38 <HAL_GetTick>
 8007238:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800723a:	e012      	b.n	8007262 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800723c:	f7ff fdfc 	bl	8006e38 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b0a      	cmp	r3, #10
 8007248:	d90b      	bls.n	8007262 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2205      	movs	r2, #5
 800725a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e012      	b.n	8007288 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e5      	bne.n	800723c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e006      	b.n	8007288 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d133      	bne.n	800730c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072b4:	f7ff fdc0 	bl	8006e38 <HAL_GetTick>
 80072b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80072ba:	e012      	b.n	80072e2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80072bc:	f7ff fdbc 	bl	8006e38 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b0a      	cmp	r3, #10
 80072c8:	d90b      	bls.n	80072e2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2205      	movs	r2, #5
 80072da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e01b      	b.n	800731a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0e5      	beq.n	80072bc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0202 	bic.w	r2, r2, #2
 80072fe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e006      	b.n	800731a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
  }
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007322:	b480      	push	{r7}
 8007324:	b089      	sub	sp, #36	; 0x24
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007336:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007340:	7ffb      	ldrb	r3, [r7, #31]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d003      	beq.n	800734e <HAL_CAN_AddTxMessage+0x2c>
 8007346:	7ffb      	ldrb	r3, [r7, #31]
 8007348:	2b02      	cmp	r3, #2
 800734a:	f040 80b8 	bne.w	80074be <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80a0 	beq.w	80074ae <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	0e1b      	lsrs	r3, r3, #24
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d907      	bls.n	800738e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e09e      	b.n	80074cc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800738e:	2201      	movs	r2, #1
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	409a      	lsls	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10d      	bne.n	80073bc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	6809      	ldr	r1, [r1, #0]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3318      	adds	r3, #24
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	440b      	add	r3, r1
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	e00f      	b.n	80073dc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80073d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3318      	adds	r3, #24
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	440b      	add	r3, r1
 80073da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6819      	ldr	r1, [r3, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	3318      	adds	r3, #24
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	440b      	add	r3, r1
 80073ec:	3304      	adds	r3, #4
 80073ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	7d1b      	ldrb	r3, [r3, #20]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d111      	bne.n	800741c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	3318      	adds	r3, #24
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	4413      	add	r3, r2
 8007404:	3304      	adds	r3, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	6811      	ldr	r1, [r2, #0]
 800740c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	3318      	adds	r3, #24
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	440b      	add	r3, r1
 8007418:	3304      	adds	r3, #4
 800741a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3307      	adds	r3, #7
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	061a      	lsls	r2, r3, #24
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3306      	adds	r3, #6
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	041b      	lsls	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3305      	adds	r3, #5
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	4313      	orrs	r3, r2
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	3204      	adds	r2, #4
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	4610      	mov	r0, r2
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	6811      	ldr	r1, [r2, #0]
 8007444:	ea43 0200 	orr.w	r2, r3, r0
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	440b      	add	r3, r1
 800744e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007452:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3303      	adds	r3, #3
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	061a      	lsls	r2, r3, #24
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3302      	adds	r3, #2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3301      	adds	r3, #1
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	4313      	orrs	r3, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	4610      	mov	r0, r2
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	6811      	ldr	r1, [r2, #0]
 800747a:	ea43 0200 	orr.w	r2, r3, r0
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	440b      	add	r3, r1
 8007484:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007488:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3318      	adds	r3, #24
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	4413      	add	r3, r2
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	6811      	ldr	r1, [r2, #0]
 800749c:	f043 0201 	orr.w	r2, r3, #1
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	3318      	adds	r3, #24
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	440b      	add	r3, r1
 80074a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e00e      	b.n	80074cc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e006      	b.n	80074cc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
  }
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3724      	adds	r7, #36	; 0x24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074ea:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d002      	beq.n	80074f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d11d      	bne.n	8007534 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007542:	b480      	push	{r7}
 8007544:	b087      	sub	sp, #28
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007556:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d003      	beq.n	8007566 <HAL_CAN_GetRxMessage+0x24>
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2b02      	cmp	r3, #2
 8007562:	f040 80f3 	bne.w	800774c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10e      	bne.n	800758a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d116      	bne.n	80075a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e0e7      	b.n	800775a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d107      	bne.n	80075a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0d8      	b.n	800775a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	331b      	adds	r3, #27
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4413      	add	r3, r2
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0204 	and.w	r2, r3, #4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10c      	bne.n	80075e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	331b      	adds	r3, #27
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	4413      	add	r3, r2
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	0d5b      	lsrs	r3, r3, #21
 80075d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e00b      	b.n	80075f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	331b      	adds	r3, #27
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	4413      	add	r3, r2
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	331b      	adds	r3, #27
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	4413      	add	r3, r2
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0202 	and.w	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	331b      	adds	r3, #27
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	4413      	add	r3, r2
 800761a:	3304      	adds	r3, #4
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 020f 	and.w	r2, r3, #15
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	331b      	adds	r3, #27
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	4413      	add	r3, r2
 8007632:	3304      	adds	r3, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	b2da      	uxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	331b      	adds	r3, #27
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	4413      	add	r3, r2
 800764a:	3304      	adds	r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	4413      	add	r3, r2
 8007660:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	4413      	add	r3, r2
 8007676:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	0a1a      	lsrs	r2, r3, #8
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	4413      	add	r3, r2
 8007690:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	0c1a      	lsrs	r2, r3, #16
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	3302      	adds	r3, #2
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	0e1a      	lsrs	r2, r3, #24
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	3303      	adds	r3, #3
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	3304      	adds	r3, #4
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	4413      	add	r3, r2
 80076dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	0a1a      	lsrs	r2, r3, #8
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	3305      	adds	r3, #5
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0c1a      	lsrs	r2, r3, #16
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	3306      	adds	r3, #6
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	4413      	add	r3, r2
 8007710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	0e1a      	lsrs	r2, r3, #24
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	3307      	adds	r3, #7
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d108      	bne.n	8007738 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0220 	orr.w	r2, r2, #32
 8007734:	60da      	str	r2, [r3, #12]
 8007736:	e007      	b.n	8007748 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0220 	orr.w	r2, r2, #32
 8007746:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	e006      	b.n	800775a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
  }
}
 800775a:	4618      	mov	r0, r3
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007776:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d002      	beq.n	8007784 <HAL_CAN_ActivateNotification+0x1e>
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d109      	bne.n	8007798 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6959      	ldr	r1, [r3, #20]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	e006      	b.n	80077a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b08a      	sub	sp, #40	; 0x28
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d07c      	beq.n	80078f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d023      	beq.n	800784a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2201      	movs	r2, #1
 8007808:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fe fdb1 	bl	800637c <HAL_CAN_TxMailbox0CompleteCallback>
 800781a:	e016      	b.n	800784a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
 800782e:	e00c      	b.n	800784a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
 8007842:	e002      	b.n	800784a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f96b 	bl	8007b20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d024      	beq.n	800789e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800785c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe fd97 	bl	800639c <HAL_CAN_TxMailbox1CompleteCallback>
 800786e:	e016      	b.n	800789e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
 8007882:	e00c      	b.n	800789e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
 8007896:	e002      	b.n	800789e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f94b 	bl	8007b34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d024      	beq.n	80078f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fe fd7d 	bl	80063bc <HAL_CAN_TxMailbox2CompleteCallback>
 80078c2:	e016      	b.n	80078f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
 80078d6:	e00c      	b.n	80078f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ea:	e002      	b.n	80078f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f92b 	bl	8007b48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00c      	beq.n	8007916 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800790c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2210      	movs	r2, #16
 8007914:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2208      	movs	r2, #8
 8007930:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f912 	bl	8007b5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fe fca7 	bl	80062a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00c      	beq.n	800797a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007970:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2210      	movs	r2, #16
 8007978:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d006      	beq.n	800799c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2208      	movs	r2, #8
 8007994:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f8ea 	bl	8007b70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fe fc82 	bl	80062be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d006      	beq.n	80079dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2210      	movs	r2, #16
 80079d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8d4 	bl	8007b84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f003 0308 	and.w	r3, r3, #8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2208      	movs	r2, #8
 80079f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f8cd 	bl	8007b98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d07b      	beq.n	8007b00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d072      	beq.n	8007af8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	f043 0302 	orr.w	r3, r3, #2
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	f043 0304 	orr.w	r3, r3, #4
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d043      	beq.n	8007af8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d03e      	beq.n	8007af8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a80:	2b60      	cmp	r3, #96	; 0x60
 8007a82:	d02b      	beq.n	8007adc <HAL_CAN_IRQHandler+0x32a>
 8007a84:	2b60      	cmp	r3, #96	; 0x60
 8007a86:	d82e      	bhi.n	8007ae6 <HAL_CAN_IRQHandler+0x334>
 8007a88:	2b50      	cmp	r3, #80	; 0x50
 8007a8a:	d022      	beq.n	8007ad2 <HAL_CAN_IRQHandler+0x320>
 8007a8c:	2b50      	cmp	r3, #80	; 0x50
 8007a8e:	d82a      	bhi.n	8007ae6 <HAL_CAN_IRQHandler+0x334>
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d019      	beq.n	8007ac8 <HAL_CAN_IRQHandler+0x316>
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d826      	bhi.n	8007ae6 <HAL_CAN_IRQHandler+0x334>
 8007a98:	2b30      	cmp	r3, #48	; 0x30
 8007a9a:	d010      	beq.n	8007abe <HAL_CAN_IRQHandler+0x30c>
 8007a9c:	2b30      	cmp	r3, #48	; 0x30
 8007a9e:	d822      	bhi.n	8007ae6 <HAL_CAN_IRQHandler+0x334>
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d002      	beq.n	8007aaa <HAL_CAN_IRQHandler+0x2f8>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d005      	beq.n	8007ab4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007aa8:	e01d      	b.n	8007ae6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	f043 0308 	orr.w	r3, r3, #8
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ab2:	e019      	b.n	8007ae8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	f043 0310 	orr.w	r3, r3, #16
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007abc:	e014      	b.n	8007ae8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	f043 0320 	orr.w	r3, r3, #32
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ac6:	e00f      	b.n	8007ae8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ad0:	e00a      	b.n	8007ae8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ada:	e005      	b.n	8007ae8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ae4:	e000      	b.n	8007ae8 <HAL_CAN_IRQHandler+0x336>
            break;
 8007ae6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699a      	ldr	r2, [r3, #24]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007af6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2204      	movs	r2, #4
 8007afe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f84a 	bl	8007bac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3728      	adds	r7, #40	; 0x28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <__NVIC_SetPriorityGrouping+0x44>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bf2:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <__NVIC_SetPriorityGrouping+0x44>)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	60d3      	str	r3, [r2, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	e000ed00 	.word	0xe000ed00

08007c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <__NVIC_GetPriorityGrouping+0x18>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	0a1b      	lsrs	r3, r3, #8
 8007c12:	f003 0307 	and.w	r3, r3, #7
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	e000ed00 	.word	0xe000ed00

08007c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	db0b      	blt.n	8007c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	f003 021f 	and.w	r2, r3, #31
 8007c3c:	4907      	ldr	r1, [pc, #28]	; (8007c5c <__NVIC_EnableIRQ+0x38>)
 8007c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	2001      	movs	r0, #1
 8007c46:	fa00 f202 	lsl.w	r2, r0, r2
 8007c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	e000e100 	.word	0xe000e100

08007c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	6039      	str	r1, [r7, #0]
 8007c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db0a      	blt.n	8007c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	490c      	ldr	r1, [pc, #48]	; (8007cac <__NVIC_SetPriority+0x4c>)
 8007c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7e:	0112      	lsls	r2, r2, #4
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	440b      	add	r3, r1
 8007c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c88:	e00a      	b.n	8007ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	4908      	ldr	r1, [pc, #32]	; (8007cb0 <__NVIC_SetPriority+0x50>)
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	3b04      	subs	r3, #4
 8007c98:	0112      	lsls	r2, r2, #4
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	761a      	strb	r2, [r3, #24]
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	e000e100 	.word	0xe000e100
 8007cb0:	e000ed00 	.word	0xe000ed00

08007cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b089      	sub	sp, #36	; 0x24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f1c3 0307 	rsb	r3, r3, #7
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	bf28      	it	cs
 8007cd2:	2304      	movcs	r3, #4
 8007cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2b06      	cmp	r3, #6
 8007cdc:	d902      	bls.n	8007ce4 <NVIC_EncodePriority+0x30>
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	3b03      	subs	r3, #3
 8007ce2:	e000      	b.n	8007ce6 <NVIC_EncodePriority+0x32>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	401a      	ands	r2, r3
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	fa01 f303 	lsl.w	r3, r1, r3
 8007d06:	43d9      	mvns	r1, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d0c:	4313      	orrs	r3, r2
         );
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3724      	adds	r7, #36	; 0x24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007d20:	f3bf 8f4f 	dsb	sy
}
 8007d24:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007d26:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <__NVIC_SystemReset+0x24>)
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007d2e:	4904      	ldr	r1, [pc, #16]	; (8007d40 <__NVIC_SystemReset+0x24>)
 8007d30:	4b04      	ldr	r3, [pc, #16]	; (8007d44 <__NVIC_SystemReset+0x28>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d36:	f3bf 8f4f 	dsb	sy
}
 8007d3a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007d3c:	bf00      	nop
 8007d3e:	e7fd      	b.n	8007d3c <__NVIC_SystemReset+0x20>
 8007d40:	e000ed00 	.word	0xe000ed00
 8007d44:	05fa0004 	.word	0x05fa0004

08007d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d58:	d301      	bcc.n	8007d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e00f      	b.n	8007d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d5e:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <SysTick_Config+0x40>)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d66:	210f      	movs	r1, #15
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	f7ff ff78 	bl	8007c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <SysTick_Config+0x40>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d76:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <SysTick_Config+0x40>)
 8007d78:	2207      	movs	r2, #7
 8007d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	e000e010 	.word	0xe000e010

08007d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff ff13 	bl	8007bc0 <__NVIC_SetPriorityGrouping>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	4603      	mov	r3, r0
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007db4:	f7ff ff28 	bl	8007c08 <__NVIC_GetPriorityGrouping>
 8007db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	6978      	ldr	r0, [r7, #20]
 8007dc0:	f7ff ff78 	bl	8007cb4 <NVIC_EncodePriority>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ff47 	bl	8007c60 <__NVIC_SetPriority>
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	4603      	mov	r3, r0
 8007de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff ff1b 	bl	8007c24 <__NVIC_EnableIRQ>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007dfa:	f7ff ff8f 	bl	8007d1c <__NVIC_SystemReset>

08007dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff ff9e 	bl	8007d48 <SysTick_Config>
 8007e0c:	4603      	mov	r3, r0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e24:	f7ff f808 	bl	8006e38 <HAL_GetTick>
 8007e28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d008      	beq.n	8007e48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2280      	movs	r2, #128	; 0x80
 8007e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e052      	b.n	8007eee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0216 	bic.w	r2, r2, #22
 8007e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695a      	ldr	r2, [r3, #20]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d103      	bne.n	8007e78 <HAL_DMA_Abort+0x62>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0208 	bic.w	r2, r2, #8
 8007e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0201 	bic.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e98:	e013      	b.n	8007ec2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e9a:	f7fe ffcd 	bl	8006e38 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d90c      	bls.n	8007ec2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e015      	b.n	8007eee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e4      	bne.n	8007e9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed4:	223f      	movs	r2, #63	; 0x3f
 8007ed6:	409a      	lsls	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d004      	beq.n	8007f14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2280      	movs	r2, #128	; 0x80
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e00c      	b.n	8007f2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2205      	movs	r2, #5
 8007f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0201 	bic.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	e16b      	b.n	8008230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f58:	2201      	movs	r2, #1
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	f040 815a 	bne.w	800822a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d005      	beq.n	8007f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d130      	bne.n	8007ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	2203      	movs	r2, #3
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	f003 0201 	and.w	r2, r3, #1
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d017      	beq.n	800802c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	2203      	movs	r2, #3
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d123      	bne.n	8008080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	08da      	lsrs	r2, r3, #3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3208      	adds	r2, #8
 8008040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	220f      	movs	r2, #15
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	43db      	mvns	r3, r3
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	4013      	ands	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4313      	orrs	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	08da      	lsrs	r2, r3, #3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3208      	adds	r2, #8
 800807a:	69b9      	ldr	r1, [r7, #24]
 800807c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	2203      	movs	r2, #3
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	43db      	mvns	r3, r3
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	4013      	ands	r3, r2
 8008096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 0203 	and.w	r2, r3, #3
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80b4 	beq.w	800822a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	4b60      	ldr	r3, [pc, #384]	; (8008248 <HAL_GPIO_Init+0x30c>)
 80080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ca:	4a5f      	ldr	r2, [pc, #380]	; (8008248 <HAL_GPIO_Init+0x30c>)
 80080cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080d0:	6453      	str	r3, [r2, #68]	; 0x44
 80080d2:	4b5d      	ldr	r3, [pc, #372]	; (8008248 <HAL_GPIO_Init+0x30c>)
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080de:	4a5b      	ldr	r2, [pc, #364]	; (800824c <HAL_GPIO_Init+0x310>)
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	089b      	lsrs	r3, r3, #2
 80080e4:	3302      	adds	r3, #2
 80080e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	220f      	movs	r2, #15
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	43db      	mvns	r3, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a52      	ldr	r2, [pc, #328]	; (8008250 <HAL_GPIO_Init+0x314>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d02b      	beq.n	8008162 <HAL_GPIO_Init+0x226>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a51      	ldr	r2, [pc, #324]	; (8008254 <HAL_GPIO_Init+0x318>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d025      	beq.n	800815e <HAL_GPIO_Init+0x222>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a50      	ldr	r2, [pc, #320]	; (8008258 <HAL_GPIO_Init+0x31c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01f      	beq.n	800815a <HAL_GPIO_Init+0x21e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a4f      	ldr	r2, [pc, #316]	; (800825c <HAL_GPIO_Init+0x320>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d019      	beq.n	8008156 <HAL_GPIO_Init+0x21a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a4e      	ldr	r2, [pc, #312]	; (8008260 <HAL_GPIO_Init+0x324>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_GPIO_Init+0x216>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a4d      	ldr	r2, [pc, #308]	; (8008264 <HAL_GPIO_Init+0x328>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00d      	beq.n	800814e <HAL_GPIO_Init+0x212>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a4c      	ldr	r2, [pc, #304]	; (8008268 <HAL_GPIO_Init+0x32c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <HAL_GPIO_Init+0x20e>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a4b      	ldr	r2, [pc, #300]	; (800826c <HAL_GPIO_Init+0x330>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d101      	bne.n	8008146 <HAL_GPIO_Init+0x20a>
 8008142:	2307      	movs	r3, #7
 8008144:	e00e      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008146:	2308      	movs	r3, #8
 8008148:	e00c      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800814a:	2306      	movs	r3, #6
 800814c:	e00a      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800814e:	2305      	movs	r3, #5
 8008150:	e008      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008152:	2304      	movs	r3, #4
 8008154:	e006      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008156:	2303      	movs	r3, #3
 8008158:	e004      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800815a:	2302      	movs	r3, #2
 800815c:	e002      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008162:	2300      	movs	r3, #0
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	f002 0203 	and.w	r2, r2, #3
 800816a:	0092      	lsls	r2, r2, #2
 800816c:	4093      	lsls	r3, r2
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	4313      	orrs	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008174:	4935      	ldr	r1, [pc, #212]	; (800824c <HAL_GPIO_Init+0x310>)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	089b      	lsrs	r3, r3, #2
 800817a:	3302      	adds	r3, #2
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008182:	4b3b      	ldr	r3, [pc, #236]	; (8008270 <HAL_GPIO_Init+0x334>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	43db      	mvns	r3, r3
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	4013      	ands	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081a6:	4a32      	ldr	r2, [pc, #200]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081ac:	4b30      	ldr	r3, [pc, #192]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	43db      	mvns	r3, r3
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	4013      	ands	r3, r2
 80081ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081d0:	4a27      	ldr	r2, [pc, #156]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80081d6:	4b26      	ldr	r3, [pc, #152]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	43db      	mvns	r3, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081fa:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <HAL_GPIO_Init+0x334>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	43db      	mvns	r3, r3
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	4013      	ands	r3, r2
 800820e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008224:	4a12      	ldr	r2, [pc, #72]	; (8008270 <HAL_GPIO_Init+0x334>)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	3301      	adds	r3, #1
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	f67f ae90 	bls.w	8007f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	3724      	adds	r7, #36	; 0x24
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40023800 	.word	0x40023800
 800824c:	40013800 	.word	0x40013800
 8008250:	40020000 	.word	0x40020000
 8008254:	40020400 	.word	0x40020400
 8008258:	40020800 	.word	0x40020800
 800825c:	40020c00 	.word	0x40020c00
 8008260:	40021000 	.word	0x40021000
 8008264:	40021400 	.word	0x40021400
 8008268:	40021800 	.word	0x40021800
 800826c:	40021c00 	.word	0x40021c00
 8008270:	40013c00 	.word	0x40013c00

08008274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	807b      	strh	r3, [r7, #2]
 8008280:	4613      	mov	r3, r2
 8008282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008284:	787b      	ldrb	r3, [r7, #1]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800828a:	887a      	ldrh	r2, [r7, #2]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008290:	e003      	b.n	800829a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	041a      	lsls	r2, r3, #16
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	619a      	str	r2, [r3, #24]
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e267      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d075      	beq.n	80083b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082c6:	4b88      	ldr	r3, [pc, #544]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 030c 	and.w	r3, r3, #12
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d00c      	beq.n	80082ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082d2:	4b85      	ldr	r3, [pc, #532]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082da:	2b08      	cmp	r3, #8
 80082dc:	d112      	bne.n	8008304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082de:	4b82      	ldr	r3, [pc, #520]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082ea:	d10b      	bne.n	8008304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ec:	4b7e      	ldr	r3, [pc, #504]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d05b      	beq.n	80083b0 <HAL_RCC_OscConfig+0x108>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d157      	bne.n	80083b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e242      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800830c:	d106      	bne.n	800831c <HAL_RCC_OscConfig+0x74>
 800830e:	4b76      	ldr	r3, [pc, #472]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a75      	ldr	r2, [pc, #468]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	e01d      	b.n	8008358 <HAL_RCC_OscConfig+0xb0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008324:	d10c      	bne.n	8008340 <HAL_RCC_OscConfig+0x98>
 8008326:	4b70      	ldr	r3, [pc, #448]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a6f      	ldr	r2, [pc, #444]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 800832c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	4b6d      	ldr	r3, [pc, #436]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a6c      	ldr	r2, [pc, #432]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	e00b      	b.n	8008358 <HAL_RCC_OscConfig+0xb0>
 8008340:	4b69      	ldr	r3, [pc, #420]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a68      	ldr	r2, [pc, #416]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	4b66      	ldr	r3, [pc, #408]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a65      	ldr	r2, [pc, #404]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d013      	beq.n	8008388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008360:	f7fe fd6a 	bl	8006e38 <HAL_GetTick>
 8008364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008368:	f7fe fd66 	bl	8006e38 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b64      	cmp	r3, #100	; 0x64
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e207      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800837a:	4b5b      	ldr	r3, [pc, #364]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <HAL_RCC_OscConfig+0xc0>
 8008386:	e014      	b.n	80083b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008388:	f7fe fd56 	bl	8006e38 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008390:	f7fe fd52 	bl	8006e38 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b64      	cmp	r3, #100	; 0x64
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e1f3      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083a2:	4b51      	ldr	r3, [pc, #324]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1f0      	bne.n	8008390 <HAL_RCC_OscConfig+0xe8>
 80083ae:	e000      	b.n	80083b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d063      	beq.n	8008486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083be:	4b4a      	ldr	r3, [pc, #296]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 030c 	and.w	r3, r3, #12
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083ca:	4b47      	ldr	r3, [pc, #284]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d11c      	bne.n	8008410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083d6:	4b44      	ldr	r3, [pc, #272]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d116      	bne.n	8008410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083e2:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <HAL_RCC_OscConfig+0x152>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d001      	beq.n	80083fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e1c7      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083fa:	4b3b      	ldr	r3, [pc, #236]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4937      	ldr	r1, [pc, #220]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 800840a:	4313      	orrs	r3, r2
 800840c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800840e:	e03a      	b.n	8008486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d020      	beq.n	800845a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008418:	4b34      	ldr	r3, [pc, #208]	; (80084ec <HAL_RCC_OscConfig+0x244>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841e:	f7fe fd0b 	bl	8006e38 <HAL_GetTick>
 8008422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008424:	e008      	b.n	8008438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008426:	f7fe fd07 	bl	8006e38 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e1a8      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008438:	4b2b      	ldr	r3, [pc, #172]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0f0      	beq.n	8008426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008444:	4b28      	ldr	r3, [pc, #160]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	4925      	ldr	r1, [pc, #148]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 8008454:	4313      	orrs	r3, r2
 8008456:	600b      	str	r3, [r1, #0]
 8008458:	e015      	b.n	8008486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800845a:	4b24      	ldr	r3, [pc, #144]	; (80084ec <HAL_RCC_OscConfig+0x244>)
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008460:	f7fe fcea 	bl	8006e38 <HAL_GetTick>
 8008464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008468:	f7fe fce6 	bl	8006e38 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e187      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1f0      	bne.n	8008468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d036      	beq.n	8008500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d016      	beq.n	80084c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <HAL_RCC_OscConfig+0x248>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a0:	f7fe fcca 	bl	8006e38 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084a8:	f7fe fcc6 	bl	8006e38 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e167      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <HAL_RCC_OscConfig+0x240>)
 80084bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0f0      	beq.n	80084a8 <HAL_RCC_OscConfig+0x200>
 80084c6:	e01b      	b.n	8008500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c8:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <HAL_RCC_OscConfig+0x248>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084ce:	f7fe fcb3 	bl	8006e38 <HAL_GetTick>
 80084d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084d4:	e00e      	b.n	80084f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084d6:	f7fe fcaf 	bl	8006e38 <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d907      	bls.n	80084f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e150      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
 80084e8:	40023800 	.word	0x40023800
 80084ec:	42470000 	.word	0x42470000
 80084f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084f4:	4b88      	ldr	r3, [pc, #544]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80084f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1ea      	bne.n	80084d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8097 	beq.w	800863c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800850e:	2300      	movs	r3, #0
 8008510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008512:	4b81      	ldr	r3, [pc, #516]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10f      	bne.n	800853e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	4b7d      	ldr	r3, [pc, #500]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	4a7c      	ldr	r2, [pc, #496]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800852c:	6413      	str	r3, [r2, #64]	; 0x40
 800852e:	4b7a      	ldr	r3, [pc, #488]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800853e:	4b77      	ldr	r3, [pc, #476]	; (800871c <HAL_RCC_OscConfig+0x474>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d118      	bne.n	800857c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800854a:	4b74      	ldr	r3, [pc, #464]	; (800871c <HAL_RCC_OscConfig+0x474>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a73      	ldr	r2, [pc, #460]	; (800871c <HAL_RCC_OscConfig+0x474>)
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008556:	f7fe fc6f 	bl	8006e38 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800855e:	f7fe fc6b 	bl	8006e38 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e10c      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008570:	4b6a      	ldr	r3, [pc, #424]	; (800871c <HAL_RCC_OscConfig+0x474>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d106      	bne.n	8008592 <HAL_RCC_OscConfig+0x2ea>
 8008584:	4b64      	ldr	r3, [pc, #400]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008588:	4a63      	ldr	r2, [pc, #396]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	6713      	str	r3, [r2, #112]	; 0x70
 8008590:	e01c      	b.n	80085cc <HAL_RCC_OscConfig+0x324>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b05      	cmp	r3, #5
 8008598:	d10c      	bne.n	80085b4 <HAL_RCC_OscConfig+0x30c>
 800859a:	4b5f      	ldr	r3, [pc, #380]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	4a5e      	ldr	r2, [pc, #376]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085a0:	f043 0304 	orr.w	r3, r3, #4
 80085a4:	6713      	str	r3, [r2, #112]	; 0x70
 80085a6:	4b5c      	ldr	r3, [pc, #368]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085aa:	4a5b      	ldr	r2, [pc, #364]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	6713      	str	r3, [r2, #112]	; 0x70
 80085b2:	e00b      	b.n	80085cc <HAL_RCC_OscConfig+0x324>
 80085b4:	4b58      	ldr	r3, [pc, #352]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b8:	4a57      	ldr	r2, [pc, #348]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085ba:	f023 0301 	bic.w	r3, r3, #1
 80085be:	6713      	str	r3, [r2, #112]	; 0x70
 80085c0:	4b55      	ldr	r3, [pc, #340]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c4:	4a54      	ldr	r2, [pc, #336]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085c6:	f023 0304 	bic.w	r3, r3, #4
 80085ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d015      	beq.n	8008600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d4:	f7fe fc30 	bl	8006e38 <HAL_GetTick>
 80085d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085da:	e00a      	b.n	80085f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085dc:	f7fe fc2c 	bl	8006e38 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e0cb      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f2:	4b49      	ldr	r3, [pc, #292]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0ee      	beq.n	80085dc <HAL_RCC_OscConfig+0x334>
 80085fe:	e014      	b.n	800862a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008600:	f7fe fc1a 	bl	8006e38 <HAL_GetTick>
 8008604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008606:	e00a      	b.n	800861e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008608:	f7fe fc16 	bl	8006e38 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	f241 3288 	movw	r2, #5000	; 0x1388
 8008616:	4293      	cmp	r3, r2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e0b5      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800861e:	4b3e      	ldr	r3, [pc, #248]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1ee      	bne.n	8008608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d105      	bne.n	800863c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008630:	4b39      	ldr	r3, [pc, #228]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	4a38      	ldr	r2, [pc, #224]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800863a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 80a1 	beq.w	8008788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008646:	4b34      	ldr	r3, [pc, #208]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
 800864e:	2b08      	cmp	r3, #8
 8008650:	d05c      	beq.n	800870c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d141      	bne.n	80086de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800865a:	4b31      	ldr	r3, [pc, #196]	; (8008720 <HAL_RCC_OscConfig+0x478>)
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008660:	f7fe fbea 	bl	8006e38 <HAL_GetTick>
 8008664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008666:	e008      	b.n	800867a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008668:	f7fe fbe6 	bl	8006e38 <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e087      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800867a:	4b27      	ldr	r3, [pc, #156]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f0      	bne.n	8008668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69da      	ldr	r2, [r3, #28]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	019b      	lsls	r3, r3, #6
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	3b01      	subs	r3, #1
 80086a0:	041b      	lsls	r3, r3, #16
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	061b      	lsls	r3, r3, #24
 80086aa:	491b      	ldr	r1, [pc, #108]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <HAL_RCC_OscConfig+0x478>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b6:	f7fe fbbf 	bl	8006e38 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086be:	f7fe fbbb 	bl	8006e38 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e05c      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086d0:	4b11      	ldr	r3, [pc, #68]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0f0      	beq.n	80086be <HAL_RCC_OscConfig+0x416>
 80086dc:	e054      	b.n	8008788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086de:	4b10      	ldr	r3, [pc, #64]	; (8008720 <HAL_RCC_OscConfig+0x478>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e4:	f7fe fba8 	bl	8006e38 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ec:	f7fe fba4 	bl	8006e38 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e045      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <HAL_RCC_OscConfig+0x470>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x444>
 800870a:	e03d      	b.n	8008788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d107      	bne.n	8008724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e038      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
 8008718:	40023800 	.word	0x40023800
 800871c:	40007000 	.word	0x40007000
 8008720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008724:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <HAL_RCC_OscConfig+0x4ec>)
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d028      	beq.n	8008784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800873c:	429a      	cmp	r2, r3
 800873e:	d121      	bne.n	8008784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800874a:	429a      	cmp	r2, r3
 800874c:	d11a      	bne.n	8008784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008754:	4013      	ands	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800875a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800875c:	4293      	cmp	r3, r2
 800875e:	d111      	bne.n	8008784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	3b01      	subs	r3, #1
 800876e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008770:	429a      	cmp	r2, r3
 8008772:	d107      	bne.n	8008784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008780:	429a      	cmp	r2, r3
 8008782:	d001      	beq.n	8008788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e000      	b.n	800878a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	40023800 	.word	0x40023800

08008798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0cc      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087ac:	4b68      	ldr	r3, [pc, #416]	; (8008950 <HAL_RCC_ClockConfig+0x1b8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d90c      	bls.n	80087d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ba:	4b65      	ldr	r3, [pc, #404]	; (8008950 <HAL_RCC_ClockConfig+0x1b8>)
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	4b63      	ldr	r3, [pc, #396]	; (8008950 <HAL_RCC_ClockConfig+0x1b8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e0b8      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d020      	beq.n	8008822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d005      	beq.n	80087f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087ec:	4b59      	ldr	r3, [pc, #356]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	4a58      	ldr	r2, [pc, #352]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 80087f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008804:	4b53      	ldr	r3, [pc, #332]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	4a52      	ldr	r2, [pc, #328]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 800880a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800880e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008810:	4b50      	ldr	r3, [pc, #320]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	494d      	ldr	r1, [pc, #308]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 800881e:	4313      	orrs	r3, r2
 8008820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d044      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d107      	bne.n	8008846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008836:	4b47      	ldr	r3, [pc, #284]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d119      	bne.n	8008876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e07f      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d003      	beq.n	8008856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008852:	2b03      	cmp	r3, #3
 8008854:	d107      	bne.n	8008866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008856:	4b3f      	ldr	r3, [pc, #252]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e06f      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008866:	4b3b      	ldr	r3, [pc, #236]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e067      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008876:	4b37      	ldr	r3, [pc, #220]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f023 0203 	bic.w	r2, r3, #3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	4934      	ldr	r1, [pc, #208]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008884:	4313      	orrs	r3, r2
 8008886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008888:	f7fe fad6 	bl	8006e38 <HAL_GetTick>
 800888c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800888e:	e00a      	b.n	80088a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008890:	f7fe fad2 	bl	8006e38 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	f241 3288 	movw	r2, #5000	; 0x1388
 800889e:	4293      	cmp	r3, r2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e04f      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088a6:	4b2b      	ldr	r3, [pc, #172]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 020c 	and.w	r2, r3, #12
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d1eb      	bne.n	8008890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <HAL_RCC_ClockConfig+0x1b8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d20c      	bcs.n	80088e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c6:	4b22      	ldr	r3, [pc, #136]	; (8008950 <HAL_RCC_ClockConfig+0x1b8>)
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <HAL_RCC_ClockConfig+0x1b8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d001      	beq.n	80088e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e032      	b.n	8008946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088ec:	4b19      	ldr	r3, [pc, #100]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	4916      	ldr	r1, [pc, #88]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800890a:	4b12      	ldr	r3, [pc, #72]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	490e      	ldr	r1, [pc, #56]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 800891a:	4313      	orrs	r3, r2
 800891c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800891e:	f000 f821 	bl	8008964 <HAL_RCC_GetSysClockFreq>
 8008922:	4602      	mov	r2, r0
 8008924:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	091b      	lsrs	r3, r3, #4
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	490a      	ldr	r1, [pc, #40]	; (8008958 <HAL_RCC_ClockConfig+0x1c0>)
 8008930:	5ccb      	ldrb	r3, [r1, r3]
 8008932:	fa22 f303 	lsr.w	r3, r2, r3
 8008936:	4a09      	ldr	r2, [pc, #36]	; (800895c <HAL_RCC_ClockConfig+0x1c4>)
 8008938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <HAL_RCC_ClockConfig+0x1c8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fa36 	bl	8006db0 <HAL_InitTick>

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40023c00 	.word	0x40023c00
 8008954:	40023800 	.word	0x40023800
 8008958:	0800bb04 	.word	0x0800bb04
 800895c:	20000194 	.word	0x20000194
 8008960:	20000198 	.word	0x20000198

08008964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008968:	b094      	sub	sp, #80	; 0x50
 800896a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	647b      	str	r3, [r7, #68]	; 0x44
 8008970:	2300      	movs	r3, #0
 8008972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008974:	2300      	movs	r3, #0
 8008976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800897c:	4b79      	ldr	r3, [pc, #484]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f003 030c 	and.w	r3, r3, #12
 8008984:	2b08      	cmp	r3, #8
 8008986:	d00d      	beq.n	80089a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008988:	2b08      	cmp	r3, #8
 800898a:	f200 80e1 	bhi.w	8008b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <HAL_RCC_GetSysClockFreq+0x34>
 8008992:	2b04      	cmp	r3, #4
 8008994:	d003      	beq.n	800899e <HAL_RCC_GetSysClockFreq+0x3a>
 8008996:	e0db      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008998:	4b73      	ldr	r3, [pc, #460]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800899a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800899c:	e0db      	b.n	8008b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800899e:	4b73      	ldr	r3, [pc, #460]	; (8008b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80089a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089a2:	e0d8      	b.n	8008b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089a4:	4b6f      	ldr	r3, [pc, #444]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089ae:	4b6d      	ldr	r3, [pc, #436]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d063      	beq.n	8008a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ba:	4b6a      	ldr	r3, [pc, #424]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	099b      	lsrs	r3, r3, #6
 80089c0:	2200      	movs	r2, #0
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089cc:	633b      	str	r3, [r7, #48]	; 0x30
 80089ce:	2300      	movs	r3, #0
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
 80089d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80089d6:	4622      	mov	r2, r4
 80089d8:	462b      	mov	r3, r5
 80089da:	f04f 0000 	mov.w	r0, #0
 80089de:	f04f 0100 	mov.w	r1, #0
 80089e2:	0159      	lsls	r1, r3, #5
 80089e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089e8:	0150      	lsls	r0, r2, #5
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4621      	mov	r1, r4
 80089f0:	1a51      	subs	r1, r2, r1
 80089f2:	6139      	str	r1, [r7, #16]
 80089f4:	4629      	mov	r1, r5
 80089f6:	eb63 0301 	sbc.w	r3, r3, r1
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a08:	4659      	mov	r1, fp
 8008a0a:	018b      	lsls	r3, r1, #6
 8008a0c:	4651      	mov	r1, sl
 8008a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a12:	4651      	mov	r1, sl
 8008a14:	018a      	lsls	r2, r1, #6
 8008a16:	4651      	mov	r1, sl
 8008a18:	ebb2 0801 	subs.w	r8, r2, r1
 8008a1c:	4659      	mov	r1, fp
 8008a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a36:	4690      	mov	r8, r2
 8008a38:	4699      	mov	r9, r3
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	eb18 0303 	adds.w	r3, r8, r3
 8008a40:	60bb      	str	r3, [r7, #8]
 8008a42:	462b      	mov	r3, r5
 8008a44:	eb49 0303 	adc.w	r3, r9, r3
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	f04f 0300 	mov.w	r3, #0
 8008a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008a56:	4629      	mov	r1, r5
 8008a58:	024b      	lsls	r3, r1, #9
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a60:	4621      	mov	r1, r4
 8008a62:	024a      	lsls	r2, r1, #9
 8008a64:	4610      	mov	r0, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a74:	f7f7 fc04 	bl	8000280 <__aeabi_uldivmod>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a80:	e058      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a82:	4b38      	ldr	r3, [pc, #224]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	099b      	lsrs	r3, r3, #6
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a92:	623b      	str	r3, [r7, #32]
 8008a94:	2300      	movs	r3, #0
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
 8008a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	f04f 0000 	mov.w	r0, #0
 8008aa4:	f04f 0100 	mov.w	r1, #0
 8008aa8:	0159      	lsls	r1, r3, #5
 8008aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008aae:	0150      	lsls	r0, r2, #5
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008aba:	4649      	mov	r1, r9
 8008abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8008ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	f04f 0300 	mov.w	r3, #0
 8008ae4:	00eb      	lsls	r3, r5, #3
 8008ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008aea:	00e2      	lsls	r2, r4, #3
 8008aec:	4614      	mov	r4, r2
 8008aee:	461d      	mov	r5, r3
 8008af0:	4643      	mov	r3, r8
 8008af2:	18e3      	adds	r3, r4, r3
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	464b      	mov	r3, r9
 8008af8:	eb45 0303 	adc.w	r3, r5, r3
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	f04f 0300 	mov.w	r3, #0
 8008b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	028b      	lsls	r3, r1, #10
 8008b0e:	4621      	mov	r1, r4
 8008b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b14:	4621      	mov	r1, r4
 8008b16:	028a      	lsls	r2, r1, #10
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b1e:	2200      	movs	r2, #0
 8008b20:	61bb      	str	r3, [r7, #24]
 8008b22:	61fa      	str	r2, [r7, #28]
 8008b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b28:	f7f7 fbaa 	bl	8000280 <__aeabi_uldivmod>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4613      	mov	r3, r2
 8008b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b34:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	0c1b      	lsrs	r3, r3, #16
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	3301      	adds	r3, #1
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b4e:	e002      	b.n	8008b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3750      	adds	r7, #80	; 0x50
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b62:	bf00      	nop
 8008b64:	40023800 	.word	0x40023800
 8008b68:	00f42400 	.word	0x00f42400
 8008b6c:	007a1200 	.word	0x007a1200

08008b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b74:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b76:	681b      	ldr	r3, [r3, #0]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000194 	.word	0x20000194

08008b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b8c:	f7ff fff0 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008b90:	4602      	mov	r2, r0
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	0a9b      	lsrs	r3, r3, #10
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	4903      	ldr	r1, [pc, #12]	; (8008bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	0800bb14 	.word	0x0800bb14

08008bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bb4:	f7ff ffdc 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	0b5b      	lsrs	r3, r3, #13
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	4903      	ldr	r1, [pc, #12]	; (8008bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40023800 	.word	0x40023800
 8008bd4:	0800bb14 	.word	0x0800bb14

08008bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e041      	b.n	8008c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fd fef6 	bl	80069f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4619      	mov	r1, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	f000 f9fe 	bl	8009018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d001      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e04e      	b.n	8008d2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a23      	ldr	r2, [pc, #140]	; (8008d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d022      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cba:	d01d      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d018      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a1e      	ldr	r2, [pc, #120]	; (8008d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d013      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d00e      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a1b      	ldr	r2, [pc, #108]	; (8008d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d009      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d004      	beq.n	8008cf8 <HAL_TIM_Base_Start_IT+0x80>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d111      	bne.n	8008d1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f003 0307 	and.w	r3, r3, #7
 8008d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b06      	cmp	r3, #6
 8008d08:	d010      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f042 0201 	orr.w	r2, r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d1a:	e007      	b.n	8008d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0201 	orr.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800
 8008d48:	40000c00 	.word	0x40000c00
 8008d4c:	40010400 	.word	0x40010400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40001800 	.word	0x40001800

08008d58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0201 	bic.w	r2, r2, #1
 8008d6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a1a      	ldr	r2, [r3, #32]
 8008d76:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10f      	bne.n	8008da0 <HAL_TIM_Base_Stop_IT+0x48>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6a1a      	ldr	r2, [r3, #32]
 8008d86:	f240 4344 	movw	r3, #1092	; 0x444
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d107      	bne.n	8008da0 <HAL_TIM_Base_Stop_IT+0x48>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d122      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d11b      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f06f 0202 	mvn.w	r2, #2
 8008de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f003 0303 	and.w	r3, r3, #3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f8ee 	bl	8008fda <HAL_TIM_IC_CaptureCallback>
 8008dfe:	e005      	b.n	8008e0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f8e0 	bl	8008fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8f1 	bl	8008fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d122      	bne.n	8008e66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d11b      	bne.n	8008e66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f06f 0204 	mvn.w	r2, #4
 8008e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f8c4 	bl	8008fda <HAL_TIM_IC_CaptureCallback>
 8008e52:	e005      	b.n	8008e60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f8b6 	bl	8008fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8c7 	bl	8008fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d122      	bne.n	8008eba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b08      	cmp	r3, #8
 8008e80:	d11b      	bne.n	8008eba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f06f 0208 	mvn.w	r2, #8
 8008e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f003 0303 	and.w	r3, r3, #3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f89a 	bl	8008fda <HAL_TIM_IC_CaptureCallback>
 8008ea6:	e005      	b.n	8008eb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f88c 	bl	8008fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f89d 	bl	8008fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b10      	cmp	r3, #16
 8008ec6:	d122      	bne.n	8008f0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f003 0310 	and.w	r3, r3, #16
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d11b      	bne.n	8008f0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f06f 0210 	mvn.w	r2, #16
 8008ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f870 	bl	8008fda <HAL_TIM_IC_CaptureCallback>
 8008efa:	e005      	b.n	8008f08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f862 	bl	8008fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f873 	bl	8008fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d10e      	bne.n	8008f3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d107      	bne.n	8008f3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f06f 0201 	mvn.w	r2, #1
 8008f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7fd fa51 	bl	80063dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f44:	2b80      	cmp	r3, #128	; 0x80
 8008f46:	d10e      	bne.n	8008f66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f52:	2b80      	cmp	r3, #128	; 0x80
 8008f54:	d107      	bne.n	8008f66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f903 	bl	800916c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	d10e      	bne.n	8008f92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	d107      	bne.n	8008f92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f838 	bl	8009002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d10e      	bne.n	8008fbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f003 0320 	and.w	r3, r3, #32
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d107      	bne.n	8008fbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f06f 0220 	mvn.w	r2, #32
 8008fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f8cd 	bl	8009158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a40      	ldr	r2, [pc, #256]	; (800912c <TIM_Base_SetConfig+0x114>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d013      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009036:	d00f      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a3d      	ldr	r2, [pc, #244]	; (8009130 <TIM_Base_SetConfig+0x118>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00b      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <TIM_Base_SetConfig+0x11c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d007      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a3b      	ldr	r2, [pc, #236]	; (8009138 <TIM_Base_SetConfig+0x120>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d003      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a3a      	ldr	r2, [pc, #232]	; (800913c <TIM_Base_SetConfig+0x124>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d108      	bne.n	800906a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a2f      	ldr	r2, [pc, #188]	; (800912c <TIM_Base_SetConfig+0x114>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d02b      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009078:	d027      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a2c      	ldr	r2, [pc, #176]	; (8009130 <TIM_Base_SetConfig+0x118>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d023      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a2b      	ldr	r2, [pc, #172]	; (8009134 <TIM_Base_SetConfig+0x11c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d01f      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a2a      	ldr	r2, [pc, #168]	; (8009138 <TIM_Base_SetConfig+0x120>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d01b      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a29      	ldr	r2, [pc, #164]	; (800913c <TIM_Base_SetConfig+0x124>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d017      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a28      	ldr	r2, [pc, #160]	; (8009140 <TIM_Base_SetConfig+0x128>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d013      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a27      	ldr	r2, [pc, #156]	; (8009144 <TIM_Base_SetConfig+0x12c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00f      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a26      	ldr	r2, [pc, #152]	; (8009148 <TIM_Base_SetConfig+0x130>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00b      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a25      	ldr	r2, [pc, #148]	; (800914c <TIM_Base_SetConfig+0x134>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d007      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a24      	ldr	r2, [pc, #144]	; (8009150 <TIM_Base_SetConfig+0x138>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d003      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <TIM_Base_SetConfig+0x13c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d108      	bne.n	80090dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a0a      	ldr	r2, [pc, #40]	; (800912c <TIM_Base_SetConfig+0x114>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d003      	beq.n	8009110 <TIM_Base_SetConfig+0xf8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <TIM_Base_SetConfig+0x124>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d103      	bne.n	8009118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	615a      	str	r2, [r3, #20]
}
 800911e:	bf00      	nop
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40010000 	.word	0x40010000
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800
 8009138:	40000c00 	.word	0x40000c00
 800913c:	40010400 	.word	0x40010400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800
 800914c:	40001800 	.word	0x40001800
 8009150:	40001c00 	.word	0x40001c00
 8009154:	40002000 	.word	0x40002000

08009158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e03f      	b.n	8009212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7fd fc4a 	bl	8006a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2224      	movs	r2, #36	; 0x24
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fd7b 	bl	8009cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b08a      	sub	sp, #40	; 0x28
 800921e:	af02      	add	r7, sp, #8
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b20      	cmp	r3, #32
 8009238:	d17c      	bne.n	8009334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_UART_Transmit+0x2c>
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e075      	b.n	8009336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_UART_Transmit+0x3e>
 8009254:	2302      	movs	r3, #2
 8009256:	e06e      	b.n	8009336 <HAL_UART_Transmit+0x11c>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2221      	movs	r2, #33	; 0x21
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800926e:	f7fd fde3 	bl	8006e38 <HAL_GetTick>
 8009272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	88fa      	ldrh	r2, [r7, #6]
 800927e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009288:	d108      	bne.n	800929c <HAL_UART_Transmit+0x82>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	61bb      	str	r3, [r7, #24]
 800929a:	e003      	b.n	80092a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80092ac:	e02a      	b.n	8009304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2200      	movs	r2, #0
 80092b6:	2180      	movs	r1, #128	; 0x80
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 faf9 	bl	80098b0 <UART_WaitOnFlagUntilTimeout>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e036      	b.n	8009336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	3302      	adds	r3, #2
 80092e2:	61bb      	str	r3, [r7, #24]
 80092e4:	e007      	b.n	80092f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	3301      	adds	r3, #1
 80092f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1cf      	bne.n	80092ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2200      	movs	r2, #0
 8009316:	2140      	movs	r1, #64	; 0x40
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 fac9 	bl	80098b0 <UART_WaitOnFlagUntilTimeout>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e006      	b.n	8009336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2220      	movs	r2, #32
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	e000      	b.n	8009336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009334:	2302      	movs	r3, #2
  }
}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b0ba      	sub	sp, #232	; 0xe8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009366:	2300      	movs	r3, #0
 8009368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800936c:	2300      	movs	r3, #0
 800936e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800937e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10f      	bne.n	80093a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <HAL_UART_IRQHandler+0x66>
 8009392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fbd3 	bl	8009b4a <UART_Receive_IT>
      return;
 80093a4:	e256      	b.n	8009854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80093a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 80de 	beq.w	800956c <HAL_UART_IRQHandler+0x22c>
 80093b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d106      	bne.n	80093ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 80d1 	beq.w	800956c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00b      	beq.n	80093ee <HAL_UART_IRQHandler+0xae>
 80093d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	f043 0201 	orr.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <HAL_UART_IRQHandler+0xd2>
 80093fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	f043 0202 	orr.w	r2, r3, #2
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <HAL_UART_IRQHandler+0xf6>
 800941e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	f043 0204 	orr.w	r2, r3, #4
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d011      	beq.n	8009466 <HAL_UART_IRQHandler+0x126>
 8009442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	d105      	bne.n	800945a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800944e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d005      	beq.n	8009466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	f043 0208 	orr.w	r2, r3, #8
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 81ed 	beq.w	800984a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d008      	beq.n	800948e <HAL_UART_IRQHandler+0x14e>
 800947c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fb5e 	bl	8009b4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b40      	cmp	r3, #64	; 0x40
 800949a:	bf0c      	ite	eq
 800949c:	2301      	moveq	r3, #1
 800949e:	2300      	movne	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d103      	bne.n	80094ba <HAL_UART_IRQHandler+0x17a>
 80094b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d04f      	beq.n	800955a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa66 	bl	800998c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d141      	bne.n	8009552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3314      	adds	r3, #20
 80094d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3314      	adds	r3, #20
 80094f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1d9      	bne.n	80094ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	2b00      	cmp	r3, #0
 8009520:	d013      	beq.n	800954a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	4a7d      	ldr	r2, [pc, #500]	; (800971c <HAL_UART_IRQHandler+0x3dc>)
 8009528:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fce1 	bl	8007ef6 <HAL_DMA_Abort_IT>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d016      	beq.n	8009568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	e00e      	b.n	8009568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f99a 	bl	8009884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	e00a      	b.n	8009568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f996 	bl	8009884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	e006      	b.n	8009568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f992 	bl	8009884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009566:	e170      	b.n	800984a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009568:	bf00      	nop
    return;
 800956a:	e16e      	b.n	800984a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009570:	2b01      	cmp	r3, #1
 8009572:	f040 814a 	bne.w	800980a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957a:	f003 0310 	and.w	r3, r3, #16
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 8143 	beq.w	800980a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 813c 	beq.w	800980a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009592:	2300      	movs	r3, #0
 8009594:	60bb      	str	r3, [r7, #8]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	60bb      	str	r3, [r7, #8]
 80095a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	f040 80b4 	bne.w	8009720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8140 	beq.w	800984e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095d6:	429a      	cmp	r2, r3
 80095d8:	f080 8139 	bcs.w	800984e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ee:	f000 8088 	beq.w	8009702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	330c      	adds	r3, #12
 80095f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800960c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	330c      	adds	r3, #12
 800961a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800961e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800962a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1d9      	bne.n	80095f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3314      	adds	r3, #20
 8009644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800964e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009650:	f023 0301 	bic.w	r3, r3, #1
 8009654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3314      	adds	r3, #20
 800965e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800966a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e1      	bne.n	800963e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3314      	adds	r3, #20
 8009680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800968a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800968c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3314      	adds	r3, #20
 800969a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800969e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e3      	bne.n	800967a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ca:	e853 3f00 	ldrex	r3, [r3]
 80096ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d2:	f023 0310 	bic.w	r3, r3, #16
 80096d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	330c      	adds	r3, #12
 80096e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80096e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80096e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e3      	bne.n	80096c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fb8a 	bl	8007e16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800970a:	b29b      	uxth	r3, r3
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	b29b      	uxth	r3, r3
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8c0 	bl	8009898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009718:	e099      	b.n	800984e <HAL_UART_IRQHandler+0x50e>
 800971a:	bf00      	nop
 800971c:	08009a53 	.word	0x08009a53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009728:	b29b      	uxth	r3, r3
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009734:	b29b      	uxth	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 808b 	beq.w	8009852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800973c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 8086 	beq.w	8009852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	330c      	adds	r3, #12
 800974c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800975c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	330c      	adds	r3, #12
 8009766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800976a:	647a      	str	r2, [r7, #68]	; 0x44
 800976c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e3      	bne.n	8009746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3314      	adds	r3, #20
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	623b      	str	r3, [r7, #32]
   return(result);
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3314      	adds	r3, #20
 800979e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097a2:	633a      	str	r2, [r7, #48]	; 0x30
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e3      	bne.n	800977e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	330c      	adds	r3, #12
 80097ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0310 	bic.w	r3, r3, #16
 80097da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	330c      	adds	r3, #12
 80097e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80097e8:	61fa      	str	r2, [r7, #28]
 80097ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	69b9      	ldr	r1, [r7, #24]
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	617b      	str	r3, [r7, #20]
   return(result);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e3      	bne.n	80097c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f848 	bl	8009898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009808:	e023      	b.n	8009852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009812:	2b00      	cmp	r3, #0
 8009814:	d009      	beq.n	800982a <HAL_UART_IRQHandler+0x4ea>
 8009816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f929 	bl	8009a7a <UART_Transmit_IT>
    return;
 8009828:	e014      	b.n	8009854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800982a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00e      	beq.n	8009854 <HAL_UART_IRQHandler+0x514>
 8009836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800983a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	d008      	beq.n	8009854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f969 	bl	8009b1a <UART_EndTransmit_IT>
    return;
 8009848:	e004      	b.n	8009854 <HAL_UART_IRQHandler+0x514>
    return;
 800984a:	bf00      	nop
 800984c:	e002      	b.n	8009854 <HAL_UART_IRQHandler+0x514>
      return;
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <HAL_UART_IRQHandler+0x514>
      return;
 8009852:	bf00      	nop
  }
}
 8009854:	37e8      	adds	r7, #232	; 0xe8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop

0800985c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b090      	sub	sp, #64	; 0x40
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	4613      	mov	r3, r2
 80098be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c0:	e050      	b.n	8009964 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d04c      	beq.n	8009964 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d007      	beq.n	80098e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098d0:	f7fd fab2 	bl	8006e38 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098dc:	429a      	cmp	r2, r3
 80098de:	d241      	bcs.n	8009964 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	330c      	adds	r3, #12
 80098fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009900:	637a      	str	r2, [r7, #52]	; 0x34
 8009902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e5      	bne.n	80098e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	613b      	str	r3, [r7, #16]
   return(result);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	63bb      	str	r3, [r7, #56]	; 0x38
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3314      	adds	r3, #20
 8009932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009934:	623a      	str	r2, [r7, #32]
 8009936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	69f9      	ldr	r1, [r7, #28]
 800993a:	6a3a      	ldr	r2, [r7, #32]
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	61bb      	str	r3, [r7, #24]
   return(result);
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e5      	bne.n	8009914 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2220      	movs	r2, #32
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e00f      	b.n	8009984 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4013      	ands	r3, r2
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	429a      	cmp	r2, r3
 8009972:	bf0c      	ite	eq
 8009974:	2301      	moveq	r3, #1
 8009976:	2300      	movne	r3, #0
 8009978:	b2db      	uxtb	r3, r3
 800997a:	461a      	mov	r2, r3
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	429a      	cmp	r2, r3
 8009980:	d09f      	beq.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3740      	adds	r7, #64	; 0x40
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b095      	sub	sp, #84	; 0x54
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	330c      	adds	r3, #12
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	330c      	adds	r3, #12
 80099b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099b4:	643a      	str	r2, [r7, #64]	; 0x40
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099bc:	e841 2300 	strex	r3, r2, [r1]
 80099c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e5      	bne.n	8009994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3314      	adds	r3, #20
 80099ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	64bb      	str	r3, [r7, #72]	; 0x48
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3314      	adds	r3, #20
 80099e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e5      	bne.n	80099c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d119      	bne.n	8009a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f023 0310 	bic.w	r3, r3, #16
 8009a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a24:	61ba      	str	r2, [r7, #24]
 8009a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	6979      	ldr	r1, [r7, #20]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	613b      	str	r3, [r7, #16]
   return(result);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e5      	bne.n	8009a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a46:	bf00      	nop
 8009a48:	3754      	adds	r7, #84	; 0x54
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7ff ff09 	bl	8009884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b21      	cmp	r3, #33	; 0x21
 8009a8c:	d13e      	bne.n	8009b0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a96:	d114      	bne.n	8009ac2 <UART_Transmit_IT+0x48>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d110      	bne.n	8009ac2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
 8009aa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ab4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	1c9a      	adds	r2, r3, #2
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	621a      	str	r2, [r3, #32]
 8009ac0:	e008      	b.n	8009ad4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	1c59      	adds	r1, r3, #1
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	6211      	str	r1, [r2, #32]
 8009acc:	781a      	ldrb	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10f      	bne.n	8009b08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009af6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	e000      	b.n	8009b0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b0c:	2302      	movs	r3, #2
  }
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff fe8e 	bl	800985c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b08c      	sub	sp, #48	; 0x30
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b22      	cmp	r3, #34	; 0x22
 8009b5c:	f040 80ab 	bne.w	8009cb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d117      	bne.n	8009b9a <UART_Receive_IT+0x50>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d113      	bne.n	8009b9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	1c9a      	adds	r2, r3, #2
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	629a      	str	r2, [r3, #40]	; 0x28
 8009b98:	e026      	b.n	8009be8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bac:	d007      	beq.n	8009bbe <UART_Receive_IT+0x74>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <UART_Receive_IT+0x82>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	e008      	b.n	8009bde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d15a      	bne.n	8009cb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0220 	bic.w	r2, r2, #32
 8009c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	695a      	ldr	r2, [r3, #20]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0201 	bic.w	r2, r2, #1
 8009c2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d135      	bne.n	8009ca8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	330c      	adds	r3, #12
 8009c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	613b      	str	r3, [r7, #16]
   return(result);
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f023 0310 	bic.w	r3, r3, #16
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	330c      	adds	r3, #12
 8009c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c62:	623a      	str	r2, [r7, #32]
 8009c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	69f9      	ldr	r1, [r7, #28]
 8009c68:	6a3a      	ldr	r2, [r7, #32]
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e5      	bne.n	8009c42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0310 	and.w	r3, r3, #16
 8009c80:	2b10      	cmp	r3, #16
 8009c82:	d10a      	bne.n	8009c9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff fdf9 	bl	8009898 <HAL_UARTEx_RxEventCallback>
 8009ca6:	e002      	b.n	8009cae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff fde1 	bl	8009870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e002      	b.n	8009cb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e000      	b.n	8009cb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009cb6:	2302      	movs	r3, #2
  }
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3730      	adds	r7, #48	; 0x30
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cc4:	b0c0      	sub	sp, #256	; 0x100
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cdc:	68d9      	ldr	r1, [r3, #12]
 8009cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	ea40 0301 	orr.w	r3, r0, r1
 8009ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d18:	f021 010c 	bic.w	r1, r1, #12
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d26:	430b      	orrs	r3, r1
 8009d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3a:	6999      	ldr	r1, [r3, #24]
 8009d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	ea40 0301 	orr.w	r3, r0, r1
 8009d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	4b8f      	ldr	r3, [pc, #572]	; (8009f8c <UART_SetConfig+0x2cc>)
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d005      	beq.n	8009d60 <UART_SetConfig+0xa0>
 8009d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4b8d      	ldr	r3, [pc, #564]	; (8009f90 <UART_SetConfig+0x2d0>)
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d104      	bne.n	8009d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d60:	f7fe ff26 	bl	8008bb0 <HAL_RCC_GetPCLK2Freq>
 8009d64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d68:	e003      	b.n	8009d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d6a:	f7fe ff0d 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 8009d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d7c:	f040 810c 	bne.w	8009f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d84:	2200      	movs	r2, #0
 8009d86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	1891      	adds	r1, r2, r2
 8009d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d9a:	415b      	adcs	r3, r3
 8009d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009da2:	4621      	mov	r1, r4
 8009da4:	eb12 0801 	adds.w	r8, r2, r1
 8009da8:	4629      	mov	r1, r5
 8009daa:	eb43 0901 	adc.w	r9, r3, r1
 8009dae:	f04f 0200 	mov.w	r2, #0
 8009db2:	f04f 0300 	mov.w	r3, #0
 8009db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dc2:	4690      	mov	r8, r2
 8009dc4:	4699      	mov	r9, r3
 8009dc6:	4623      	mov	r3, r4
 8009dc8:	eb18 0303 	adds.w	r3, r8, r3
 8009dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	eb49 0303 	adc.w	r3, r9, r3
 8009dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009dee:	460b      	mov	r3, r1
 8009df0:	18db      	adds	r3, r3, r3
 8009df2:	653b      	str	r3, [r7, #80]	; 0x50
 8009df4:	4613      	mov	r3, r2
 8009df6:	eb42 0303 	adc.w	r3, r2, r3
 8009dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8009dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e04:	f7f6 fa3c 	bl	8000280 <__aeabi_uldivmod>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4b61      	ldr	r3, [pc, #388]	; (8009f94 <UART_SetConfig+0x2d4>)
 8009e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	011c      	lsls	r4, r3, #4
 8009e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e28:	4642      	mov	r2, r8
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	1891      	adds	r1, r2, r2
 8009e2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e30:	415b      	adcs	r3, r3
 8009e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e38:	4641      	mov	r1, r8
 8009e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8009e3e:	4649      	mov	r1, r9
 8009e40:	eb43 0b01 	adc.w	fp, r3, r1
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e58:	4692      	mov	sl, r2
 8009e5a:	469b      	mov	fp, r3
 8009e5c:	4643      	mov	r3, r8
 8009e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8009e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e66:	464b      	mov	r3, r9
 8009e68:	eb4b 0303 	adc.w	r3, fp, r3
 8009e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e84:	460b      	mov	r3, r1
 8009e86:	18db      	adds	r3, r3, r3
 8009e88:	643b      	str	r3, [r7, #64]	; 0x40
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	eb42 0303 	adc.w	r3, r2, r3
 8009e90:	647b      	str	r3, [r7, #68]	; 0x44
 8009e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e9a:	f7f6 f9f1 	bl	8000280 <__aeabi_uldivmod>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4b3b      	ldr	r3, [pc, #236]	; (8009f94 <UART_SetConfig+0x2d4>)
 8009ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8009eaa:	095b      	lsrs	r3, r3, #5
 8009eac:	2264      	movs	r2, #100	; 0x64
 8009eae:	fb02 f303 	mul.w	r3, r2, r3
 8009eb2:	1acb      	subs	r3, r1, r3
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009eba:	4b36      	ldr	r3, [pc, #216]	; (8009f94 <UART_SetConfig+0x2d4>)
 8009ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8009ec0:	095b      	lsrs	r3, r3, #5
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ec8:	441c      	add	r4, r3
 8009eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009edc:	4642      	mov	r2, r8
 8009ede:	464b      	mov	r3, r9
 8009ee0:	1891      	adds	r1, r2, r2
 8009ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ee4:	415b      	adcs	r3, r3
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009eec:	4641      	mov	r1, r8
 8009eee:	1851      	adds	r1, r2, r1
 8009ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	414b      	adcs	r3, r1
 8009ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f04:	4659      	mov	r1, fp
 8009f06:	00cb      	lsls	r3, r1, #3
 8009f08:	4651      	mov	r1, sl
 8009f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f0e:	4651      	mov	r1, sl
 8009f10:	00ca      	lsls	r2, r1, #3
 8009f12:	4610      	mov	r0, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	4642      	mov	r2, r8
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f20:	464b      	mov	r3, r9
 8009f22:	460a      	mov	r2, r1
 8009f24:	eb42 0303 	adc.w	r3, r2, r3
 8009f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f40:	460b      	mov	r3, r1
 8009f42:	18db      	adds	r3, r3, r3
 8009f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f46:	4613      	mov	r3, r2
 8009f48:	eb42 0303 	adc.w	r3, r2, r3
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f56:	f7f6 f993 	bl	8000280 <__aeabi_uldivmod>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <UART_SetConfig+0x2d4>)
 8009f60:	fba3 1302 	umull	r1, r3, r3, r2
 8009f64:	095b      	lsrs	r3, r3, #5
 8009f66:	2164      	movs	r1, #100	; 0x64
 8009f68:	fb01 f303 	mul.w	r3, r1, r3
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	3332      	adds	r3, #50	; 0x32
 8009f72:	4a08      	ldr	r2, [pc, #32]	; (8009f94 <UART_SetConfig+0x2d4>)
 8009f74:	fba2 2303 	umull	r2, r3, r2, r3
 8009f78:	095b      	lsrs	r3, r3, #5
 8009f7a:	f003 0207 	and.w	r2, r3, #7
 8009f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4422      	add	r2, r4
 8009f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f88:	e105      	b.n	800a196 <UART_SetConfig+0x4d6>
 8009f8a:	bf00      	nop
 8009f8c:	40011000 	.word	0x40011000
 8009f90:	40011400 	.word	0x40011400
 8009f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009faa:	4642      	mov	r2, r8
 8009fac:	464b      	mov	r3, r9
 8009fae:	1891      	adds	r1, r2, r2
 8009fb0:	6239      	str	r1, [r7, #32]
 8009fb2:	415b      	adcs	r3, r3
 8009fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fba:	4641      	mov	r1, r8
 8009fbc:	1854      	adds	r4, r2, r1
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	eb43 0501 	adc.w	r5, r3, r1
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	00eb      	lsls	r3, r5, #3
 8009fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fd2:	00e2      	lsls	r2, r4, #3
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	461d      	mov	r5, r3
 8009fd8:	4643      	mov	r3, r8
 8009fda:	18e3      	adds	r3, r4, r3
 8009fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	eb45 0303 	adc.w	r3, r5, r3
 8009fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	f04f 0300 	mov.w	r3, #0
 800a002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a006:	4629      	mov	r1, r5
 800a008:	008b      	lsls	r3, r1, #2
 800a00a:	4621      	mov	r1, r4
 800a00c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a010:	4621      	mov	r1, r4
 800a012:	008a      	lsls	r2, r1, #2
 800a014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a018:	f7f6 f932 	bl	8000280 <__aeabi_uldivmod>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4b60      	ldr	r3, [pc, #384]	; (800a1a4 <UART_SetConfig+0x4e4>)
 800a022:	fba3 2302 	umull	r2, r3, r3, r2
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	011c      	lsls	r4, r3, #4
 800a02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a03c:	4642      	mov	r2, r8
 800a03e:	464b      	mov	r3, r9
 800a040:	1891      	adds	r1, r2, r2
 800a042:	61b9      	str	r1, [r7, #24]
 800a044:	415b      	adcs	r3, r3
 800a046:	61fb      	str	r3, [r7, #28]
 800a048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a04c:	4641      	mov	r1, r8
 800a04e:	1851      	adds	r1, r2, r1
 800a050:	6139      	str	r1, [r7, #16]
 800a052:	4649      	mov	r1, r9
 800a054:	414b      	adcs	r3, r1
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	f04f 0200 	mov.w	r2, #0
 800a05c:	f04f 0300 	mov.w	r3, #0
 800a060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a064:	4659      	mov	r1, fp
 800a066:	00cb      	lsls	r3, r1, #3
 800a068:	4651      	mov	r1, sl
 800a06a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a06e:	4651      	mov	r1, sl
 800a070:	00ca      	lsls	r2, r1, #3
 800a072:	4610      	mov	r0, r2
 800a074:	4619      	mov	r1, r3
 800a076:	4603      	mov	r3, r0
 800a078:	4642      	mov	r2, r8
 800a07a:	189b      	adds	r3, r3, r2
 800a07c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a080:	464b      	mov	r3, r9
 800a082:	460a      	mov	r2, r1
 800a084:	eb42 0303 	adc.w	r3, r2, r3
 800a088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	67bb      	str	r3, [r7, #120]	; 0x78
 800a096:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a098:	f04f 0200 	mov.w	r2, #0
 800a09c:	f04f 0300 	mov.w	r3, #0
 800a0a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	008b      	lsls	r3, r1, #2
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ae:	4641      	mov	r1, r8
 800a0b0:	008a      	lsls	r2, r1, #2
 800a0b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a0b6:	f7f6 f8e3 	bl	8000280 <__aeabi_uldivmod>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4b39      	ldr	r3, [pc, #228]	; (800a1a4 <UART_SetConfig+0x4e4>)
 800a0c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0c4:	095b      	lsrs	r3, r3, #5
 800a0c6:	2164      	movs	r1, #100	; 0x64
 800a0c8:	fb01 f303 	mul.w	r3, r1, r3
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	011b      	lsls	r3, r3, #4
 800a0d0:	3332      	adds	r3, #50	; 0x32
 800a0d2:	4a34      	ldr	r2, [pc, #208]	; (800a1a4 <UART_SetConfig+0x4e4>)
 800a0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d8:	095b      	lsrs	r3, r3, #5
 800a0da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0de:	441c      	add	r4, r3
 800a0e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	673b      	str	r3, [r7, #112]	; 0x70
 800a0e8:	677a      	str	r2, [r7, #116]	; 0x74
 800a0ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	464b      	mov	r3, r9
 800a0f2:	1891      	adds	r1, r2, r2
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	415b      	adcs	r3, r3
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0fe:	4641      	mov	r1, r8
 800a100:	1851      	adds	r1, r2, r1
 800a102:	6039      	str	r1, [r7, #0]
 800a104:	4649      	mov	r1, r9
 800a106:	414b      	adcs	r3, r1
 800a108:	607b      	str	r3, [r7, #4]
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	f04f 0300 	mov.w	r3, #0
 800a112:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a116:	4659      	mov	r1, fp
 800a118:	00cb      	lsls	r3, r1, #3
 800a11a:	4651      	mov	r1, sl
 800a11c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a120:	4651      	mov	r1, sl
 800a122:	00ca      	lsls	r2, r1, #3
 800a124:	4610      	mov	r0, r2
 800a126:	4619      	mov	r1, r3
 800a128:	4603      	mov	r3, r0
 800a12a:	4642      	mov	r2, r8
 800a12c:	189b      	adds	r3, r3, r2
 800a12e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a130:	464b      	mov	r3, r9
 800a132:	460a      	mov	r2, r1
 800a134:	eb42 0303 	adc.w	r3, r2, r3
 800a138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	663b      	str	r3, [r7, #96]	; 0x60
 800a144:	667a      	str	r2, [r7, #100]	; 0x64
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	f04f 0300 	mov.w	r3, #0
 800a14e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a152:	4649      	mov	r1, r9
 800a154:	008b      	lsls	r3, r1, #2
 800a156:	4641      	mov	r1, r8
 800a158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a15c:	4641      	mov	r1, r8
 800a15e:	008a      	lsls	r2, r1, #2
 800a160:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a164:	f7f6 f88c 	bl	8000280 <__aeabi_uldivmod>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <UART_SetConfig+0x4e4>)
 800a16e:	fba3 1302 	umull	r1, r3, r3, r2
 800a172:	095b      	lsrs	r3, r3, #5
 800a174:	2164      	movs	r1, #100	; 0x64
 800a176:	fb01 f303 	mul.w	r3, r1, r3
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	3332      	adds	r3, #50	; 0x32
 800a180:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <UART_SetConfig+0x4e4>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	f003 020f 	and.w	r2, r3, #15
 800a18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4422      	add	r2, r4
 800a194:	609a      	str	r2, [r3, #8]
}
 800a196:	bf00      	nop
 800a198:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a19c:	46bd      	mov	sp, r7
 800a19e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1a2:	bf00      	nop
 800a1a4:	51eb851f 	.word	0x51eb851f

0800a1a8 <calloc>:
 800a1a8:	4b02      	ldr	r3, [pc, #8]	; (800a1b4 <calloc+0xc>)
 800a1aa:	460a      	mov	r2, r1
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	6818      	ldr	r0, [r3, #0]
 800a1b0:	f000 ba32 	b.w	800a618 <_calloc_r>
 800a1b4:	200001a0 	.word	0x200001a0

0800a1b8 <__errno>:
 800a1b8:	4b01      	ldr	r3, [pc, #4]	; (800a1c0 <__errno+0x8>)
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	200001a0 	.word	0x200001a0

0800a1c4 <__sflush_r>:
 800a1c4:	898a      	ldrh	r2, [r1, #12]
 800a1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	0710      	lsls	r0, r2, #28
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	d458      	bmi.n	800a284 <__sflush_r+0xc0>
 800a1d2:	684b      	ldr	r3, [r1, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc05      	bgt.n	800a1e4 <__sflush_r+0x20>
 800a1d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dc02      	bgt.n	800a1e4 <__sflush_r+0x20>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	d0f9      	beq.n	800a1de <__sflush_r+0x1a>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1f0:	682f      	ldr	r7, [r5, #0]
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	d032      	beq.n	800a25c <__sflush_r+0x98>
 800a1f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	075a      	lsls	r2, r3, #29
 800a1fc:	d505      	bpl.n	800a20a <__sflush_r+0x46>
 800a1fe:	6863      	ldr	r3, [r4, #4]
 800a200:	1ac0      	subs	r0, r0, r3
 800a202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a204:	b10b      	cbz	r3, 800a20a <__sflush_r+0x46>
 800a206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a208:	1ac0      	subs	r0, r0, r3
 800a20a:	2300      	movs	r3, #0
 800a20c:	4602      	mov	r2, r0
 800a20e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a210:	6a21      	ldr	r1, [r4, #32]
 800a212:	4628      	mov	r0, r5
 800a214:	47b0      	blx	r6
 800a216:	1c43      	adds	r3, r0, #1
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	d106      	bne.n	800a22a <__sflush_r+0x66>
 800a21c:	6829      	ldr	r1, [r5, #0]
 800a21e:	291d      	cmp	r1, #29
 800a220:	d82c      	bhi.n	800a27c <__sflush_r+0xb8>
 800a222:	4a2a      	ldr	r2, [pc, #168]	; (800a2cc <__sflush_r+0x108>)
 800a224:	40ca      	lsrs	r2, r1
 800a226:	07d6      	lsls	r6, r2, #31
 800a228:	d528      	bpl.n	800a27c <__sflush_r+0xb8>
 800a22a:	2200      	movs	r2, #0
 800a22c:	6062      	str	r2, [r4, #4]
 800a22e:	04d9      	lsls	r1, r3, #19
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	6022      	str	r2, [r4, #0]
 800a234:	d504      	bpl.n	800a240 <__sflush_r+0x7c>
 800a236:	1c42      	adds	r2, r0, #1
 800a238:	d101      	bne.n	800a23e <__sflush_r+0x7a>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b903      	cbnz	r3, 800a240 <__sflush_r+0x7c>
 800a23e:	6560      	str	r0, [r4, #84]	; 0x54
 800a240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a242:	602f      	str	r7, [r5, #0]
 800a244:	2900      	cmp	r1, #0
 800a246:	d0ca      	beq.n	800a1de <__sflush_r+0x1a>
 800a248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a24c:	4299      	cmp	r1, r3
 800a24e:	d002      	beq.n	800a256 <__sflush_r+0x92>
 800a250:	4628      	mov	r0, r5
 800a252:	f000 f9f7 	bl	800a644 <_free_r>
 800a256:	2000      	movs	r0, #0
 800a258:	6360      	str	r0, [r4, #52]	; 0x34
 800a25a:	e7c1      	b.n	800a1e0 <__sflush_r+0x1c>
 800a25c:	6a21      	ldr	r1, [r4, #32]
 800a25e:	2301      	movs	r3, #1
 800a260:	4628      	mov	r0, r5
 800a262:	47b0      	blx	r6
 800a264:	1c41      	adds	r1, r0, #1
 800a266:	d1c7      	bne.n	800a1f8 <__sflush_r+0x34>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0c4      	beq.n	800a1f8 <__sflush_r+0x34>
 800a26e:	2b1d      	cmp	r3, #29
 800a270:	d001      	beq.n	800a276 <__sflush_r+0xb2>
 800a272:	2b16      	cmp	r3, #22
 800a274:	d101      	bne.n	800a27a <__sflush_r+0xb6>
 800a276:	602f      	str	r7, [r5, #0]
 800a278:	e7b1      	b.n	800a1de <__sflush_r+0x1a>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	e7ad      	b.n	800a1e0 <__sflush_r+0x1c>
 800a284:	690f      	ldr	r7, [r1, #16]
 800a286:	2f00      	cmp	r7, #0
 800a288:	d0a9      	beq.n	800a1de <__sflush_r+0x1a>
 800a28a:	0793      	lsls	r3, r2, #30
 800a28c:	680e      	ldr	r6, [r1, #0]
 800a28e:	bf08      	it	eq
 800a290:	694b      	ldreq	r3, [r1, #20]
 800a292:	600f      	str	r7, [r1, #0]
 800a294:	bf18      	it	ne
 800a296:	2300      	movne	r3, #0
 800a298:	eba6 0807 	sub.w	r8, r6, r7
 800a29c:	608b      	str	r3, [r1, #8]
 800a29e:	f1b8 0f00 	cmp.w	r8, #0
 800a2a2:	dd9c      	ble.n	800a1de <__sflush_r+0x1a>
 800a2a4:	6a21      	ldr	r1, [r4, #32]
 800a2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2a8:	4643      	mov	r3, r8
 800a2aa:	463a      	mov	r2, r7
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	47b0      	blx	r6
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	dc06      	bgt.n	800a2c2 <__sflush_r+0xfe>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e78e      	b.n	800a1e0 <__sflush_r+0x1c>
 800a2c2:	4407      	add	r7, r0
 800a2c4:	eba8 0800 	sub.w	r8, r8, r0
 800a2c8:	e7e9      	b.n	800a29e <__sflush_r+0xda>
 800a2ca:	bf00      	nop
 800a2cc:	20400001 	.word	0x20400001

0800a2d0 <_fflush_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	b913      	cbnz	r3, 800a2e0 <_fflush_r+0x10>
 800a2da:	2500      	movs	r5, #0
 800a2dc:	4628      	mov	r0, r5
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	b118      	cbz	r0, 800a2ea <_fflush_r+0x1a>
 800a2e2:	6983      	ldr	r3, [r0, #24]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <_fflush_r+0x1a>
 800a2e6:	f000 f899 	bl	800a41c <__sinit>
 800a2ea:	4b14      	ldr	r3, [pc, #80]	; (800a33c <_fflush_r+0x6c>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	d11b      	bne.n	800a328 <_fflush_r+0x58>
 800a2f0:	686c      	ldr	r4, [r5, #4]
 800a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0ef      	beq.n	800a2da <_fflush_r+0xa>
 800a2fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2fc:	07d0      	lsls	r0, r2, #31
 800a2fe:	d404      	bmi.n	800a30a <_fflush_r+0x3a>
 800a300:	0599      	lsls	r1, r3, #22
 800a302:	d402      	bmi.n	800a30a <_fflush_r+0x3a>
 800a304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a306:	f000 f94c 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800a30a:	4628      	mov	r0, r5
 800a30c:	4621      	mov	r1, r4
 800a30e:	f7ff ff59 	bl	800a1c4 <__sflush_r>
 800a312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a314:	07da      	lsls	r2, r3, #31
 800a316:	4605      	mov	r5, r0
 800a318:	d4e0      	bmi.n	800a2dc <_fflush_r+0xc>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	059b      	lsls	r3, r3, #22
 800a31e:	d4dd      	bmi.n	800a2dc <_fflush_r+0xc>
 800a320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a322:	f000 f93f 	bl	800a5a4 <__retarget_lock_release_recursive>
 800a326:	e7d9      	b.n	800a2dc <_fflush_r+0xc>
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <_fflush_r+0x70>)
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d101      	bne.n	800a332 <_fflush_r+0x62>
 800a32e:	68ac      	ldr	r4, [r5, #8]
 800a330:	e7df      	b.n	800a2f2 <_fflush_r+0x22>
 800a332:	4b04      	ldr	r3, [pc, #16]	; (800a344 <_fflush_r+0x74>)
 800a334:	429c      	cmp	r4, r3
 800a336:	bf08      	it	eq
 800a338:	68ec      	ldreq	r4, [r5, #12]
 800a33a:	e7da      	b.n	800a2f2 <_fflush_r+0x22>
 800a33c:	0800bb3c 	.word	0x0800bb3c
 800a340:	0800bb5c 	.word	0x0800bb5c
 800a344:	0800bb1c 	.word	0x0800bb1c

0800a348 <fflush>:
 800a348:	4601      	mov	r1, r0
 800a34a:	b920      	cbnz	r0, 800a356 <fflush+0xe>
 800a34c:	4b04      	ldr	r3, [pc, #16]	; (800a360 <fflush+0x18>)
 800a34e:	4905      	ldr	r1, [pc, #20]	; (800a364 <fflush+0x1c>)
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f000 b8e1 	b.w	800a518 <_fwalk_reent>
 800a356:	4b04      	ldr	r3, [pc, #16]	; (800a368 <fflush+0x20>)
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	f7ff bfb9 	b.w	800a2d0 <_fflush_r>
 800a35e:	bf00      	nop
 800a360:	0800bb7c 	.word	0x0800bb7c
 800a364:	0800a2d1 	.word	0x0800a2d1
 800a368:	200001a0 	.word	0x200001a0

0800a36c <std>:
 800a36c:	2300      	movs	r3, #0
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	e9c0 3300 	strd	r3, r3, [r0]
 800a376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37a:	6083      	str	r3, [r0, #8]
 800a37c:	8181      	strh	r1, [r0, #12]
 800a37e:	6643      	str	r3, [r0, #100]	; 0x64
 800a380:	81c2      	strh	r2, [r0, #14]
 800a382:	6183      	str	r3, [r0, #24]
 800a384:	4619      	mov	r1, r3
 800a386:	2208      	movs	r2, #8
 800a388:	305c      	adds	r0, #92	; 0x5c
 800a38a:	f000 f93d 	bl	800a608 <memset>
 800a38e:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <std+0x38>)
 800a390:	6263      	str	r3, [r4, #36]	; 0x24
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <std+0x3c>)
 800a394:	62a3      	str	r3, [r4, #40]	; 0x28
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <std+0x40>)
 800a398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <std+0x44>)
 800a39c:	6224      	str	r4, [r4, #32]
 800a39e:	6323      	str	r3, [r4, #48]	; 0x30
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800a9a9 	.word	0x0800a9a9
 800a3a8:	0800a9cb 	.word	0x0800a9cb
 800a3ac:	0800aa03 	.word	0x0800aa03
 800a3b0:	0800aa27 	.word	0x0800aa27

0800a3b4 <_cleanup_r>:
 800a3b4:	4901      	ldr	r1, [pc, #4]	; (800a3bc <_cleanup_r+0x8>)
 800a3b6:	f000 b8af 	b.w	800a518 <_fwalk_reent>
 800a3ba:	bf00      	nop
 800a3bc:	0800a2d1 	.word	0x0800a2d1

0800a3c0 <__sfmoreglue>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	2268      	movs	r2, #104	; 0x68
 800a3c4:	1e4d      	subs	r5, r1, #1
 800a3c6:	4355      	muls	r5, r2
 800a3c8:	460e      	mov	r6, r1
 800a3ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3ce:	f000 f9a5 	bl	800a71c <_malloc_r>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	b140      	cbz	r0, 800a3e8 <__sfmoreglue+0x28>
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a3dc:	300c      	adds	r0, #12
 800a3de:	60a0      	str	r0, [r4, #8]
 800a3e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3e4:	f000 f910 	bl	800a608 <memset>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}

0800a3ec <__sfp_lock_acquire>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	; (800a3f4 <__sfp_lock_acquire+0x8>)
 800a3ee:	f000 b8d8 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	20000871 	.word	0x20000871

0800a3f8 <__sfp_lock_release>:
 800a3f8:	4801      	ldr	r0, [pc, #4]	; (800a400 <__sfp_lock_release+0x8>)
 800a3fa:	f000 b8d3 	b.w	800a5a4 <__retarget_lock_release_recursive>
 800a3fe:	bf00      	nop
 800a400:	20000871 	.word	0x20000871

0800a404 <__sinit_lock_acquire>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__sinit_lock_acquire+0x8>)
 800a406:	f000 b8cc 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	20000872 	.word	0x20000872

0800a410 <__sinit_lock_release>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__sinit_lock_release+0x8>)
 800a412:	f000 b8c7 	b.w	800a5a4 <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	20000872 	.word	0x20000872

0800a41c <__sinit>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	4604      	mov	r4, r0
 800a420:	f7ff fff0 	bl	800a404 <__sinit_lock_acquire>
 800a424:	69a3      	ldr	r3, [r4, #24]
 800a426:	b11b      	cbz	r3, 800a430 <__sinit+0x14>
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42c:	f7ff bff0 	b.w	800a410 <__sinit_lock_release>
 800a430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a434:	6523      	str	r3, [r4, #80]	; 0x50
 800a436:	4b13      	ldr	r3, [pc, #76]	; (800a484 <__sinit+0x68>)
 800a438:	4a13      	ldr	r2, [pc, #76]	; (800a488 <__sinit+0x6c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a43e:	42a3      	cmp	r3, r4
 800a440:	bf04      	itt	eq
 800a442:	2301      	moveq	r3, #1
 800a444:	61a3      	streq	r3, [r4, #24]
 800a446:	4620      	mov	r0, r4
 800a448:	f000 f820 	bl	800a48c <__sfp>
 800a44c:	6060      	str	r0, [r4, #4]
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 f81c 	bl	800a48c <__sfp>
 800a454:	60a0      	str	r0, [r4, #8]
 800a456:	4620      	mov	r0, r4
 800a458:	f000 f818 	bl	800a48c <__sfp>
 800a45c:	2200      	movs	r2, #0
 800a45e:	60e0      	str	r0, [r4, #12]
 800a460:	2104      	movs	r1, #4
 800a462:	6860      	ldr	r0, [r4, #4]
 800a464:	f7ff ff82 	bl	800a36c <std>
 800a468:	68a0      	ldr	r0, [r4, #8]
 800a46a:	2201      	movs	r2, #1
 800a46c:	2109      	movs	r1, #9
 800a46e:	f7ff ff7d 	bl	800a36c <std>
 800a472:	68e0      	ldr	r0, [r4, #12]
 800a474:	2202      	movs	r2, #2
 800a476:	2112      	movs	r1, #18
 800a478:	f7ff ff78 	bl	800a36c <std>
 800a47c:	2301      	movs	r3, #1
 800a47e:	61a3      	str	r3, [r4, #24]
 800a480:	e7d2      	b.n	800a428 <__sinit+0xc>
 800a482:	bf00      	nop
 800a484:	0800bb7c 	.word	0x0800bb7c
 800a488:	0800a3b5 	.word	0x0800a3b5

0800a48c <__sfp>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	4607      	mov	r7, r0
 800a490:	f7ff ffac 	bl	800a3ec <__sfp_lock_acquire>
 800a494:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <__sfp+0x84>)
 800a496:	681e      	ldr	r6, [r3, #0]
 800a498:	69b3      	ldr	r3, [r6, #24]
 800a49a:	b913      	cbnz	r3, 800a4a2 <__sfp+0x16>
 800a49c:	4630      	mov	r0, r6
 800a49e:	f7ff ffbd 	bl	800a41c <__sinit>
 800a4a2:	3648      	adds	r6, #72	; 0x48
 800a4a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	d503      	bpl.n	800a4b4 <__sfp+0x28>
 800a4ac:	6833      	ldr	r3, [r6, #0]
 800a4ae:	b30b      	cbz	r3, 800a4f4 <__sfp+0x68>
 800a4b0:	6836      	ldr	r6, [r6, #0]
 800a4b2:	e7f7      	b.n	800a4a4 <__sfp+0x18>
 800a4b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4b8:	b9d5      	cbnz	r5, 800a4f0 <__sfp+0x64>
 800a4ba:	4b16      	ldr	r3, [pc, #88]	; (800a514 <__sfp+0x88>)
 800a4bc:	60e3      	str	r3, [r4, #12]
 800a4be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4c2:	6665      	str	r5, [r4, #100]	; 0x64
 800a4c4:	f000 f86c 	bl	800a5a0 <__retarget_lock_init_recursive>
 800a4c8:	f7ff ff96 	bl	800a3f8 <__sfp_lock_release>
 800a4cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4d4:	6025      	str	r5, [r4, #0]
 800a4d6:	61a5      	str	r5, [r4, #24]
 800a4d8:	2208      	movs	r2, #8
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4e0:	f000 f892 	bl	800a608 <memset>
 800a4e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f0:	3468      	adds	r4, #104	; 0x68
 800a4f2:	e7d9      	b.n	800a4a8 <__sfp+0x1c>
 800a4f4:	2104      	movs	r1, #4
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f7ff ff62 	bl	800a3c0 <__sfmoreglue>
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	6030      	str	r0, [r6, #0]
 800a500:	2800      	cmp	r0, #0
 800a502:	d1d5      	bne.n	800a4b0 <__sfp+0x24>
 800a504:	f7ff ff78 	bl	800a3f8 <__sfp_lock_release>
 800a508:	230c      	movs	r3, #12
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	e7ee      	b.n	800a4ec <__sfp+0x60>
 800a50e:	bf00      	nop
 800a510:	0800bb7c 	.word	0x0800bb7c
 800a514:	ffff0001 	.word	0xffff0001

0800a518 <_fwalk_reent>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	4606      	mov	r6, r0
 800a51e:	4688      	mov	r8, r1
 800a520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a524:	2700      	movs	r7, #0
 800a526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a52a:	f1b9 0901 	subs.w	r9, r9, #1
 800a52e:	d505      	bpl.n	800a53c <_fwalk_reent+0x24>
 800a530:	6824      	ldr	r4, [r4, #0]
 800a532:	2c00      	cmp	r4, #0
 800a534:	d1f7      	bne.n	800a526 <_fwalk_reent+0xe>
 800a536:	4638      	mov	r0, r7
 800a538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53c:	89ab      	ldrh	r3, [r5, #12]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d907      	bls.n	800a552 <_fwalk_reent+0x3a>
 800a542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a546:	3301      	adds	r3, #1
 800a548:	d003      	beq.n	800a552 <_fwalk_reent+0x3a>
 800a54a:	4629      	mov	r1, r5
 800a54c:	4630      	mov	r0, r6
 800a54e:	47c0      	blx	r8
 800a550:	4307      	orrs	r7, r0
 800a552:	3568      	adds	r5, #104	; 0x68
 800a554:	e7e9      	b.n	800a52a <_fwalk_reent+0x12>
	...

0800a558 <__libc_init_array>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	4d0d      	ldr	r5, [pc, #52]	; (800a590 <__libc_init_array+0x38>)
 800a55c:	4c0d      	ldr	r4, [pc, #52]	; (800a594 <__libc_init_array+0x3c>)
 800a55e:	1b64      	subs	r4, r4, r5
 800a560:	10a4      	asrs	r4, r4, #2
 800a562:	2600      	movs	r6, #0
 800a564:	42a6      	cmp	r6, r4
 800a566:	d109      	bne.n	800a57c <__libc_init_array+0x24>
 800a568:	4d0b      	ldr	r5, [pc, #44]	; (800a598 <__libc_init_array+0x40>)
 800a56a:	4c0c      	ldr	r4, [pc, #48]	; (800a59c <__libc_init_array+0x44>)
 800a56c:	f001 f87c 	bl	800b668 <_init>
 800a570:	1b64      	subs	r4, r4, r5
 800a572:	10a4      	asrs	r4, r4, #2
 800a574:	2600      	movs	r6, #0
 800a576:	42a6      	cmp	r6, r4
 800a578:	d105      	bne.n	800a586 <__libc_init_array+0x2e>
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a580:	4798      	blx	r3
 800a582:	3601      	adds	r6, #1
 800a584:	e7ee      	b.n	800a564 <__libc_init_array+0xc>
 800a586:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58a:	4798      	blx	r3
 800a58c:	3601      	adds	r6, #1
 800a58e:	e7f2      	b.n	800a576 <__libc_init_array+0x1e>
 800a590:	0800bbbc 	.word	0x0800bbbc
 800a594:	0800bbbc 	.word	0x0800bbbc
 800a598:	0800bbbc 	.word	0x0800bbbc
 800a59c:	0800bbc0 	.word	0x0800bbc0

0800a5a0 <__retarget_lock_init_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <__retarget_lock_acquire_recursive>:
 800a5a2:	4770      	bx	lr

0800a5a4 <__retarget_lock_release_recursive>:
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <free>:
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <free+0xc>)
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	f000 b849 	b.w	800a644 <_free_r>
 800a5b2:	bf00      	nop
 800a5b4:	200001a0 	.word	0x200001a0

0800a5b8 <memcpy>:
 800a5b8:	440a      	add	r2, r1
 800a5ba:	4291      	cmp	r1, r2
 800a5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5c0:	d100      	bne.n	800a5c4 <memcpy+0xc>
 800a5c2:	4770      	bx	lr
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ce:	4291      	cmp	r1, r2
 800a5d0:	d1f9      	bne.n	800a5c6 <memcpy+0xe>
 800a5d2:	bd10      	pop	{r4, pc}

0800a5d4 <memmove>:
 800a5d4:	4288      	cmp	r0, r1
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	eb01 0402 	add.w	r4, r1, r2
 800a5dc:	d902      	bls.n	800a5e4 <memmove+0x10>
 800a5de:	4284      	cmp	r4, r0
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	d807      	bhi.n	800a5f4 <memmove+0x20>
 800a5e4:	1e43      	subs	r3, r0, #1
 800a5e6:	42a1      	cmp	r1, r4
 800a5e8:	d008      	beq.n	800a5fc <memmove+0x28>
 800a5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5f2:	e7f8      	b.n	800a5e6 <memmove+0x12>
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	428a      	cmp	r2, r1
 800a5fa:	d100      	bne.n	800a5fe <memmove+0x2a>
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a606:	e7f7      	b.n	800a5f8 <memmove+0x24>

0800a608 <memset>:
 800a608:	4402      	add	r2, r0
 800a60a:	4603      	mov	r3, r0
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d100      	bne.n	800a612 <memset+0xa>
 800a610:	4770      	bx	lr
 800a612:	f803 1b01 	strb.w	r1, [r3], #1
 800a616:	e7f9      	b.n	800a60c <memset+0x4>

0800a618 <_calloc_r>:
 800a618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a61a:	fba1 2402 	umull	r2, r4, r1, r2
 800a61e:	b94c      	cbnz	r4, 800a634 <_calloc_r+0x1c>
 800a620:	4611      	mov	r1, r2
 800a622:	9201      	str	r2, [sp, #4]
 800a624:	f000 f87a 	bl	800a71c <_malloc_r>
 800a628:	9a01      	ldr	r2, [sp, #4]
 800a62a:	4605      	mov	r5, r0
 800a62c:	b930      	cbnz	r0, 800a63c <_calloc_r+0x24>
 800a62e:	4628      	mov	r0, r5
 800a630:	b003      	add	sp, #12
 800a632:	bd30      	pop	{r4, r5, pc}
 800a634:	220c      	movs	r2, #12
 800a636:	6002      	str	r2, [r0, #0]
 800a638:	2500      	movs	r5, #0
 800a63a:	e7f8      	b.n	800a62e <_calloc_r+0x16>
 800a63c:	4621      	mov	r1, r4
 800a63e:	f7ff ffe3 	bl	800a608 <memset>
 800a642:	e7f4      	b.n	800a62e <_calloc_r+0x16>

0800a644 <_free_r>:
 800a644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a646:	2900      	cmp	r1, #0
 800a648:	d044      	beq.n	800a6d4 <_free_r+0x90>
 800a64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a64e:	9001      	str	r0, [sp, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f1a1 0404 	sub.w	r4, r1, #4
 800a656:	bfb8      	it	lt
 800a658:	18e4      	addlt	r4, r4, r3
 800a65a:	f000 fb43 	bl	800ace4 <__malloc_lock>
 800a65e:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <_free_r+0x94>)
 800a660:	9801      	ldr	r0, [sp, #4]
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	b933      	cbnz	r3, 800a674 <_free_r+0x30>
 800a666:	6063      	str	r3, [r4, #4]
 800a668:	6014      	str	r4, [r2, #0]
 800a66a:	b003      	add	sp, #12
 800a66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a670:	f000 bb3e 	b.w	800acf0 <__malloc_unlock>
 800a674:	42a3      	cmp	r3, r4
 800a676:	d908      	bls.n	800a68a <_free_r+0x46>
 800a678:	6825      	ldr	r5, [r4, #0]
 800a67a:	1961      	adds	r1, r4, r5
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf01      	itttt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	1949      	addeq	r1, r1, r5
 800a686:	6021      	streq	r1, [r4, #0]
 800a688:	e7ed      	b.n	800a666 <_free_r+0x22>
 800a68a:	461a      	mov	r2, r3
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	b10b      	cbz	r3, 800a694 <_free_r+0x50>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d9fa      	bls.n	800a68a <_free_r+0x46>
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	1855      	adds	r5, r2, r1
 800a698:	42a5      	cmp	r5, r4
 800a69a:	d10b      	bne.n	800a6b4 <_free_r+0x70>
 800a69c:	6824      	ldr	r4, [r4, #0]
 800a69e:	4421      	add	r1, r4
 800a6a0:	1854      	adds	r4, r2, r1
 800a6a2:	42a3      	cmp	r3, r4
 800a6a4:	6011      	str	r1, [r2, #0]
 800a6a6:	d1e0      	bne.n	800a66a <_free_r+0x26>
 800a6a8:	681c      	ldr	r4, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	6053      	str	r3, [r2, #4]
 800a6ae:	4421      	add	r1, r4
 800a6b0:	6011      	str	r1, [r2, #0]
 800a6b2:	e7da      	b.n	800a66a <_free_r+0x26>
 800a6b4:	d902      	bls.n	800a6bc <_free_r+0x78>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	6003      	str	r3, [r0, #0]
 800a6ba:	e7d6      	b.n	800a66a <_free_r+0x26>
 800a6bc:	6825      	ldr	r5, [r4, #0]
 800a6be:	1961      	adds	r1, r4, r5
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf04      	itt	eq
 800a6c4:	6819      	ldreq	r1, [r3, #0]
 800a6c6:	685b      	ldreq	r3, [r3, #4]
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	bf04      	itt	eq
 800a6cc:	1949      	addeq	r1, r1, r5
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	6054      	str	r4, [r2, #4]
 800a6d2:	e7ca      	b.n	800a66a <_free_r+0x26>
 800a6d4:	b003      	add	sp, #12
 800a6d6:	bd30      	pop	{r4, r5, pc}
 800a6d8:	20000874 	.word	0x20000874

0800a6dc <sbrk_aligned>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	4e0e      	ldr	r6, [pc, #56]	; (800a718 <sbrk_aligned+0x3c>)
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	6831      	ldr	r1, [r6, #0]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	b911      	cbnz	r1, 800a6ee <sbrk_aligned+0x12>
 800a6e8:	f000 f91a 	bl	800a920 <_sbrk_r>
 800a6ec:	6030      	str	r0, [r6, #0]
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 f915 	bl	800a920 <_sbrk_r>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d00a      	beq.n	800a710 <sbrk_aligned+0x34>
 800a6fa:	1cc4      	adds	r4, r0, #3
 800a6fc:	f024 0403 	bic.w	r4, r4, #3
 800a700:	42a0      	cmp	r0, r4
 800a702:	d007      	beq.n	800a714 <sbrk_aligned+0x38>
 800a704:	1a21      	subs	r1, r4, r0
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f90a 	bl	800a920 <_sbrk_r>
 800a70c:	3001      	adds	r0, #1
 800a70e:	d101      	bne.n	800a714 <sbrk_aligned+0x38>
 800a710:	f04f 34ff 	mov.w	r4, #4294967295
 800a714:	4620      	mov	r0, r4
 800a716:	bd70      	pop	{r4, r5, r6, pc}
 800a718:	20000878 	.word	0x20000878

0800a71c <_malloc_r>:
 800a71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a720:	1ccd      	adds	r5, r1, #3
 800a722:	f025 0503 	bic.w	r5, r5, #3
 800a726:	3508      	adds	r5, #8
 800a728:	2d0c      	cmp	r5, #12
 800a72a:	bf38      	it	cc
 800a72c:	250c      	movcc	r5, #12
 800a72e:	2d00      	cmp	r5, #0
 800a730:	4607      	mov	r7, r0
 800a732:	db01      	blt.n	800a738 <_malloc_r+0x1c>
 800a734:	42a9      	cmp	r1, r5
 800a736:	d905      	bls.n	800a744 <_malloc_r+0x28>
 800a738:	230c      	movs	r3, #12
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	2600      	movs	r6, #0
 800a73e:	4630      	mov	r0, r6
 800a740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a744:	4e2e      	ldr	r6, [pc, #184]	; (800a800 <_malloc_r+0xe4>)
 800a746:	f000 facd 	bl	800ace4 <__malloc_lock>
 800a74a:	6833      	ldr	r3, [r6, #0]
 800a74c:	461c      	mov	r4, r3
 800a74e:	bb34      	cbnz	r4, 800a79e <_malloc_r+0x82>
 800a750:	4629      	mov	r1, r5
 800a752:	4638      	mov	r0, r7
 800a754:	f7ff ffc2 	bl	800a6dc <sbrk_aligned>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	4604      	mov	r4, r0
 800a75c:	d14d      	bne.n	800a7fa <_malloc_r+0xde>
 800a75e:	6834      	ldr	r4, [r6, #0]
 800a760:	4626      	mov	r6, r4
 800a762:	2e00      	cmp	r6, #0
 800a764:	d140      	bne.n	800a7e8 <_malloc_r+0xcc>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	4631      	mov	r1, r6
 800a76a:	4638      	mov	r0, r7
 800a76c:	eb04 0803 	add.w	r8, r4, r3
 800a770:	f000 f8d6 	bl	800a920 <_sbrk_r>
 800a774:	4580      	cmp	r8, r0
 800a776:	d13a      	bne.n	800a7ee <_malloc_r+0xd2>
 800a778:	6821      	ldr	r1, [r4, #0]
 800a77a:	3503      	adds	r5, #3
 800a77c:	1a6d      	subs	r5, r5, r1
 800a77e:	f025 0503 	bic.w	r5, r5, #3
 800a782:	3508      	adds	r5, #8
 800a784:	2d0c      	cmp	r5, #12
 800a786:	bf38      	it	cc
 800a788:	250c      	movcc	r5, #12
 800a78a:	4629      	mov	r1, r5
 800a78c:	4638      	mov	r0, r7
 800a78e:	f7ff ffa5 	bl	800a6dc <sbrk_aligned>
 800a792:	3001      	adds	r0, #1
 800a794:	d02b      	beq.n	800a7ee <_malloc_r+0xd2>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	442b      	add	r3, r5
 800a79a:	6023      	str	r3, [r4, #0]
 800a79c:	e00e      	b.n	800a7bc <_malloc_r+0xa0>
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	1b52      	subs	r2, r2, r5
 800a7a2:	d41e      	bmi.n	800a7e2 <_malloc_r+0xc6>
 800a7a4:	2a0b      	cmp	r2, #11
 800a7a6:	d916      	bls.n	800a7d6 <_malloc_r+0xba>
 800a7a8:	1961      	adds	r1, r4, r5
 800a7aa:	42a3      	cmp	r3, r4
 800a7ac:	6025      	str	r5, [r4, #0]
 800a7ae:	bf18      	it	ne
 800a7b0:	6059      	strne	r1, [r3, #4]
 800a7b2:	6863      	ldr	r3, [r4, #4]
 800a7b4:	bf08      	it	eq
 800a7b6:	6031      	streq	r1, [r6, #0]
 800a7b8:	5162      	str	r2, [r4, r5]
 800a7ba:	604b      	str	r3, [r1, #4]
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f104 060b 	add.w	r6, r4, #11
 800a7c2:	f000 fa95 	bl	800acf0 <__malloc_unlock>
 800a7c6:	f026 0607 	bic.w	r6, r6, #7
 800a7ca:	1d23      	adds	r3, r4, #4
 800a7cc:	1af2      	subs	r2, r6, r3
 800a7ce:	d0b6      	beq.n	800a73e <_malloc_r+0x22>
 800a7d0:	1b9b      	subs	r3, r3, r6
 800a7d2:	50a3      	str	r3, [r4, r2]
 800a7d4:	e7b3      	b.n	800a73e <_malloc_r+0x22>
 800a7d6:	6862      	ldr	r2, [r4, #4]
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	bf0c      	ite	eq
 800a7dc:	6032      	streq	r2, [r6, #0]
 800a7de:	605a      	strne	r2, [r3, #4]
 800a7e0:	e7ec      	b.n	800a7bc <_malloc_r+0xa0>
 800a7e2:	4623      	mov	r3, r4
 800a7e4:	6864      	ldr	r4, [r4, #4]
 800a7e6:	e7b2      	b.n	800a74e <_malloc_r+0x32>
 800a7e8:	4634      	mov	r4, r6
 800a7ea:	6876      	ldr	r6, [r6, #4]
 800a7ec:	e7b9      	b.n	800a762 <_malloc_r+0x46>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	603b      	str	r3, [r7, #0]
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f000 fa7c 	bl	800acf0 <__malloc_unlock>
 800a7f8:	e7a1      	b.n	800a73e <_malloc_r+0x22>
 800a7fa:	6025      	str	r5, [r4, #0]
 800a7fc:	e7de      	b.n	800a7bc <_malloc_r+0xa0>
 800a7fe:	bf00      	nop
 800a800:	20000874 	.word	0x20000874

0800a804 <iprintf>:
 800a804:	b40f      	push	{r0, r1, r2, r3}
 800a806:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <iprintf+0x2c>)
 800a808:	b513      	push	{r0, r1, r4, lr}
 800a80a:	681c      	ldr	r4, [r3, #0]
 800a80c:	b124      	cbz	r4, 800a818 <iprintf+0x14>
 800a80e:	69a3      	ldr	r3, [r4, #24]
 800a810:	b913      	cbnz	r3, 800a818 <iprintf+0x14>
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff fe02 	bl	800a41c <__sinit>
 800a818:	ab05      	add	r3, sp, #20
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	68a1      	ldr	r1, [r4, #8]
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fbf1 	bl	800b008 <_vfiprintf_r>
 800a826:	b002      	add	sp, #8
 800a828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a82c:	b004      	add	sp, #16
 800a82e:	4770      	bx	lr
 800a830:	200001a0 	.word	0x200001a0

0800a834 <_puts_r>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	460e      	mov	r6, r1
 800a838:	4605      	mov	r5, r0
 800a83a:	b118      	cbz	r0, 800a844 <_puts_r+0x10>
 800a83c:	6983      	ldr	r3, [r0, #24]
 800a83e:	b90b      	cbnz	r3, 800a844 <_puts_r+0x10>
 800a840:	f7ff fdec 	bl	800a41c <__sinit>
 800a844:	69ab      	ldr	r3, [r5, #24]
 800a846:	68ac      	ldr	r4, [r5, #8]
 800a848:	b913      	cbnz	r3, 800a850 <_puts_r+0x1c>
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7ff fde6 	bl	800a41c <__sinit>
 800a850:	4b2c      	ldr	r3, [pc, #176]	; (800a904 <_puts_r+0xd0>)
 800a852:	429c      	cmp	r4, r3
 800a854:	d120      	bne.n	800a898 <_puts_r+0x64>
 800a856:	686c      	ldr	r4, [r5, #4]
 800a858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a85a:	07db      	lsls	r3, r3, #31
 800a85c:	d405      	bmi.n	800a86a <_puts_r+0x36>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	0598      	lsls	r0, r3, #22
 800a862:	d402      	bmi.n	800a86a <_puts_r+0x36>
 800a864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a866:	f7ff fe9c 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	0719      	lsls	r1, r3, #28
 800a86e:	d51d      	bpl.n	800a8ac <_puts_r+0x78>
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	b1db      	cbz	r3, 800a8ac <_puts_r+0x78>
 800a874:	3e01      	subs	r6, #1
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a87c:	3b01      	subs	r3, #1
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	bb39      	cbnz	r1, 800a8d2 <_puts_r+0x9e>
 800a882:	2b00      	cmp	r3, #0
 800a884:	da38      	bge.n	800a8f8 <_puts_r+0xc4>
 800a886:	4622      	mov	r2, r4
 800a888:	210a      	movs	r1, #10
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 f8d0 	bl	800aa30 <__swbuf_r>
 800a890:	3001      	adds	r0, #1
 800a892:	d011      	beq.n	800a8b8 <_puts_r+0x84>
 800a894:	250a      	movs	r5, #10
 800a896:	e011      	b.n	800a8bc <_puts_r+0x88>
 800a898:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <_puts_r+0xd4>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <_puts_r+0x6e>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7da      	b.n	800a858 <_puts_r+0x24>
 800a8a2:	4b1a      	ldr	r3, [pc, #104]	; (800a90c <_puts_r+0xd8>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7d5      	b.n	800a858 <_puts_r+0x24>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 f922 	bl	800aaf8 <__swsetup_r>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d0dd      	beq.n	800a874 <_puts_r+0x40>
 800a8b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a8bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8be:	07da      	lsls	r2, r3, #31
 800a8c0:	d405      	bmi.n	800a8ce <_puts_r+0x9a>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	059b      	lsls	r3, r3, #22
 800a8c6:	d402      	bmi.n	800a8ce <_puts_r+0x9a>
 800a8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ca:	f7ff fe6b 	bl	800a5a4 <__retarget_lock_release_recursive>
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	bd70      	pop	{r4, r5, r6, pc}
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da04      	bge.n	800a8e0 <_puts_r+0xac>
 800a8d6:	69a2      	ldr	r2, [r4, #24]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	dc06      	bgt.n	800a8ea <_puts_r+0xb6>
 800a8dc:	290a      	cmp	r1, #10
 800a8de:	d004      	beq.n	800a8ea <_puts_r+0xb6>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	6022      	str	r2, [r4, #0]
 800a8e6:	7019      	strb	r1, [r3, #0]
 800a8e8:	e7c5      	b.n	800a876 <_puts_r+0x42>
 800a8ea:	4622      	mov	r2, r4
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 f89f 	bl	800aa30 <__swbuf_r>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	d1bf      	bne.n	800a876 <_puts_r+0x42>
 800a8f6:	e7df      	b.n	800a8b8 <_puts_r+0x84>
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	250a      	movs	r5, #10
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	6022      	str	r2, [r4, #0]
 800a900:	701d      	strb	r5, [r3, #0]
 800a902:	e7db      	b.n	800a8bc <_puts_r+0x88>
 800a904:	0800bb3c 	.word	0x0800bb3c
 800a908:	0800bb5c 	.word	0x0800bb5c
 800a90c:	0800bb1c 	.word	0x0800bb1c

0800a910 <puts>:
 800a910:	4b02      	ldr	r3, [pc, #8]	; (800a91c <puts+0xc>)
 800a912:	4601      	mov	r1, r0
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	f7ff bf8d 	b.w	800a834 <_puts_r>
 800a91a:	bf00      	nop
 800a91c:	200001a0 	.word	0x200001a0

0800a920 <_sbrk_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d06      	ldr	r5, [pc, #24]	; (800a93c <_sbrk_r+0x1c>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7fc f9ac 	bl	8006c88 <_sbrk>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_sbrk_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_sbrk_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	2000087c 	.word	0x2000087c

0800a940 <sniprintf>:
 800a940:	b40c      	push	{r2, r3}
 800a942:	b530      	push	{r4, r5, lr}
 800a944:	4b17      	ldr	r3, [pc, #92]	; (800a9a4 <sniprintf+0x64>)
 800a946:	1e0c      	subs	r4, r1, #0
 800a948:	681d      	ldr	r5, [r3, #0]
 800a94a:	b09d      	sub	sp, #116	; 0x74
 800a94c:	da08      	bge.n	800a960 <sniprintf+0x20>
 800a94e:	238b      	movs	r3, #139	; 0x8b
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	f04f 30ff 	mov.w	r0, #4294967295
 800a956:	b01d      	add	sp, #116	; 0x74
 800a958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a95c:	b002      	add	sp, #8
 800a95e:	4770      	bx	lr
 800a960:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a964:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a968:	bf14      	ite	ne
 800a96a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a96e:	4623      	moveq	r3, r4
 800a970:	9304      	str	r3, [sp, #16]
 800a972:	9307      	str	r3, [sp, #28]
 800a974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a978:	9002      	str	r0, [sp, #8]
 800a97a:	9006      	str	r0, [sp, #24]
 800a97c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a980:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a982:	ab21      	add	r3, sp, #132	; 0x84
 800a984:	a902      	add	r1, sp, #8
 800a986:	4628      	mov	r0, r5
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	f000 fa13 	bl	800adb4 <_svfiprintf_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	bfbc      	itt	lt
 800a992:	238b      	movlt	r3, #139	; 0x8b
 800a994:	602b      	strlt	r3, [r5, #0]
 800a996:	2c00      	cmp	r4, #0
 800a998:	d0dd      	beq.n	800a956 <sniprintf+0x16>
 800a99a:	9b02      	ldr	r3, [sp, #8]
 800a99c:	2200      	movs	r2, #0
 800a99e:	701a      	strb	r2, [r3, #0]
 800a9a0:	e7d9      	b.n	800a956 <sniprintf+0x16>
 800a9a2:	bf00      	nop
 800a9a4:	200001a0 	.word	0x200001a0

0800a9a8 <__sread>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	f000 fdee 	bl	800b590 <_read_r>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	bfab      	itete	ge
 800a9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a9bc:	181b      	addge	r3, r3, r0
 800a9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9c2:	bfac      	ite	ge
 800a9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9c6:	81a3      	strhlt	r3, [r4, #12]
 800a9c8:	bd10      	pop	{r4, pc}

0800a9ca <__swrite>:
 800a9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	898b      	ldrh	r3, [r1, #12]
 800a9d2:	05db      	lsls	r3, r3, #23
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	4616      	mov	r6, r2
 800a9da:	d505      	bpl.n	800a9e8 <__swrite+0x1e>
 800a9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f000 f906 	bl	800abf4 <_lseek_r>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fe:	f000 b869 	b.w	800aad4 <_write_r>

0800aa02 <__sseek>:
 800aa02:	b510      	push	{r4, lr}
 800aa04:	460c      	mov	r4, r1
 800aa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0a:	f000 f8f3 	bl	800abf4 <_lseek_r>
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	bf15      	itete	ne
 800aa14:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa1e:	81a3      	strheq	r3, [r4, #12]
 800aa20:	bf18      	it	ne
 800aa22:	81a3      	strhne	r3, [r4, #12]
 800aa24:	bd10      	pop	{r4, pc}

0800aa26 <__sclose>:
 800aa26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2a:	f000 b8d3 	b.w	800abd4 <_close_r>
	...

0800aa30 <__swbuf_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	460e      	mov	r6, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	4605      	mov	r5, r0
 800aa38:	b118      	cbz	r0, 800aa42 <__swbuf_r+0x12>
 800aa3a:	6983      	ldr	r3, [r0, #24]
 800aa3c:	b90b      	cbnz	r3, 800aa42 <__swbuf_r+0x12>
 800aa3e:	f7ff fced 	bl	800a41c <__sinit>
 800aa42:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <__swbuf_r+0x98>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	d12b      	bne.n	800aaa0 <__swbuf_r+0x70>
 800aa48:	686c      	ldr	r4, [r5, #4]
 800aa4a:	69a3      	ldr	r3, [r4, #24]
 800aa4c:	60a3      	str	r3, [r4, #8]
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	071a      	lsls	r2, r3, #28
 800aa52:	d52f      	bpl.n	800aab4 <__swbuf_r+0x84>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b36b      	cbz	r3, 800aab4 <__swbuf_r+0x84>
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	1ac0      	subs	r0, r0, r3
 800aa5e:	6963      	ldr	r3, [r4, #20]
 800aa60:	b2f6      	uxtb	r6, r6
 800aa62:	4283      	cmp	r3, r0
 800aa64:	4637      	mov	r7, r6
 800aa66:	dc04      	bgt.n	800aa72 <__swbuf_r+0x42>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f7ff fc30 	bl	800a2d0 <_fflush_r>
 800aa70:	bb30      	cbnz	r0, 800aac0 <__swbuf_r+0x90>
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	60a3      	str	r3, [r4, #8]
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	6022      	str	r2, [r4, #0]
 800aa7e:	701e      	strb	r6, [r3, #0]
 800aa80:	6963      	ldr	r3, [r4, #20]
 800aa82:	3001      	adds	r0, #1
 800aa84:	4283      	cmp	r3, r0
 800aa86:	d004      	beq.n	800aa92 <__swbuf_r+0x62>
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	07db      	lsls	r3, r3, #31
 800aa8c:	d506      	bpl.n	800aa9c <__swbuf_r+0x6c>
 800aa8e:	2e0a      	cmp	r6, #10
 800aa90:	d104      	bne.n	800aa9c <__swbuf_r+0x6c>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4628      	mov	r0, r5
 800aa96:	f7ff fc1b 	bl	800a2d0 <_fflush_r>
 800aa9a:	b988      	cbnz	r0, 800aac0 <__swbuf_r+0x90>
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <__swbuf_r+0x9c>)
 800aaa2:	429c      	cmp	r4, r3
 800aaa4:	d101      	bne.n	800aaaa <__swbuf_r+0x7a>
 800aaa6:	68ac      	ldr	r4, [r5, #8]
 800aaa8:	e7cf      	b.n	800aa4a <__swbuf_r+0x1a>
 800aaaa:	4b09      	ldr	r3, [pc, #36]	; (800aad0 <__swbuf_r+0xa0>)
 800aaac:	429c      	cmp	r4, r3
 800aaae:	bf08      	it	eq
 800aab0:	68ec      	ldreq	r4, [r5, #12]
 800aab2:	e7ca      	b.n	800aa4a <__swbuf_r+0x1a>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f81e 	bl	800aaf8 <__swsetup_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d0cb      	beq.n	800aa58 <__swbuf_r+0x28>
 800aac0:	f04f 37ff 	mov.w	r7, #4294967295
 800aac4:	e7ea      	b.n	800aa9c <__swbuf_r+0x6c>
 800aac6:	bf00      	nop
 800aac8:	0800bb3c 	.word	0x0800bb3c
 800aacc:	0800bb5c 	.word	0x0800bb5c
 800aad0:	0800bb1c 	.word	0x0800bb1c

0800aad4 <_write_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d07      	ldr	r5, [pc, #28]	; (800aaf4 <_write_r+0x20>)
 800aad8:	4604      	mov	r4, r0
 800aada:	4608      	mov	r0, r1
 800aadc:	4611      	mov	r1, r2
 800aade:	2200      	movs	r2, #0
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	f7fc f87f 	bl	8006be6 <_write>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d102      	bne.n	800aaf2 <_write_r+0x1e>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	b103      	cbz	r3, 800aaf2 <_write_r+0x1e>
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	2000087c 	.word	0x2000087c

0800aaf8 <__swsetup_r>:
 800aaf8:	4b32      	ldr	r3, [pc, #200]	; (800abc4 <__swsetup_r+0xcc>)
 800aafa:	b570      	push	{r4, r5, r6, lr}
 800aafc:	681d      	ldr	r5, [r3, #0]
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	b125      	cbz	r5, 800ab0e <__swsetup_r+0x16>
 800ab04:	69ab      	ldr	r3, [r5, #24]
 800ab06:	b913      	cbnz	r3, 800ab0e <__swsetup_r+0x16>
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7ff fc87 	bl	800a41c <__sinit>
 800ab0e:	4b2e      	ldr	r3, [pc, #184]	; (800abc8 <__swsetup_r+0xd0>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d10f      	bne.n	800ab34 <__swsetup_r+0x3c>
 800ab14:	686c      	ldr	r4, [r5, #4]
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab1c:	0719      	lsls	r1, r3, #28
 800ab1e:	d42c      	bmi.n	800ab7a <__swsetup_r+0x82>
 800ab20:	06dd      	lsls	r5, r3, #27
 800ab22:	d411      	bmi.n	800ab48 <__swsetup_r+0x50>
 800ab24:	2309      	movs	r3, #9
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	e03e      	b.n	800abb2 <__swsetup_r+0xba>
 800ab34:	4b25      	ldr	r3, [pc, #148]	; (800abcc <__swsetup_r+0xd4>)
 800ab36:	429c      	cmp	r4, r3
 800ab38:	d101      	bne.n	800ab3e <__swsetup_r+0x46>
 800ab3a:	68ac      	ldr	r4, [r5, #8]
 800ab3c:	e7eb      	b.n	800ab16 <__swsetup_r+0x1e>
 800ab3e:	4b24      	ldr	r3, [pc, #144]	; (800abd0 <__swsetup_r+0xd8>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	bf08      	it	eq
 800ab44:	68ec      	ldreq	r4, [r5, #12]
 800ab46:	e7e6      	b.n	800ab16 <__swsetup_r+0x1e>
 800ab48:	0758      	lsls	r0, r3, #29
 800ab4a:	d512      	bpl.n	800ab72 <__swsetup_r+0x7a>
 800ab4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab4e:	b141      	cbz	r1, 800ab62 <__swsetup_r+0x6a>
 800ab50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab54:	4299      	cmp	r1, r3
 800ab56:	d002      	beq.n	800ab5e <__swsetup_r+0x66>
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fd73 	bl	800a644 <_free_r>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6363      	str	r3, [r4, #52]	; 0x34
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f043 0308 	orr.w	r3, r3, #8
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	b94b      	cbnz	r3, 800ab92 <__swsetup_r+0x9a>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab88:	d003      	beq.n	800ab92 <__swsetup_r+0x9a>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 f869 	bl	800ac64 <__smakebuf_r>
 800ab92:	89a0      	ldrh	r0, [r4, #12]
 800ab94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab98:	f010 0301 	ands.w	r3, r0, #1
 800ab9c:	d00a      	beq.n	800abb4 <__swsetup_r+0xbc>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60a3      	str	r3, [r4, #8]
 800aba2:	6963      	ldr	r3, [r4, #20]
 800aba4:	425b      	negs	r3, r3
 800aba6:	61a3      	str	r3, [r4, #24]
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	b943      	cbnz	r3, 800abbe <__swsetup_r+0xc6>
 800abac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abb0:	d1ba      	bne.n	800ab28 <__swsetup_r+0x30>
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	0781      	lsls	r1, r0, #30
 800abb6:	bf58      	it	pl
 800abb8:	6963      	ldrpl	r3, [r4, #20]
 800abba:	60a3      	str	r3, [r4, #8]
 800abbc:	e7f4      	b.n	800aba8 <__swsetup_r+0xb0>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e7f7      	b.n	800abb2 <__swsetup_r+0xba>
 800abc2:	bf00      	nop
 800abc4:	200001a0 	.word	0x200001a0
 800abc8:	0800bb3c 	.word	0x0800bb3c
 800abcc:	0800bb5c 	.word	0x0800bb5c
 800abd0:	0800bb1c 	.word	0x0800bb1c

0800abd4 <_close_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d06      	ldr	r5, [pc, #24]	; (800abf0 <_close_r+0x1c>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	f7fc f81d 	bl	8006c1e <_close>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_close_r+0x1a>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_close_r+0x1a>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	2000087c 	.word	0x2000087c

0800abf4 <_lseek_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	; (800ac14 <_lseek_r+0x20>)
 800abf8:	4604      	mov	r4, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7fc f832 	bl	8006c6c <_lseek>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_lseek_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_lseek_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	2000087c 	.word	0x2000087c

0800ac18 <__swhatbuf_r>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	460e      	mov	r6, r1
 800ac1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac20:	2900      	cmp	r1, #0
 800ac22:	b096      	sub	sp, #88	; 0x58
 800ac24:	4614      	mov	r4, r2
 800ac26:	461d      	mov	r5, r3
 800ac28:	da08      	bge.n	800ac3c <__swhatbuf_r+0x24>
 800ac2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	602a      	str	r2, [r5, #0]
 800ac32:	061a      	lsls	r2, r3, #24
 800ac34:	d410      	bmi.n	800ac58 <__swhatbuf_r+0x40>
 800ac36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3a:	e00e      	b.n	800ac5a <__swhatbuf_r+0x42>
 800ac3c:	466a      	mov	r2, sp
 800ac3e:	f000 fcb9 	bl	800b5b4 <_fstat_r>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	dbf1      	blt.n	800ac2a <__swhatbuf_r+0x12>
 800ac46:	9a01      	ldr	r2, [sp, #4]
 800ac48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac50:	425a      	negs	r2, r3
 800ac52:	415a      	adcs	r2, r3
 800ac54:	602a      	str	r2, [r5, #0]
 800ac56:	e7ee      	b.n	800ac36 <__swhatbuf_r+0x1e>
 800ac58:	2340      	movs	r3, #64	; 0x40
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	b016      	add	sp, #88	; 0x58
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac64 <__smakebuf_r>:
 800ac64:	898b      	ldrh	r3, [r1, #12]
 800ac66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac68:	079d      	lsls	r5, r3, #30
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	d507      	bpl.n	800ac80 <__smakebuf_r+0x1c>
 800ac70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	6163      	str	r3, [r4, #20]
 800ac7c:	b002      	add	sp, #8
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	ab01      	add	r3, sp, #4
 800ac82:	466a      	mov	r2, sp
 800ac84:	f7ff ffc8 	bl	800ac18 <__swhatbuf_r>
 800ac88:	9900      	ldr	r1, [sp, #0]
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff fd45 	bl	800a71c <_malloc_r>
 800ac92:	b948      	cbnz	r0, 800aca8 <__smakebuf_r+0x44>
 800ac94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac98:	059a      	lsls	r2, r3, #22
 800ac9a:	d4ef      	bmi.n	800ac7c <__smakebuf_r+0x18>
 800ac9c:	f023 0303 	bic.w	r3, r3, #3
 800aca0:	f043 0302 	orr.w	r3, r3, #2
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	e7e3      	b.n	800ac70 <__smakebuf_r+0xc>
 800aca8:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <__smakebuf_r+0x7c>)
 800acaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	6020      	str	r0, [r4, #0]
 800acb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	9b00      	ldr	r3, [sp, #0]
 800acb8:	6163      	str	r3, [r4, #20]
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	6120      	str	r0, [r4, #16]
 800acbe:	b15b      	cbz	r3, 800acd8 <__smakebuf_r+0x74>
 800acc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc4:	4630      	mov	r0, r6
 800acc6:	f000 fc87 	bl	800b5d8 <_isatty_r>
 800acca:	b128      	cbz	r0, 800acd8 <__smakebuf_r+0x74>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	f043 0301 	orr.w	r3, r3, #1
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	89a0      	ldrh	r0, [r4, #12]
 800acda:	4305      	orrs	r5, r0
 800acdc:	81a5      	strh	r5, [r4, #12]
 800acde:	e7cd      	b.n	800ac7c <__smakebuf_r+0x18>
 800ace0:	0800a3b5 	.word	0x0800a3b5

0800ace4 <__malloc_lock>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__malloc_lock+0x8>)
 800ace6:	f7ff bc5c 	b.w	800a5a2 <__retarget_lock_acquire_recursive>
 800acea:	bf00      	nop
 800acec:	20000870 	.word	0x20000870

0800acf0 <__malloc_unlock>:
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <__malloc_unlock+0x8>)
 800acf2:	f7ff bc57 	b.w	800a5a4 <__retarget_lock_release_recursive>
 800acf6:	bf00      	nop
 800acf8:	20000870 	.word	0x20000870

0800acfc <__ssputs_r>:
 800acfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad00:	688e      	ldr	r6, [r1, #8]
 800ad02:	429e      	cmp	r6, r3
 800ad04:	4682      	mov	sl, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	4690      	mov	r8, r2
 800ad0a:	461f      	mov	r7, r3
 800ad0c:	d838      	bhi.n	800ad80 <__ssputs_r+0x84>
 800ad0e:	898a      	ldrh	r2, [r1, #12]
 800ad10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad14:	d032      	beq.n	800ad7c <__ssputs_r+0x80>
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	6909      	ldr	r1, [r1, #16]
 800ad1a:	eba5 0901 	sub.w	r9, r5, r1
 800ad1e:	6965      	ldr	r5, [r4, #20]
 800ad20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad28:	3301      	adds	r3, #1
 800ad2a:	444b      	add	r3, r9
 800ad2c:	106d      	asrs	r5, r5, #1
 800ad2e:	429d      	cmp	r5, r3
 800ad30:	bf38      	it	cc
 800ad32:	461d      	movcc	r5, r3
 800ad34:	0553      	lsls	r3, r2, #21
 800ad36:	d531      	bpl.n	800ad9c <__ssputs_r+0xa0>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	f7ff fcef 	bl	800a71c <_malloc_r>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	b950      	cbnz	r0, 800ad58 <__ssputs_r+0x5c>
 800ad42:	230c      	movs	r3, #12
 800ad44:	f8ca 3000 	str.w	r3, [sl]
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad58:	6921      	ldr	r1, [r4, #16]
 800ad5a:	464a      	mov	r2, r9
 800ad5c:	f7ff fc2c 	bl	800a5b8 <memcpy>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	6126      	str	r6, [r4, #16]
 800ad6e:	6165      	str	r5, [r4, #20]
 800ad70:	444e      	add	r6, r9
 800ad72:	eba5 0509 	sub.w	r5, r5, r9
 800ad76:	6026      	str	r6, [r4, #0]
 800ad78:	60a5      	str	r5, [r4, #8]
 800ad7a:	463e      	mov	r6, r7
 800ad7c:	42be      	cmp	r6, r7
 800ad7e:	d900      	bls.n	800ad82 <__ssputs_r+0x86>
 800ad80:	463e      	mov	r6, r7
 800ad82:	6820      	ldr	r0, [r4, #0]
 800ad84:	4632      	mov	r2, r6
 800ad86:	4641      	mov	r1, r8
 800ad88:	f7ff fc24 	bl	800a5d4 <memmove>
 800ad8c:	68a3      	ldr	r3, [r4, #8]
 800ad8e:	1b9b      	subs	r3, r3, r6
 800ad90:	60a3      	str	r3, [r4, #8]
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	4433      	add	r3, r6
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	2000      	movs	r0, #0
 800ad9a:	e7db      	b.n	800ad54 <__ssputs_r+0x58>
 800ad9c:	462a      	mov	r2, r5
 800ad9e:	f000 fc2b 	bl	800b5f8 <_realloc_r>
 800ada2:	4606      	mov	r6, r0
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1e1      	bne.n	800ad6c <__ssputs_r+0x70>
 800ada8:	6921      	ldr	r1, [r4, #16]
 800adaa:	4650      	mov	r0, sl
 800adac:	f7ff fc4a 	bl	800a644 <_free_r>
 800adb0:	e7c7      	b.n	800ad42 <__ssputs_r+0x46>
	...

0800adb4 <_svfiprintf_r>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	4698      	mov	r8, r3
 800adba:	898b      	ldrh	r3, [r1, #12]
 800adbc:	061b      	lsls	r3, r3, #24
 800adbe:	b09d      	sub	sp, #116	; 0x74
 800adc0:	4607      	mov	r7, r0
 800adc2:	460d      	mov	r5, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	d50e      	bpl.n	800ade6 <_svfiprintf_r+0x32>
 800adc8:	690b      	ldr	r3, [r1, #16]
 800adca:	b963      	cbnz	r3, 800ade6 <_svfiprintf_r+0x32>
 800adcc:	2140      	movs	r1, #64	; 0x40
 800adce:	f7ff fca5 	bl	800a71c <_malloc_r>
 800add2:	6028      	str	r0, [r5, #0]
 800add4:	6128      	str	r0, [r5, #16]
 800add6:	b920      	cbnz	r0, 800ade2 <_svfiprintf_r+0x2e>
 800add8:	230c      	movs	r3, #12
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	f04f 30ff 	mov.w	r0, #4294967295
 800ade0:	e0d1      	b.n	800af86 <_svfiprintf_r+0x1d2>
 800ade2:	2340      	movs	r3, #64	; 0x40
 800ade4:	616b      	str	r3, [r5, #20]
 800ade6:	2300      	movs	r3, #0
 800ade8:	9309      	str	r3, [sp, #36]	; 0x24
 800adea:	2320      	movs	r3, #32
 800adec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800adf4:	2330      	movs	r3, #48	; 0x30
 800adf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afa0 <_svfiprintf_r+0x1ec>
 800adfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adfe:	f04f 0901 	mov.w	r9, #1
 800ae02:	4623      	mov	r3, r4
 800ae04:	469a      	mov	sl, r3
 800ae06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae0a:	b10a      	cbz	r2, 800ae10 <_svfiprintf_r+0x5c>
 800ae0c:	2a25      	cmp	r2, #37	; 0x25
 800ae0e:	d1f9      	bne.n	800ae04 <_svfiprintf_r+0x50>
 800ae10:	ebba 0b04 	subs.w	fp, sl, r4
 800ae14:	d00b      	beq.n	800ae2e <_svfiprintf_r+0x7a>
 800ae16:	465b      	mov	r3, fp
 800ae18:	4622      	mov	r2, r4
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	f7ff ff6d 	bl	800acfc <__ssputs_r>
 800ae22:	3001      	adds	r0, #1
 800ae24:	f000 80aa 	beq.w	800af7c <_svfiprintf_r+0x1c8>
 800ae28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae2a:	445a      	add	r2, fp
 800ae2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 80a2 	beq.w	800af7c <_svfiprintf_r+0x1c8>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae42:	f10a 0a01 	add.w	sl, sl, #1
 800ae46:	9304      	str	r3, [sp, #16]
 800ae48:	9307      	str	r3, [sp, #28]
 800ae4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ae50:	4654      	mov	r4, sl
 800ae52:	2205      	movs	r2, #5
 800ae54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae58:	4851      	ldr	r0, [pc, #324]	; (800afa0 <_svfiprintf_r+0x1ec>)
 800ae5a:	f7f5 f9c1 	bl	80001e0 <memchr>
 800ae5e:	9a04      	ldr	r2, [sp, #16]
 800ae60:	b9d8      	cbnz	r0, 800ae9a <_svfiprintf_r+0xe6>
 800ae62:	06d0      	lsls	r0, r2, #27
 800ae64:	bf44      	itt	mi
 800ae66:	2320      	movmi	r3, #32
 800ae68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6c:	0711      	lsls	r1, r2, #28
 800ae6e:	bf44      	itt	mi
 800ae70:	232b      	movmi	r3, #43	; 0x2b
 800ae72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae76:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7c:	d015      	beq.n	800aeaa <_svfiprintf_r+0xf6>
 800ae7e:	9a07      	ldr	r2, [sp, #28]
 800ae80:	4654      	mov	r4, sl
 800ae82:	2000      	movs	r0, #0
 800ae84:	f04f 0c0a 	mov.w	ip, #10
 800ae88:	4621      	mov	r1, r4
 800ae8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae8e:	3b30      	subs	r3, #48	; 0x30
 800ae90:	2b09      	cmp	r3, #9
 800ae92:	d94e      	bls.n	800af32 <_svfiprintf_r+0x17e>
 800ae94:	b1b0      	cbz	r0, 800aec4 <_svfiprintf_r+0x110>
 800ae96:	9207      	str	r2, [sp, #28]
 800ae98:	e014      	b.n	800aec4 <_svfiprintf_r+0x110>
 800ae9a:	eba0 0308 	sub.w	r3, r0, r8
 800ae9e:	fa09 f303 	lsl.w	r3, r9, r3
 800aea2:	4313      	orrs	r3, r2
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	46a2      	mov	sl, r4
 800aea8:	e7d2      	b.n	800ae50 <_svfiprintf_r+0x9c>
 800aeaa:	9b03      	ldr	r3, [sp, #12]
 800aeac:	1d19      	adds	r1, r3, #4
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	9103      	str	r1, [sp, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	bfbb      	ittet	lt
 800aeb6:	425b      	neglt	r3, r3
 800aeb8:	f042 0202 	orrlt.w	r2, r2, #2
 800aebc:	9307      	strge	r3, [sp, #28]
 800aebe:	9307      	strlt	r3, [sp, #28]
 800aec0:	bfb8      	it	lt
 800aec2:	9204      	strlt	r2, [sp, #16]
 800aec4:	7823      	ldrb	r3, [r4, #0]
 800aec6:	2b2e      	cmp	r3, #46	; 0x2e
 800aec8:	d10c      	bne.n	800aee4 <_svfiprintf_r+0x130>
 800aeca:	7863      	ldrb	r3, [r4, #1]
 800aecc:	2b2a      	cmp	r3, #42	; 0x2a
 800aece:	d135      	bne.n	800af3c <_svfiprintf_r+0x188>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	1d1a      	adds	r2, r3, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	9203      	str	r2, [sp, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bfb8      	it	lt
 800aedc:	f04f 33ff 	movlt.w	r3, #4294967295
 800aee0:	3402      	adds	r4, #2
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afb0 <_svfiprintf_r+0x1fc>
 800aee8:	7821      	ldrb	r1, [r4, #0]
 800aeea:	2203      	movs	r2, #3
 800aeec:	4650      	mov	r0, sl
 800aeee:	f7f5 f977 	bl	80001e0 <memchr>
 800aef2:	b140      	cbz	r0, 800af06 <_svfiprintf_r+0x152>
 800aef4:	2340      	movs	r3, #64	; 0x40
 800aef6:	eba0 000a 	sub.w	r0, r0, sl
 800aefa:	fa03 f000 	lsl.w	r0, r3, r0
 800aefe:	9b04      	ldr	r3, [sp, #16]
 800af00:	4303      	orrs	r3, r0
 800af02:	3401      	adds	r4, #1
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0a:	4826      	ldr	r0, [pc, #152]	; (800afa4 <_svfiprintf_r+0x1f0>)
 800af0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af10:	2206      	movs	r2, #6
 800af12:	f7f5 f965 	bl	80001e0 <memchr>
 800af16:	2800      	cmp	r0, #0
 800af18:	d038      	beq.n	800af8c <_svfiprintf_r+0x1d8>
 800af1a:	4b23      	ldr	r3, [pc, #140]	; (800afa8 <_svfiprintf_r+0x1f4>)
 800af1c:	bb1b      	cbnz	r3, 800af66 <_svfiprintf_r+0x1b2>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	3307      	adds	r3, #7
 800af22:	f023 0307 	bic.w	r3, r3, #7
 800af26:	3308      	adds	r3, #8
 800af28:	9303      	str	r3, [sp, #12]
 800af2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2c:	4433      	add	r3, r6
 800af2e:	9309      	str	r3, [sp, #36]	; 0x24
 800af30:	e767      	b.n	800ae02 <_svfiprintf_r+0x4e>
 800af32:	fb0c 3202 	mla	r2, ip, r2, r3
 800af36:	460c      	mov	r4, r1
 800af38:	2001      	movs	r0, #1
 800af3a:	e7a5      	b.n	800ae88 <_svfiprintf_r+0xd4>
 800af3c:	2300      	movs	r3, #0
 800af3e:	3401      	adds	r4, #1
 800af40:	9305      	str	r3, [sp, #20]
 800af42:	4619      	mov	r1, r3
 800af44:	f04f 0c0a 	mov.w	ip, #10
 800af48:	4620      	mov	r0, r4
 800af4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af4e:	3a30      	subs	r2, #48	; 0x30
 800af50:	2a09      	cmp	r2, #9
 800af52:	d903      	bls.n	800af5c <_svfiprintf_r+0x1a8>
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0c5      	beq.n	800aee4 <_svfiprintf_r+0x130>
 800af58:	9105      	str	r1, [sp, #20]
 800af5a:	e7c3      	b.n	800aee4 <_svfiprintf_r+0x130>
 800af5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af60:	4604      	mov	r4, r0
 800af62:	2301      	movs	r3, #1
 800af64:	e7f0      	b.n	800af48 <_svfiprintf_r+0x194>
 800af66:	ab03      	add	r3, sp, #12
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	462a      	mov	r2, r5
 800af6c:	4b0f      	ldr	r3, [pc, #60]	; (800afac <_svfiprintf_r+0x1f8>)
 800af6e:	a904      	add	r1, sp, #16
 800af70:	4638      	mov	r0, r7
 800af72:	f3af 8000 	nop.w
 800af76:	1c42      	adds	r2, r0, #1
 800af78:	4606      	mov	r6, r0
 800af7a:	d1d6      	bne.n	800af2a <_svfiprintf_r+0x176>
 800af7c:	89ab      	ldrh	r3, [r5, #12]
 800af7e:	065b      	lsls	r3, r3, #25
 800af80:	f53f af2c 	bmi.w	800addc <_svfiprintf_r+0x28>
 800af84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af86:	b01d      	add	sp, #116	; 0x74
 800af88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8c:	ab03      	add	r3, sp, #12
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	462a      	mov	r2, r5
 800af92:	4b06      	ldr	r3, [pc, #24]	; (800afac <_svfiprintf_r+0x1f8>)
 800af94:	a904      	add	r1, sp, #16
 800af96:	4638      	mov	r0, r7
 800af98:	f000 f9d4 	bl	800b344 <_printf_i>
 800af9c:	e7eb      	b.n	800af76 <_svfiprintf_r+0x1c2>
 800af9e:	bf00      	nop
 800afa0:	0800bb80 	.word	0x0800bb80
 800afa4:	0800bb8a 	.word	0x0800bb8a
 800afa8:	00000000 	.word	0x00000000
 800afac:	0800acfd 	.word	0x0800acfd
 800afb0:	0800bb86 	.word	0x0800bb86

0800afb4 <__sfputc_r>:
 800afb4:	6893      	ldr	r3, [r2, #8]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	b410      	push	{r4}
 800afbc:	6093      	str	r3, [r2, #8]
 800afbe:	da08      	bge.n	800afd2 <__sfputc_r+0x1e>
 800afc0:	6994      	ldr	r4, [r2, #24]
 800afc2:	42a3      	cmp	r3, r4
 800afc4:	db01      	blt.n	800afca <__sfputc_r+0x16>
 800afc6:	290a      	cmp	r1, #10
 800afc8:	d103      	bne.n	800afd2 <__sfputc_r+0x1e>
 800afca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afce:	f7ff bd2f 	b.w	800aa30 <__swbuf_r>
 800afd2:	6813      	ldr	r3, [r2, #0]
 800afd4:	1c58      	adds	r0, r3, #1
 800afd6:	6010      	str	r0, [r2, #0]
 800afd8:	7019      	strb	r1, [r3, #0]
 800afda:	4608      	mov	r0, r1
 800afdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <__sfputs_r>:
 800afe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe4:	4606      	mov	r6, r0
 800afe6:	460f      	mov	r7, r1
 800afe8:	4614      	mov	r4, r2
 800afea:	18d5      	adds	r5, r2, r3
 800afec:	42ac      	cmp	r4, r5
 800afee:	d101      	bne.n	800aff4 <__sfputs_r+0x12>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e007      	b.n	800b004 <__sfputs_r+0x22>
 800aff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff8:	463a      	mov	r2, r7
 800affa:	4630      	mov	r0, r6
 800affc:	f7ff ffda 	bl	800afb4 <__sfputc_r>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d1f3      	bne.n	800afec <__sfputs_r+0xa>
 800b004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b008 <_vfiprintf_r>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	460d      	mov	r5, r1
 800b00e:	b09d      	sub	sp, #116	; 0x74
 800b010:	4614      	mov	r4, r2
 800b012:	4698      	mov	r8, r3
 800b014:	4606      	mov	r6, r0
 800b016:	b118      	cbz	r0, 800b020 <_vfiprintf_r+0x18>
 800b018:	6983      	ldr	r3, [r0, #24]
 800b01a:	b90b      	cbnz	r3, 800b020 <_vfiprintf_r+0x18>
 800b01c:	f7ff f9fe 	bl	800a41c <__sinit>
 800b020:	4b89      	ldr	r3, [pc, #548]	; (800b248 <_vfiprintf_r+0x240>)
 800b022:	429d      	cmp	r5, r3
 800b024:	d11b      	bne.n	800b05e <_vfiprintf_r+0x56>
 800b026:	6875      	ldr	r5, [r6, #4]
 800b028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b02a:	07d9      	lsls	r1, r3, #31
 800b02c:	d405      	bmi.n	800b03a <_vfiprintf_r+0x32>
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	059a      	lsls	r2, r3, #22
 800b032:	d402      	bmi.n	800b03a <_vfiprintf_r+0x32>
 800b034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b036:	f7ff fab4 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800b03a:	89ab      	ldrh	r3, [r5, #12]
 800b03c:	071b      	lsls	r3, r3, #28
 800b03e:	d501      	bpl.n	800b044 <_vfiprintf_r+0x3c>
 800b040:	692b      	ldr	r3, [r5, #16]
 800b042:	b9eb      	cbnz	r3, 800b080 <_vfiprintf_r+0x78>
 800b044:	4629      	mov	r1, r5
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff fd56 	bl	800aaf8 <__swsetup_r>
 800b04c:	b1c0      	cbz	r0, 800b080 <_vfiprintf_r+0x78>
 800b04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b050:	07dc      	lsls	r4, r3, #31
 800b052:	d50e      	bpl.n	800b072 <_vfiprintf_r+0x6a>
 800b054:	f04f 30ff 	mov.w	r0, #4294967295
 800b058:	b01d      	add	sp, #116	; 0x74
 800b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05e:	4b7b      	ldr	r3, [pc, #492]	; (800b24c <_vfiprintf_r+0x244>)
 800b060:	429d      	cmp	r5, r3
 800b062:	d101      	bne.n	800b068 <_vfiprintf_r+0x60>
 800b064:	68b5      	ldr	r5, [r6, #8]
 800b066:	e7df      	b.n	800b028 <_vfiprintf_r+0x20>
 800b068:	4b79      	ldr	r3, [pc, #484]	; (800b250 <_vfiprintf_r+0x248>)
 800b06a:	429d      	cmp	r5, r3
 800b06c:	bf08      	it	eq
 800b06e:	68f5      	ldreq	r5, [r6, #12]
 800b070:	e7da      	b.n	800b028 <_vfiprintf_r+0x20>
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	0598      	lsls	r0, r3, #22
 800b076:	d4ed      	bmi.n	800b054 <_vfiprintf_r+0x4c>
 800b078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b07a:	f7ff fa93 	bl	800a5a4 <__retarget_lock_release_recursive>
 800b07e:	e7e9      	b.n	800b054 <_vfiprintf_r+0x4c>
 800b080:	2300      	movs	r3, #0
 800b082:	9309      	str	r3, [sp, #36]	; 0x24
 800b084:	2320      	movs	r3, #32
 800b086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b08e:	2330      	movs	r3, #48	; 0x30
 800b090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b254 <_vfiprintf_r+0x24c>
 800b094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b098:	f04f 0901 	mov.w	r9, #1
 800b09c:	4623      	mov	r3, r4
 800b09e:	469a      	mov	sl, r3
 800b0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a4:	b10a      	cbz	r2, 800b0aa <_vfiprintf_r+0xa2>
 800b0a6:	2a25      	cmp	r2, #37	; 0x25
 800b0a8:	d1f9      	bne.n	800b09e <_vfiprintf_r+0x96>
 800b0aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ae:	d00b      	beq.n	800b0c8 <_vfiprintf_r+0xc0>
 800b0b0:	465b      	mov	r3, fp
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7ff ff93 	bl	800afe2 <__sfputs_r>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f000 80aa 	beq.w	800b216 <_vfiprintf_r+0x20e>
 800b0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c4:	445a      	add	r2, fp
 800b0c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80a2 	beq.w	800b216 <_vfiprintf_r+0x20e>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0dc:	f10a 0a01 	add.w	sl, sl, #1
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	9307      	str	r3, [sp, #28]
 800b0e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0ea:	4654      	mov	r4, sl
 800b0ec:	2205      	movs	r2, #5
 800b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f2:	4858      	ldr	r0, [pc, #352]	; (800b254 <_vfiprintf_r+0x24c>)
 800b0f4:	f7f5 f874 	bl	80001e0 <memchr>
 800b0f8:	9a04      	ldr	r2, [sp, #16]
 800b0fa:	b9d8      	cbnz	r0, 800b134 <_vfiprintf_r+0x12c>
 800b0fc:	06d1      	lsls	r1, r2, #27
 800b0fe:	bf44      	itt	mi
 800b100:	2320      	movmi	r3, #32
 800b102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b106:	0713      	lsls	r3, r2, #28
 800b108:	bf44      	itt	mi
 800b10a:	232b      	movmi	r3, #43	; 0x2b
 800b10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b110:	f89a 3000 	ldrb.w	r3, [sl]
 800b114:	2b2a      	cmp	r3, #42	; 0x2a
 800b116:	d015      	beq.n	800b144 <_vfiprintf_r+0x13c>
 800b118:	9a07      	ldr	r2, [sp, #28]
 800b11a:	4654      	mov	r4, sl
 800b11c:	2000      	movs	r0, #0
 800b11e:	f04f 0c0a 	mov.w	ip, #10
 800b122:	4621      	mov	r1, r4
 800b124:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b128:	3b30      	subs	r3, #48	; 0x30
 800b12a:	2b09      	cmp	r3, #9
 800b12c:	d94e      	bls.n	800b1cc <_vfiprintf_r+0x1c4>
 800b12e:	b1b0      	cbz	r0, 800b15e <_vfiprintf_r+0x156>
 800b130:	9207      	str	r2, [sp, #28]
 800b132:	e014      	b.n	800b15e <_vfiprintf_r+0x156>
 800b134:	eba0 0308 	sub.w	r3, r0, r8
 800b138:	fa09 f303 	lsl.w	r3, r9, r3
 800b13c:	4313      	orrs	r3, r2
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	46a2      	mov	sl, r4
 800b142:	e7d2      	b.n	800b0ea <_vfiprintf_r+0xe2>
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	1d19      	adds	r1, r3, #4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	9103      	str	r1, [sp, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfbb      	ittet	lt
 800b150:	425b      	neglt	r3, r3
 800b152:	f042 0202 	orrlt.w	r2, r2, #2
 800b156:	9307      	strge	r3, [sp, #28]
 800b158:	9307      	strlt	r3, [sp, #28]
 800b15a:	bfb8      	it	lt
 800b15c:	9204      	strlt	r2, [sp, #16]
 800b15e:	7823      	ldrb	r3, [r4, #0]
 800b160:	2b2e      	cmp	r3, #46	; 0x2e
 800b162:	d10c      	bne.n	800b17e <_vfiprintf_r+0x176>
 800b164:	7863      	ldrb	r3, [r4, #1]
 800b166:	2b2a      	cmp	r3, #42	; 0x2a
 800b168:	d135      	bne.n	800b1d6 <_vfiprintf_r+0x1ce>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	9203      	str	r2, [sp, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfb8      	it	lt
 800b176:	f04f 33ff 	movlt.w	r3, #4294967295
 800b17a:	3402      	adds	r4, #2
 800b17c:	9305      	str	r3, [sp, #20]
 800b17e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b264 <_vfiprintf_r+0x25c>
 800b182:	7821      	ldrb	r1, [r4, #0]
 800b184:	2203      	movs	r2, #3
 800b186:	4650      	mov	r0, sl
 800b188:	f7f5 f82a 	bl	80001e0 <memchr>
 800b18c:	b140      	cbz	r0, 800b1a0 <_vfiprintf_r+0x198>
 800b18e:	2340      	movs	r3, #64	; 0x40
 800b190:	eba0 000a 	sub.w	r0, r0, sl
 800b194:	fa03 f000 	lsl.w	r0, r3, r0
 800b198:	9b04      	ldr	r3, [sp, #16]
 800b19a:	4303      	orrs	r3, r0
 800b19c:	3401      	adds	r4, #1
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a4:	482c      	ldr	r0, [pc, #176]	; (800b258 <_vfiprintf_r+0x250>)
 800b1a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1aa:	2206      	movs	r2, #6
 800b1ac:	f7f5 f818 	bl	80001e0 <memchr>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d03f      	beq.n	800b234 <_vfiprintf_r+0x22c>
 800b1b4:	4b29      	ldr	r3, [pc, #164]	; (800b25c <_vfiprintf_r+0x254>)
 800b1b6:	bb1b      	cbnz	r3, 800b200 <_vfiprintf_r+0x1f8>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	3307      	adds	r3, #7
 800b1bc:	f023 0307 	bic.w	r3, r3, #7
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	9303      	str	r3, [sp, #12]
 800b1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c6:	443b      	add	r3, r7
 800b1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ca:	e767      	b.n	800b09c <_vfiprintf_r+0x94>
 800b1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	e7a5      	b.n	800b122 <_vfiprintf_r+0x11a>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	3401      	adds	r4, #1
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f04f 0c0a 	mov.w	ip, #10
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e8:	3a30      	subs	r2, #48	; 0x30
 800b1ea:	2a09      	cmp	r2, #9
 800b1ec:	d903      	bls.n	800b1f6 <_vfiprintf_r+0x1ee>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0c5      	beq.n	800b17e <_vfiprintf_r+0x176>
 800b1f2:	9105      	str	r1, [sp, #20]
 800b1f4:	e7c3      	b.n	800b17e <_vfiprintf_r+0x176>
 800b1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e7f0      	b.n	800b1e2 <_vfiprintf_r+0x1da>
 800b200:	ab03      	add	r3, sp, #12
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	462a      	mov	r2, r5
 800b206:	4b16      	ldr	r3, [pc, #88]	; (800b260 <_vfiprintf_r+0x258>)
 800b208:	a904      	add	r1, sp, #16
 800b20a:	4630      	mov	r0, r6
 800b20c:	f3af 8000 	nop.w
 800b210:	4607      	mov	r7, r0
 800b212:	1c78      	adds	r0, r7, #1
 800b214:	d1d6      	bne.n	800b1c4 <_vfiprintf_r+0x1bc>
 800b216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b218:	07d9      	lsls	r1, r3, #31
 800b21a:	d405      	bmi.n	800b228 <_vfiprintf_r+0x220>
 800b21c:	89ab      	ldrh	r3, [r5, #12]
 800b21e:	059a      	lsls	r2, r3, #22
 800b220:	d402      	bmi.n	800b228 <_vfiprintf_r+0x220>
 800b222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b224:	f7ff f9be 	bl	800a5a4 <__retarget_lock_release_recursive>
 800b228:	89ab      	ldrh	r3, [r5, #12]
 800b22a:	065b      	lsls	r3, r3, #25
 800b22c:	f53f af12 	bmi.w	800b054 <_vfiprintf_r+0x4c>
 800b230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b232:	e711      	b.n	800b058 <_vfiprintf_r+0x50>
 800b234:	ab03      	add	r3, sp, #12
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	462a      	mov	r2, r5
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <_vfiprintf_r+0x258>)
 800b23c:	a904      	add	r1, sp, #16
 800b23e:	4630      	mov	r0, r6
 800b240:	f000 f880 	bl	800b344 <_printf_i>
 800b244:	e7e4      	b.n	800b210 <_vfiprintf_r+0x208>
 800b246:	bf00      	nop
 800b248:	0800bb3c 	.word	0x0800bb3c
 800b24c:	0800bb5c 	.word	0x0800bb5c
 800b250:	0800bb1c 	.word	0x0800bb1c
 800b254:	0800bb80 	.word	0x0800bb80
 800b258:	0800bb8a 	.word	0x0800bb8a
 800b25c:	00000000 	.word	0x00000000
 800b260:	0800afe3 	.word	0x0800afe3
 800b264:	0800bb86 	.word	0x0800bb86

0800b268 <_printf_common>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	4616      	mov	r6, r2
 800b26e:	4699      	mov	r9, r3
 800b270:	688a      	ldr	r2, [r1, #8]
 800b272:	690b      	ldr	r3, [r1, #16]
 800b274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b278:	4293      	cmp	r3, r2
 800b27a:	bfb8      	it	lt
 800b27c:	4613      	movlt	r3, r2
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b284:	4607      	mov	r7, r0
 800b286:	460c      	mov	r4, r1
 800b288:	b10a      	cbz	r2, 800b28e <_printf_common+0x26>
 800b28a:	3301      	adds	r3, #1
 800b28c:	6033      	str	r3, [r6, #0]
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	0699      	lsls	r1, r3, #26
 800b292:	bf42      	ittt	mi
 800b294:	6833      	ldrmi	r3, [r6, #0]
 800b296:	3302      	addmi	r3, #2
 800b298:	6033      	strmi	r3, [r6, #0]
 800b29a:	6825      	ldr	r5, [r4, #0]
 800b29c:	f015 0506 	ands.w	r5, r5, #6
 800b2a0:	d106      	bne.n	800b2b0 <_printf_common+0x48>
 800b2a2:	f104 0a19 	add.w	sl, r4, #25
 800b2a6:	68e3      	ldr	r3, [r4, #12]
 800b2a8:	6832      	ldr	r2, [r6, #0]
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	42ab      	cmp	r3, r5
 800b2ae:	dc26      	bgt.n	800b2fe <_printf_common+0x96>
 800b2b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2b4:	1e13      	subs	r3, r2, #0
 800b2b6:	6822      	ldr	r2, [r4, #0]
 800b2b8:	bf18      	it	ne
 800b2ba:	2301      	movne	r3, #1
 800b2bc:	0692      	lsls	r2, r2, #26
 800b2be:	d42b      	bmi.n	800b318 <_printf_common+0xb0>
 800b2c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	47c0      	blx	r8
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	d01e      	beq.n	800b30c <_printf_common+0xa4>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	68e5      	ldr	r5, [r4, #12]
 800b2d2:	6832      	ldr	r2, [r6, #0]
 800b2d4:	f003 0306 	and.w	r3, r3, #6
 800b2d8:	2b04      	cmp	r3, #4
 800b2da:	bf08      	it	eq
 800b2dc:	1aad      	subeq	r5, r5, r2
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	6922      	ldr	r2, [r4, #16]
 800b2e2:	bf0c      	ite	eq
 800b2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e8:	2500      	movne	r5, #0
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	bfc4      	itt	gt
 800b2ee:	1a9b      	subgt	r3, r3, r2
 800b2f0:	18ed      	addgt	r5, r5, r3
 800b2f2:	2600      	movs	r6, #0
 800b2f4:	341a      	adds	r4, #26
 800b2f6:	42b5      	cmp	r5, r6
 800b2f8:	d11a      	bne.n	800b330 <_printf_common+0xc8>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e008      	b.n	800b310 <_printf_common+0xa8>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4652      	mov	r2, sl
 800b302:	4649      	mov	r1, r9
 800b304:	4638      	mov	r0, r7
 800b306:	47c0      	blx	r8
 800b308:	3001      	adds	r0, #1
 800b30a:	d103      	bne.n	800b314 <_printf_common+0xac>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b314:	3501      	adds	r5, #1
 800b316:	e7c6      	b.n	800b2a6 <_printf_common+0x3e>
 800b318:	18e1      	adds	r1, r4, r3
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	2030      	movs	r0, #48	; 0x30
 800b31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b322:	4422      	add	r2, r4
 800b324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b32c:	3302      	adds	r3, #2
 800b32e:	e7c7      	b.n	800b2c0 <_printf_common+0x58>
 800b330:	2301      	movs	r3, #1
 800b332:	4622      	mov	r2, r4
 800b334:	4649      	mov	r1, r9
 800b336:	4638      	mov	r0, r7
 800b338:	47c0      	blx	r8
 800b33a:	3001      	adds	r0, #1
 800b33c:	d0e6      	beq.n	800b30c <_printf_common+0xa4>
 800b33e:	3601      	adds	r6, #1
 800b340:	e7d9      	b.n	800b2f6 <_printf_common+0x8e>
	...

0800b344 <_printf_i>:
 800b344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	7e0f      	ldrb	r7, [r1, #24]
 800b34a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b34c:	2f78      	cmp	r7, #120	; 0x78
 800b34e:	4691      	mov	r9, r2
 800b350:	4680      	mov	r8, r0
 800b352:	460c      	mov	r4, r1
 800b354:	469a      	mov	sl, r3
 800b356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b35a:	d807      	bhi.n	800b36c <_printf_i+0x28>
 800b35c:	2f62      	cmp	r7, #98	; 0x62
 800b35e:	d80a      	bhi.n	800b376 <_printf_i+0x32>
 800b360:	2f00      	cmp	r7, #0
 800b362:	f000 80d8 	beq.w	800b516 <_printf_i+0x1d2>
 800b366:	2f58      	cmp	r7, #88	; 0x58
 800b368:	f000 80a3 	beq.w	800b4b2 <_printf_i+0x16e>
 800b36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b374:	e03a      	b.n	800b3ec <_printf_i+0xa8>
 800b376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b37a:	2b15      	cmp	r3, #21
 800b37c:	d8f6      	bhi.n	800b36c <_printf_i+0x28>
 800b37e:	a101      	add	r1, pc, #4	; (adr r1, 800b384 <_printf_i+0x40>)
 800b380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b384:	0800b3dd 	.word	0x0800b3dd
 800b388:	0800b3f1 	.word	0x0800b3f1
 800b38c:	0800b36d 	.word	0x0800b36d
 800b390:	0800b36d 	.word	0x0800b36d
 800b394:	0800b36d 	.word	0x0800b36d
 800b398:	0800b36d 	.word	0x0800b36d
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b36d 	.word	0x0800b36d
 800b3a4:	0800b36d 	.word	0x0800b36d
 800b3a8:	0800b36d 	.word	0x0800b36d
 800b3ac:	0800b36d 	.word	0x0800b36d
 800b3b0:	0800b4fd 	.word	0x0800b4fd
 800b3b4:	0800b421 	.word	0x0800b421
 800b3b8:	0800b4df 	.word	0x0800b4df
 800b3bc:	0800b36d 	.word	0x0800b36d
 800b3c0:	0800b36d 	.word	0x0800b36d
 800b3c4:	0800b51f 	.word	0x0800b51f
 800b3c8:	0800b36d 	.word	0x0800b36d
 800b3cc:	0800b421 	.word	0x0800b421
 800b3d0:	0800b36d 	.word	0x0800b36d
 800b3d4:	0800b36d 	.word	0x0800b36d
 800b3d8:	0800b4e7 	.word	0x0800b4e7
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	1d1a      	adds	r2, r3, #4
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	602a      	str	r2, [r5, #0]
 800b3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e0a3      	b.n	800b538 <_printf_i+0x1f4>
 800b3f0:	6820      	ldr	r0, [r4, #0]
 800b3f2:	6829      	ldr	r1, [r5, #0]
 800b3f4:	0606      	lsls	r6, r0, #24
 800b3f6:	f101 0304 	add.w	r3, r1, #4
 800b3fa:	d50a      	bpl.n	800b412 <_printf_i+0xce>
 800b3fc:	680e      	ldr	r6, [r1, #0]
 800b3fe:	602b      	str	r3, [r5, #0]
 800b400:	2e00      	cmp	r6, #0
 800b402:	da03      	bge.n	800b40c <_printf_i+0xc8>
 800b404:	232d      	movs	r3, #45	; 0x2d
 800b406:	4276      	negs	r6, r6
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b40c:	485e      	ldr	r0, [pc, #376]	; (800b588 <_printf_i+0x244>)
 800b40e:	230a      	movs	r3, #10
 800b410:	e019      	b.n	800b446 <_printf_i+0x102>
 800b412:	680e      	ldr	r6, [r1, #0]
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b41a:	bf18      	it	ne
 800b41c:	b236      	sxthne	r6, r6
 800b41e:	e7ef      	b.n	800b400 <_printf_i+0xbc>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	6820      	ldr	r0, [r4, #0]
 800b424:	1d19      	adds	r1, r3, #4
 800b426:	6029      	str	r1, [r5, #0]
 800b428:	0601      	lsls	r1, r0, #24
 800b42a:	d501      	bpl.n	800b430 <_printf_i+0xec>
 800b42c:	681e      	ldr	r6, [r3, #0]
 800b42e:	e002      	b.n	800b436 <_printf_i+0xf2>
 800b430:	0646      	lsls	r6, r0, #25
 800b432:	d5fb      	bpl.n	800b42c <_printf_i+0xe8>
 800b434:	881e      	ldrh	r6, [r3, #0]
 800b436:	4854      	ldr	r0, [pc, #336]	; (800b588 <_printf_i+0x244>)
 800b438:	2f6f      	cmp	r7, #111	; 0x6f
 800b43a:	bf0c      	ite	eq
 800b43c:	2308      	moveq	r3, #8
 800b43e:	230a      	movne	r3, #10
 800b440:	2100      	movs	r1, #0
 800b442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b446:	6865      	ldr	r5, [r4, #4]
 800b448:	60a5      	str	r5, [r4, #8]
 800b44a:	2d00      	cmp	r5, #0
 800b44c:	bfa2      	ittt	ge
 800b44e:	6821      	ldrge	r1, [r4, #0]
 800b450:	f021 0104 	bicge.w	r1, r1, #4
 800b454:	6021      	strge	r1, [r4, #0]
 800b456:	b90e      	cbnz	r6, 800b45c <_printf_i+0x118>
 800b458:	2d00      	cmp	r5, #0
 800b45a:	d04d      	beq.n	800b4f8 <_printf_i+0x1b4>
 800b45c:	4615      	mov	r5, r2
 800b45e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b462:	fb03 6711 	mls	r7, r3, r1, r6
 800b466:	5dc7      	ldrb	r7, [r0, r7]
 800b468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b46c:	4637      	mov	r7, r6
 800b46e:	42bb      	cmp	r3, r7
 800b470:	460e      	mov	r6, r1
 800b472:	d9f4      	bls.n	800b45e <_printf_i+0x11a>
 800b474:	2b08      	cmp	r3, #8
 800b476:	d10b      	bne.n	800b490 <_printf_i+0x14c>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	07de      	lsls	r6, r3, #31
 800b47c:	d508      	bpl.n	800b490 <_printf_i+0x14c>
 800b47e:	6923      	ldr	r3, [r4, #16]
 800b480:	6861      	ldr	r1, [r4, #4]
 800b482:	4299      	cmp	r1, r3
 800b484:	bfde      	ittt	le
 800b486:	2330      	movle	r3, #48	; 0x30
 800b488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b48c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b490:	1b52      	subs	r2, r2, r5
 800b492:	6122      	str	r2, [r4, #16]
 800b494:	f8cd a000 	str.w	sl, [sp]
 800b498:	464b      	mov	r3, r9
 800b49a:	aa03      	add	r2, sp, #12
 800b49c:	4621      	mov	r1, r4
 800b49e:	4640      	mov	r0, r8
 800b4a0:	f7ff fee2 	bl	800b268 <_printf_common>
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d14c      	bne.n	800b542 <_printf_i+0x1fe>
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	b004      	add	sp, #16
 800b4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b2:	4835      	ldr	r0, [pc, #212]	; (800b588 <_printf_i+0x244>)
 800b4b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4b8:	6829      	ldr	r1, [r5, #0]
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4c0:	6029      	str	r1, [r5, #0]
 800b4c2:	061d      	lsls	r5, r3, #24
 800b4c4:	d514      	bpl.n	800b4f0 <_printf_i+0x1ac>
 800b4c6:	07df      	lsls	r7, r3, #31
 800b4c8:	bf44      	itt	mi
 800b4ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ce:	6023      	strmi	r3, [r4, #0]
 800b4d0:	b91e      	cbnz	r6, 800b4da <_printf_i+0x196>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	f023 0320 	bic.w	r3, r3, #32
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	2310      	movs	r3, #16
 800b4dc:	e7b0      	b.n	800b440 <_printf_i+0xfc>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f043 0320 	orr.w	r3, r3, #32
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	2378      	movs	r3, #120	; 0x78
 800b4e8:	4828      	ldr	r0, [pc, #160]	; (800b58c <_printf_i+0x248>)
 800b4ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4ee:	e7e3      	b.n	800b4b8 <_printf_i+0x174>
 800b4f0:	0659      	lsls	r1, r3, #25
 800b4f2:	bf48      	it	mi
 800b4f4:	b2b6      	uxthmi	r6, r6
 800b4f6:	e7e6      	b.n	800b4c6 <_printf_i+0x182>
 800b4f8:	4615      	mov	r5, r2
 800b4fa:	e7bb      	b.n	800b474 <_printf_i+0x130>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	6826      	ldr	r6, [r4, #0]
 800b500:	6961      	ldr	r1, [r4, #20]
 800b502:	1d18      	adds	r0, r3, #4
 800b504:	6028      	str	r0, [r5, #0]
 800b506:	0635      	lsls	r5, r6, #24
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	d501      	bpl.n	800b510 <_printf_i+0x1cc>
 800b50c:	6019      	str	r1, [r3, #0]
 800b50e:	e002      	b.n	800b516 <_printf_i+0x1d2>
 800b510:	0670      	lsls	r0, r6, #25
 800b512:	d5fb      	bpl.n	800b50c <_printf_i+0x1c8>
 800b514:	8019      	strh	r1, [r3, #0]
 800b516:	2300      	movs	r3, #0
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	4615      	mov	r5, r2
 800b51c:	e7ba      	b.n	800b494 <_printf_i+0x150>
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	1d1a      	adds	r2, r3, #4
 800b522:	602a      	str	r2, [r5, #0]
 800b524:	681d      	ldr	r5, [r3, #0]
 800b526:	6862      	ldr	r2, [r4, #4]
 800b528:	2100      	movs	r1, #0
 800b52a:	4628      	mov	r0, r5
 800b52c:	f7f4 fe58 	bl	80001e0 <memchr>
 800b530:	b108      	cbz	r0, 800b536 <_printf_i+0x1f2>
 800b532:	1b40      	subs	r0, r0, r5
 800b534:	6060      	str	r0, [r4, #4]
 800b536:	6863      	ldr	r3, [r4, #4]
 800b538:	6123      	str	r3, [r4, #16]
 800b53a:	2300      	movs	r3, #0
 800b53c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b540:	e7a8      	b.n	800b494 <_printf_i+0x150>
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	462a      	mov	r2, r5
 800b546:	4649      	mov	r1, r9
 800b548:	4640      	mov	r0, r8
 800b54a:	47d0      	blx	sl
 800b54c:	3001      	adds	r0, #1
 800b54e:	d0ab      	beq.n	800b4a8 <_printf_i+0x164>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	079b      	lsls	r3, r3, #30
 800b554:	d413      	bmi.n	800b57e <_printf_i+0x23a>
 800b556:	68e0      	ldr	r0, [r4, #12]
 800b558:	9b03      	ldr	r3, [sp, #12]
 800b55a:	4298      	cmp	r0, r3
 800b55c:	bfb8      	it	lt
 800b55e:	4618      	movlt	r0, r3
 800b560:	e7a4      	b.n	800b4ac <_printf_i+0x168>
 800b562:	2301      	movs	r3, #1
 800b564:	4632      	mov	r2, r6
 800b566:	4649      	mov	r1, r9
 800b568:	4640      	mov	r0, r8
 800b56a:	47d0      	blx	sl
 800b56c:	3001      	adds	r0, #1
 800b56e:	d09b      	beq.n	800b4a8 <_printf_i+0x164>
 800b570:	3501      	adds	r5, #1
 800b572:	68e3      	ldr	r3, [r4, #12]
 800b574:	9903      	ldr	r1, [sp, #12]
 800b576:	1a5b      	subs	r3, r3, r1
 800b578:	42ab      	cmp	r3, r5
 800b57a:	dcf2      	bgt.n	800b562 <_printf_i+0x21e>
 800b57c:	e7eb      	b.n	800b556 <_printf_i+0x212>
 800b57e:	2500      	movs	r5, #0
 800b580:	f104 0619 	add.w	r6, r4, #25
 800b584:	e7f5      	b.n	800b572 <_printf_i+0x22e>
 800b586:	bf00      	nop
 800b588:	0800bb91 	.word	0x0800bb91
 800b58c:	0800bba2 	.word	0x0800bba2

0800b590 <_read_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d07      	ldr	r5, [pc, #28]	; (800b5b0 <_read_r+0x20>)
 800b594:	4604      	mov	r4, r0
 800b596:	4608      	mov	r0, r1
 800b598:	4611      	mov	r1, r2
 800b59a:	2200      	movs	r2, #0
 800b59c:	602a      	str	r2, [r5, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f7fb fb04 	bl	8006bac <_read>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_read_r+0x1e>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_read_r+0x1e>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	2000087c 	.word	0x2000087c

0800b5b4 <_fstat_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4d07      	ldr	r5, [pc, #28]	; (800b5d4 <_fstat_r+0x20>)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	4608      	mov	r0, r1
 800b5be:	4611      	mov	r1, r2
 800b5c0:	602b      	str	r3, [r5, #0]
 800b5c2:	f7fb fb38 	bl	8006c36 <_fstat>
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	d102      	bne.n	800b5d0 <_fstat_r+0x1c>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	b103      	cbz	r3, 800b5d0 <_fstat_r+0x1c>
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	bd38      	pop	{r3, r4, r5, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000087c 	.word	0x2000087c

0800b5d8 <_isatty_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4d06      	ldr	r5, [pc, #24]	; (800b5f4 <_isatty_r+0x1c>)
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4604      	mov	r4, r0
 800b5e0:	4608      	mov	r0, r1
 800b5e2:	602b      	str	r3, [r5, #0]
 800b5e4:	f7fb fb37 	bl	8006c56 <_isatty>
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d102      	bne.n	800b5f2 <_isatty_r+0x1a>
 800b5ec:	682b      	ldr	r3, [r5, #0]
 800b5ee:	b103      	cbz	r3, 800b5f2 <_isatty_r+0x1a>
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	bd38      	pop	{r3, r4, r5, pc}
 800b5f4:	2000087c 	.word	0x2000087c

0800b5f8 <_realloc_r>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	4614      	mov	r4, r2
 800b600:	460e      	mov	r6, r1
 800b602:	b921      	cbnz	r1, 800b60e <_realloc_r+0x16>
 800b604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b608:	4611      	mov	r1, r2
 800b60a:	f7ff b887 	b.w	800a71c <_malloc_r>
 800b60e:	b92a      	cbnz	r2, 800b61c <_realloc_r+0x24>
 800b610:	f7ff f818 	bl	800a644 <_free_r>
 800b614:	4625      	mov	r5, r4
 800b616:	4628      	mov	r0, r5
 800b618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61c:	f000 f81b 	bl	800b656 <_malloc_usable_size_r>
 800b620:	4284      	cmp	r4, r0
 800b622:	4607      	mov	r7, r0
 800b624:	d802      	bhi.n	800b62c <_realloc_r+0x34>
 800b626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b62a:	d812      	bhi.n	800b652 <_realloc_r+0x5a>
 800b62c:	4621      	mov	r1, r4
 800b62e:	4640      	mov	r0, r8
 800b630:	f7ff f874 	bl	800a71c <_malloc_r>
 800b634:	4605      	mov	r5, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	d0ed      	beq.n	800b616 <_realloc_r+0x1e>
 800b63a:	42bc      	cmp	r4, r7
 800b63c:	4622      	mov	r2, r4
 800b63e:	4631      	mov	r1, r6
 800b640:	bf28      	it	cs
 800b642:	463a      	movcs	r2, r7
 800b644:	f7fe ffb8 	bl	800a5b8 <memcpy>
 800b648:	4631      	mov	r1, r6
 800b64a:	4640      	mov	r0, r8
 800b64c:	f7fe fffa 	bl	800a644 <_free_r>
 800b650:	e7e1      	b.n	800b616 <_realloc_r+0x1e>
 800b652:	4635      	mov	r5, r6
 800b654:	e7df      	b.n	800b616 <_realloc_r+0x1e>

0800b656 <_malloc_usable_size_r>:
 800b656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65a:	1f18      	subs	r0, r3, #4
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfbc      	itt	lt
 800b660:	580b      	ldrlt	r3, [r1, r0]
 800b662:	18c0      	addlt	r0, r0, r3
 800b664:	4770      	bx	lr
	...

0800b668 <_init>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	bf00      	nop
 800b66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66e:	bc08      	pop	{r3}
 800b670:	469e      	mov	lr, r3
 800b672:	4770      	bx	lr

0800b674 <_fini>:
 800b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b676:	bf00      	nop
 800b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67a:	bc08      	pop	{r3}
 800b67c:	469e      	mov	lr, r3
 800b67e:	4770      	bx	lr
