
stm32F4ZET_can_open_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800a854  0800a854  0001a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae20  0800ae20  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae28  0800ae28  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae2c  0800ae2c  0001ae2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ae30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000194  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023117  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004999  00000000  00000000  00043337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00047cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  00049120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e77  00000000  00000000  0004a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc35  00000000  00000000  0007037f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6cf4  00000000  00000000  0008cfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00163ca8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c50  00000000  00000000  00163cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a83c 	.word	0x0800a83c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a83c 	.word	0x0800a83c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	2304      	movs	r3, #4
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <OD_getIndex+0x14>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	e000      	b.n	80005f4 <OD_getIndex+0x16>
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <OD_extension_init+0x14>
 8000610:	2305      	movs	r3, #5
 8000612:	e003      	b.n	800061c <OD_extension_init+0x1c>
    entry->extension = extension;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	460b      	mov	r3, r1
 8000636:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000638:	7af9      	ldrb	r1, [r7, #11]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2304      	movs	r3, #4
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f001 fb58 	bl	8001cf8 <OD_get_value>
 8000648:	4603      	mov	r3, r0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00c      	beq.n	8000680 <OD_read_1014_default+0x2e>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	7d1b      	ldrb	r3, [r3, #20]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d108      	bne.n	8000680 <OD_read_1014_default+0x2e>
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d902      	bls.n	8000680 <OD_read_1014_default+0x2e>
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000680:	2309      	movs	r3, #9
 8000682:	e01b      	b.n	80006bc <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <OD_read_1014_default+0x44>
 8000692:	2300      	movs	r3, #0
 8000694:	e001      	b.n	800069a <OD_read_1014_default+0x48>
 8000696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800069a:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80006a2:	3380      	adds	r3, #128	; 0x80
 80006a4:	461a      	mov	r2, r3
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80006ac:	6939      	ldr	r1, [r7, #16]
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f7ff ff86 	bl	80005c0 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2204      	movs	r2, #4
 80006b8:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00f      	beq.n	80006f8 <OD_read_1003+0x34>
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00c      	beq.n	80006f8 <OD_read_1003+0x34>
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d009      	beq.n	80006f8 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d803      	bhi.n	80006f2 <OD_read_1003+0x2e>
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	7d1b      	ldrb	r3, [r3, #20]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <OD_read_1003+0x34>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 80006f8:	2309      	movs	r3, #9
 80006fa:	e04d      	b.n	8000798 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	7f1b      	ldrb	r3, [r3, #28]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d801      	bhi.n	800070e <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 800070a:	2309      	movs	r3, #9
 800070c:	e044      	b.n	8000798 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	7d1b      	ldrb	r3, [r3, #20]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10b      	bne.n	800072e <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800071c:	4619      	mov	r1, r3
 800071e:	68b8      	ldr	r0, [r7, #8]
 8000720:	f7ff ff3e 	bl	80005a0 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	e034      	b.n	8000798 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	7d1a      	ldrb	r2, [r3, #20]
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000738:	429a      	cmp	r2, r3
 800073a:	d82c      	bhi.n	8000796 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	7f5b      	ldrb	r3, [r3, #29]
 8000740:	b29a      	uxth	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	7d1b      	ldrb	r3, [r3, #20]
 8000746:	b29b      	uxth	r3, r3
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	b29b      	uxth	r3, r3
 800074c:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800074e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000752:	2b00      	cmp	r3, #0
 8000754:	da07      	bge.n	8000766 <OD_read_1003+0xa2>
            index += em->fifoSize;
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	7f1b      	ldrb	r3, [r3, #28]
 800075a:	b29a      	uxth	r2, r3
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	82fb      	strh	r3, [r7, #22]
 8000764:	e007      	b.n	8000776 <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 8000766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	7f12      	ldrb	r2, [r2, #28]
 800076e:	4293      	cmp	r3, r2
 8000770:	db01      	blt.n	8000776 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 8000772:	2309      	movs	r3, #9
 8000774:	e010      	b.n	8000798 <OD_read_1003+0xd4>
        }
        else { /* MISRA C 2004 14.10 */ }
        CO_setUint32(buf, em->fifo[index].msg);
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4413      	add	r3, r2
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f7ff ff1a 	bl	80005c0 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2204      	movs	r2, #4
 8000790:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 8000796:	2319      	movs	r3, #25
    }
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00c      	beq.n	80007ce <OD_write_1003+0x2e>
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	7d1b      	ldrb	r3, [r3, #20]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d108      	bne.n	80007ce <OD_write_1003+0x2e>
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d005      	beq.n	80007ce <OD_write_1003+0x2e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d102      	bne.n	80007ce <OD_write_1003+0x2e>
        || countWritten == NULL)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80007ce:	2309      	movs	r3, #9
 80007d0:	e012      	b.n	80007f8 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80007d2:	68b8      	ldr	r0, [r7, #8]
 80007d4:	f7ff fed6 	bl	8000584 <CO_getUint8>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80007de:	230f      	movs	r3, #15
 80007e0:	e00a      	b.n	80007f8 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af02      	add	r7, sp, #8
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d01a      	beq.n	800084e <CO_EM_init+0x4e>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d017      	beq.n	800084e <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d103      	bne.n	800082c <CO_EM_init+0x2c>
 8000824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d810      	bhi.n	800084e <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00d      	beq.n	800084e <CO_EM_init+0x4e>
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00a      	beq.n	800084e <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000838:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <CO_EM_init+0x4e>
 8000840:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000844:	2b00      	cmp	r3, #0
 8000846:	db02      	blt.n	800084e <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e0a7      	b.n	80009a4 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8000854:	2250      	movs	r2, #80	; 0x50
 8000856:	2100      	movs	r1, #0
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f009 f987 	bl	8009b6c <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000864:	2300      	movs	r3, #0
 8000866:	2201      	movs	r2, #1
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f001 faab 	bl	8001dc6 <OD_getPtr>
 8000870:	4602      	mov	r2, r0
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10c      	bne.n	8000898 <CO_EM_init+0x98>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1001_errReg); }
 800087e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <CO_EM_init+0x92>
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff feaa 	bl	80005de <OD_getIndex>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000890:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000892:	f06f 030b 	mvn.w	r3, #11
 8000896:	e085      	b.n	80009a4 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008ac:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008ae:	f107 0210 	add.w	r2, r7, #16
 80008b2:	2301      	movs	r3, #1
 80008b4:	2100      	movs	r1, #0
 80008b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008b8:	f7ff feb6 	bl	8000628 <OD_get_u32>
 80008bc:	4603      	mov	r3, r0
 80008be:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80008c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <CO_EM_init+0xd2>
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <CO_EM_init+0x1ac>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d010      	beq.n	80008f4 <CO_EM_init+0xf4>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1014_cobIdEm); }
 80008d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <CO_EM_init+0xe6>
 80008d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008da:	f7ff fe80 	bl	80005de <OD_getIndex>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) { return CO_ERROR_OD_PARAMETERS; }
 80008e6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <CO_EM_init+0xf4>
 80008ee:	f06f 030b 	mvn.w	r3, #11
 80008f2:	e057      	b.n	80009a4 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 80008f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	3380      	adds	r3, #128	; 0x80
 80008fc:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	43db      	mvns	r3, r3
 8000902:	0fdb      	lsrs	r3, r3, #31
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <CO_EM_init+0x1b0>)
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <CO_EM_init+0x1b4>)
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3330      	adds	r3, #48	; 0x30
 8000922:	4619      	mov	r1, r3
 8000924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000926:	f7ff fe6b 	bl	8000600 <OD_extension_init>
 800092a:	4603      	mov	r3, r0
 800092c:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800092e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00c      	beq.n	8000950 <CO_EM_init+0x150>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1014_cobIdEm); }
 8000936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <CO_EM_init+0x14a>
 800093c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800093e:	f7ff fe4e 	bl	80005de <OD_getIndex>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800094a:	f06f 030b 	mvn.w	r3, #11
 800094e:	e029      	b.n	80009a4 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 800095a:	8aba      	ldrh	r2, [r7, #20]
 800095c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800095e:	2300      	movs	r3, #0
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2308      	movs	r3, #8
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f005 fad3 	bl	8005f14 <CO_CANtxBufferInit>
 800096e:	4602      	mov	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	e010      	b.n	80009a4 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <CO_EM_init+0x1b8>)
 800098c:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <CO_EM_init+0x1bc>)
 8000992:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3340      	adds	r3, #64	; 0x40
 8000998:	4619      	mov	r1, r3
 800099a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800099c:	f7ff fe30 	bl	8000600 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80009a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	7ffff800 	.word	0x7ffff800
 80009b0:	08000653 	.word	0x08000653
 80009b4:	08001925 	.word	0x08001925
 80009b8:	080006c5 	.word	0x080006c5
 80009bc:	080007a1 	.word	0x080007a1

080009c0 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	8a5b      	ldrh	r3, [r3, #18]
 80009d4:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	8a1b      	ldrh	r3, [r3, #16]
 80009da:	8aba      	ldrh	r2, [r7, #20]
 80009dc:	429a      	cmp	r2, r3
 80009de:	f000 80a2 	beq.w	8000b26 <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8a1a      	ldrh	r2, [r3, #16]
 80009e6:	8abb      	ldrh	r3, [r7, #20]
 80009e8:	4053      	eors	r3, r2
 80009ea:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	8aba      	ldrh	r2, [r7, #20]
 80009f0:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) {
 80009f2:	8a7a      	ldrh	r2, [r7, #18]
 80009f4:	f240 1301 	movw	r3, #257	; 0x101
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d010      	beq.n	8000a20 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 80009fe:	8aba      	ldrh	r2, [r7, #20]
 8000a00:	f240 1301 	movw	r3, #257	; 0x101
 8000a04:	4013      	ands	r3, r2
            CO_error(em,
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2201      	movs	r2, #1
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 f91a 	bl	8000c54 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE) {
 8000a20:	8a7b      	ldrh	r3, [r7, #18]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d010      	beq.n	8000a4c <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000a2a:	8abb      	ldrh	r3, [r7, #20]
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	f248 1320 	movw	r3, #33056	; 0x8120
 8000a44:	2207      	movs	r2, #7
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f000 f904 	bl	8000c54 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) {
 8000a4c:	8a7b      	ldrh	r3, [r7, #18]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d010      	beq.n	8000a78 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000a56:	8abb      	ldrh	r3, [r7, #20]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	f248 1340 	movw	r3, #33088	; 0x8140
 8000a70:	2212      	movs	r2, #18
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f000 f8ee 	bl	8000c54 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) {
 8000a78:	8a7b      	ldrh	r3, [r7, #18]
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d010      	beq.n	8000aa4 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8000a82:	8abb      	ldrh	r3, [r7, #20]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4619      	mov	r1, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f248 1310 	movw	r3, #33040	; 0x8110
 8000a9c:	2214      	movs	r2, #20
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 f8d8 	bl	8000c54 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) {
 8000aa4:	8a7b      	ldrh	r3, [r7, #18]
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d010      	beq.n	8000ad0 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8000aae:	8abb      	ldrh	r3, [r7, #20]
 8000ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ac8:	2215      	movs	r2, #21
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f8c2 	bl	8000c54 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE) {
 8000ad0:	8a7b      	ldrh	r3, [r7, #18]
 8000ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d010      	beq.n	8000afc <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000ada:	8abb      	ldrh	r3, [r7, #20]
 8000adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	f248 1320 	movw	r3, #33056	; 0x8120
 8000af4:	2206      	movs	r2, #6
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f000 f8ac 	bl	8000c54 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) {
 8000afc:	8a7b      	ldrh	r3, [r7, #18]
 8000afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00f      	beq.n	8000b26 <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000b06:	8abb      	ldrh	r3, [r7, #20]
 8000b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2313      	movs	r3, #19
 8000b1e:	2213      	movs	r2, #19
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f000 f897 	bl	8000c54 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	795b      	ldrb	r3, [r3, #5]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <CO_EM_process+0x18a>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	78db      	ldrb	r3, [r3, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	7a1b      	ldrb	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <CO_EM_process+0x1a2>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	7a5b      	ldrb	r3, [r3, #9]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b68:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	7dfa      	ldrb	r2, [r7, #23]
 8000b70:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d067      	beq.n	8000c48 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	7f1b      	ldrb	r3, [r3, #28]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d965      	bls.n	8000c4c <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	7f9b      	ldrb	r3, [r3, #30]
 8000b84:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	7f5b      	ldrb	r3, [r3, #29]
 8000b8a:	7c7a      	ldrb	r2, [r7, #17]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d05d      	beq.n	8000c4c <CO_EM_process+0x28c>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d158      	bne.n	8000c4c <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	7c7b      	ldrb	r3, [r7, #17]
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	6819      	ldr	r1, [r3, #0]
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6998      	ldr	r0, [r3, #24]
 8000bae:	7c7b      	ldrb	r3, [r7, #17]
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4403      	add	r3, r0
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	1d58      	adds	r0, r3, #5
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	7c7b      	ldrb	r3, [r7, #17]
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f008 ffa6 	bl	8009b1c <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f005 f9ee 	bl	8005fbc <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000be0:	7c7b      	ldrb	r3, [r7, #17]
 8000be2:	3301      	adds	r3, #1
 8000be4:	747b      	strb	r3, [r7, #17]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	7f1b      	ldrb	r3, [r3, #28]
 8000bea:	7c7a      	ldrb	r2, [r7, #17]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d201      	bcs.n	8000bf4 <CO_EM_process+0x234>
 8000bf0:	7c7a      	ldrb	r2, [r7, #17]
 8000bf2:	e000      	b.n	8000bf6 <CO_EM_process+0x236>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	7fdb      	ldrb	r3, [r3, #31]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d10c      	bne.n	8000c1c <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2202      	movs	r2, #2
 8000c06:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	2220      	movs	r2, #32
 8000c12:	2101      	movs	r1, #1
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 f81d 	bl	8000c54 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c1a:	e017      	b.n	8000c4c <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	7fdb      	ldrb	r3, [r3, #31]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d113      	bne.n	8000c4c <CO_EM_process+0x28c>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	7f9a      	ldrb	r2, [r3, #30]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	7f5b      	ldrb	r3, [r3, #29]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d10d      	bne.n	8000c4c <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c36:	2300      	movs	r3, #0
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	2100      	movs	r1, #0
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f807 	bl	8000c54 <CO_error>
    return;
 8000c46:	e001      	b.n	8000c4c <CO_EM_process+0x28c>
        return;
 8000c48:	bf00      	nop
 8000c4a:	e000      	b.n	8000c4e <CO_EM_process+0x28e>
    return;
 8000c4c:	bf00      	nop
}
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b08d      	sub	sp, #52	; 0x34
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	460b      	mov	r3, r1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) { return; }
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f000 80a6 	beq.w	8000dbe <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	2201      	movs	r2, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8e:	2b09      	cmp	r3, #9
 8000c90:	d90a      	bls.n	8000ca8 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000c92:	2305      	movs	r3, #5
 8000c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000c9e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000ca2:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cba:	4013      	ands	r3, r2
 8000cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <CO_error+0x88>
            return;
 8000cce:	e079      	b.n	8000dc4 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d074      	beq.n	8000dc2 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	061a      	lsls	r2, r3, #24
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce8:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cee:	f3ef 8210 	mrs	r2, PRIMASK
 8000cf2:	617a      	str	r2, [r7, #20]
  return(result);
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
    if (setError) { *errorStatusBits |=  bitmask; }
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d008      	beq.n	8000d14 <CO_error+0xc0>
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e00b      	b.n	8000d2c <CO_error+0xd8>
    else {          *errorStatusBits &= ~bitmask; }
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	4013      	ands	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7f1b      	ldrb	r3, [r3, #28]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d93c      	bls.n	8000dae <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	7f5b      	ldrb	r3, [r3, #29]
 8000d38:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000d3a:	7efb      	ldrb	r3, [r7, #27]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	7f1b      	ldrb	r3, [r3, #28]
 8000d46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d302      	bcc.n	8000d54 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	7f9b      	ldrb	r3, [r3, #30]
 8000d58:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d103      	bne.n	8000d68 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	77da      	strb	r2, [r3, #31]
 8000d66:	e022      	b.n	8000dae <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	7efb      	ldrb	r3, [r7, #27]
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4413      	add	r3, r2
 8000d72:	6a3a      	ldr	r2, [r7, #32]
 8000d74:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	699a      	ldr	r2, [r3, #24]
 8000d7a:	7efb      	ldrb	r3, [r7, #27]
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4413      	add	r3, r2
 8000d80:	69fa      	ldr	r2, [r7, #28]
 8000d82:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d8a:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) { em->fifoCount++; }
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	7f1b      	ldrb	r3, [r3, #28]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da07      	bge.n	8000dae <CO_error+0x15a>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	f383 8810 	msr	PRIMASK, r3
}
 8000dbc:	e002      	b.n	8000dc4 <CO_error+0x170>
    if (em == NULL) { return; }
 8000dbe:	bf00      	nop
 8000dc0:	e000      	b.n	8000dc4 <CO_error+0x170>
            return;
 8000dc2:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000dc4:	3734      	adds	r7, #52	; 0x34
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <OD_getIndex+0x14>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <OD_getIndex+0x16>
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <OD_get_u32>:
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e00:	7af9      	ldrb	r1, [r7, #11]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2304      	movs	r3, #4
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f000 ff74 	bl	8001cf8 <OD_get_value>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	791b      	ldrb	r3, [r3, #4]
 8000e2c:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3305      	adds	r3, #5
 8000e32:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000e34:	7cfb      	ldrb	r3, [r7, #19]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d111      	bne.n	8000e5e <CO_HBcons_receive+0x44>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25a      	sxtb	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2201      	movs	r2, #1
 8000e48:	60da      	str	r2, [r3, #12]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles HBcons. */
        if (HBconsNode->pFunctSignalPre != NULL) {
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <CO_HBcons_receive+0x44>
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	6952      	ldr	r2, [r2, #20]
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4798      	blx	r3
        }
#endif
    }
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b088      	sub	sp, #32
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <CO_HBconsumer_init+0x2c>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d008      	beq.n	8000e92 <CO_HBconsumer_init+0x2c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <CO_HBconsumer_init+0x2c>
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e068      	b.n	8000f6a <CO_HBconsumer_init+0x104>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000e98:	2228      	movs	r2, #40	; 0x28
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f008 fe65 	bl	8009b6c <memset>
    HBcons->em = em;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb2:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000eb8:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d304      	bcc.n	8000ece <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	e000      	b.n	8000ed0 <CO_HBconsumer_init+0x6a>
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	77fb      	strb	r3, [r7, #31]
 8000ed8:	e041      	b.n	8000f5e <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2d9      	uxtb	r1, r3
 8000ee0:	f107 0214 	add.w	r2, r7, #20
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ee8:	f7ff ff82 	bl	8000df0 <OD_get_u32>
 8000eec:	4603      	mov	r3, r0
 8000eee:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000ef0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00c      	beq.n	8000f12 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1016_HBcons); }
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <CO_HBconsumer_init+0xa6>
 8000efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f00:	f7ff ff65 	bl	8000dce <OD_getIndex>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0a:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000f0c:	f06f 030b 	mvn.w	r3, #11
 8000f10:	e02b      	b.n	8000f6a <CO_HBconsumer_init+0x104>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000f1c:	8b7b      	ldrh	r3, [r7, #26]
 8000f1e:	7f7a      	ldrb	r2, [r7, #29]
 8000f20:	7ff9      	ldrb	r1, [r7, #31]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f826 	bl	8000f74 <CO_HBconsumer_initEntry>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000f2c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d011      	beq.n	8000f58 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1016_HBcons); }
 8000f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <CO_HBconsumer_init+0xe2>
 8000f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f3c:	f7ff ff47 	bl	8000dce <OD_getIndex>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) { return ret; }
 8000f48:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000f4c:	f113 0f0c 	cmn.w	r3, #12
 8000f50:	d002      	beq.n	8000f58 <CO_HBconsumer_init+0xf2>
 8000f52:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000f56:	e008      	b.n	8000f6a <CO_HBconsumer_init+0x104>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	77fb      	strb	r3, [r7, #31]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	7a1b      	ldrb	r3, [r3, #8]
 8000f62:	7ffa      	ldrb	r2, [r7, #31]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3b8      	bcc.n	8000eda <CO_HBconsumer_init+0x74>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1016_HBcons); }
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    return CO_ERROR_NO;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b090      	sub	sp, #64	; 0x40
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	70fb      	strb	r3, [r7, #3]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70bb      	strb	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <CO_HBconsumer_initEntry+0x30>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d302      	bcc.n	8000faa <CO_HBconsumer_initEntry+0x36>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	e090      	b.n	80010cc <CO_HBconsumer_initEntry+0x158>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8000faa:	883b      	ldrh	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d032      	beq.n	8001016 <CO_HBconsumer_initEntry+0xa2>
 8000fb0:	78bb      	ldrb	r3, [r7, #2]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d02f      	beq.n	8001016 <CO_HBconsumer_initEntry+0xa2>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000fbc:	e025      	b.n	800100a <CO_HBconsumer_initEntry+0x96>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6859      	ldr	r1, [r3, #4]
 8000fc2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f107 040c 	add.w	r4, r7, #12
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d009      	beq.n	8001000 <CO_HBconsumer_initEntry+0x8c>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <CO_HBconsumer_initEntry+0x8c>
 8000ff2:	7b3b      	ldrb	r3, [r7, #12]
 8000ff4:	78ba      	ldrb	r2, [r7, #2]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d102      	bne.n	8001000 <CO_HBconsumer_initEntry+0x8c>
                ret = CO_ERROR_OD_PARAMETERS;
 8000ffa:	23f4      	movs	r3, #244	; 0xf4
 8000ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001000:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001004:	3301      	adds	r3, #1
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7a1b      	ldrb	r3, [r3, #8]
 800100e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001012:	429a      	cmp	r2, r3
 8001014:	d3d3      	bcc.n	8000fbe <CO_HBconsumer_initEntry+0x4a>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001016:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800101a:	2b00      	cmp	r3, #0
 800101c:	d154      	bne.n	80010c8 <CO_HBconsumer_initEntry+0x154>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6859      	ldr	r1, [r3, #4]
 8001022:	78fa      	ldrb	r2, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
        monitoredNode->nodeId = nodeId;
 8001030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001032:	78ba      	ldrb	r2, [r7, #2]
 8001034:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001036:	883b      	ldrh	r3, [r7, #0]
 8001038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	461a      	mov	r2, r3
 8001042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001044:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	761a      	strb	r2, [r3, #24]
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00d      	beq.n	800107c <CO_HBconsumer_initEntry+0x108>
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <CO_HBconsumer_initEntry+0x108>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001072:	85bb      	strh	r3, [r7, #44]	; 0x2c
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	2201      	movs	r2, #1
 8001078:	709a      	strb	r2, [r3, #2]
 800107a:	e007      	b.n	800108c <CO_HBconsumer_initEntry+0x118>
        }
        else {
            COB_ID = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	85bb      	strh	r3, [r7, #44]	; 0x2c
            monitoredNode->time_us = 0;
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001088:	2200      	movs	r2, #0
 800108a:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29c      	uxth	r4, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80010ac:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80010ae:	4909      	ldr	r1, [pc, #36]	; (80010d4 <CO_HBconsumer_initEntry+0x160>)
 80010b0:	9102      	str	r1, [sp, #8]
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	2300      	movs	r3, #0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010bc:	4621      	mov	r1, r4
 80010be:	f004 fecb 	bl	8005e58 <CO_CANrxBufferInit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 CO_HBcons_receive);
    }
    return ret;
 80010c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	08000e1b 	.word	0x08000e1b

080010d8 <CO_HBconsumer_initCallbackPre>:
/******************************************************************************/
void CO_HBconsumer_initCallbackPre(
        CO_HBconsumer_t        *HBcons,
        void                   *object,
        void                  (*pFunctSignal)(void *object))
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
    if (HBcons != NULL) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d01e      	beq.n	8001128 <CO_HBconsumer_initCallbackPre+0x50>
        uint8_t i;
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	e016      	b.n	800111e <CO_HBconsumer_initCallbackPre+0x46>
            HBcons->monitoredNodes[i].pFunctSignalPre = pFunctSignal;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	7dfa      	ldrb	r2, [r7, #23]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	611a      	str	r2, [r3, #16]
            HBcons->monitoredNodes[i].functSignalObjectPre = object;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	7dfa      	ldrb	r2, [r7, #23]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	615a      	str	r2, [r3, #20]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	3301      	adds	r3, #1
 800111c:	75fb      	strb	r3, [r7, #23]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	7a1b      	ldrb	r3, [r3, #8]
 8001122:	7dfa      	ldrb	r2, [r7, #23]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3e3      	bcc.n	80010f0 <CO_HBconsumer_initCallbackPre+0x18>
        }
    }
}
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b08f      	sub	sp, #60	; 0x3c
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001142:	2301      	movs	r3, #1
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001146:	2301      	movs	r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80ad 	beq.w	80012ac <CO_HBconsumer_process+0x178>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80a8 	beq.w	80012ac <CO_HBconsumer_process+0x178>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001162:	e09b      	b.n	800129c <CO_HBconsumer_process+0x168>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	789b      	ldrb	r3, [r3, #2]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8085 	beq.w	8001290 <CO_HBconsumer_process+0x15c>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d022      	beq.n	80011d4 <CO_HBconsumer_process+0xa0>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d112      	bne.n	80011be <CO_HBconsumer_process+0x8a>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d10a      	bne.n	80011b6 <CO_HBconsumer_process+0x82>
                        CO_errorReport(HBcons->em,
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	f248 1330 	movw	r3, #33072	; 0x8130
 80011ae:	221c      	movs	r2, #28
 80011b0:	2101      	movs	r1, #1
 80011b2:	f7ff fd4f 	bl	8000c54 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2201      	movs	r2, #1
 80011ba:	709a      	strb	r2, [r3, #2]
 80011bc:	e007      	b.n	80011ce <CO_HBconsumer_process+0x9a>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2202      	movs	r2, #2
 80011c2:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d12e      	bne.n	800123a <CO_HBconsumer_process+0x106>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	441a      	add	r2, r3
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d311      	bcc.n	8001218 <CO_HBconsumer_process+0xe4>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	f248 1330 	movw	r3, #33072	; 0x8130
 8001202:	221b      	movs	r2, #27
 8001204:	2101      	movs	r1, #1
 8001206:	f7ff fd25 	bl	8000c54 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2203      	movs	r2, #3
 8001214:	709a      	strb	r2, [r3, #2]
 8001216:	e010      	b.n	800123a <CO_HBconsumer_process+0x106>
                }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_TIMERNEXT
                else if (timerNext_us != NULL) {
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00d      	beq.n	800123a <CO_HBconsumer_process+0x106>
                    /* Calculate timerNext_us for next timeout checking. */
                    uint32_t diff = monitoredNode->time_us
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	689a      	ldr	r2, [r3, #8]
                                  - monitoredNode->timeoutTimer;
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	685b      	ldr	r3, [r3, #4]
                    uint32_t diff = monitoredNode->time_us
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
                    if (*timerNext_us > diff) {
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	d202      	bcs.n	800123a <CO_HBconsumer_process+0x106>
                        *timerNext_us = diff;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	601a      	str	r2, [r3, #0]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d001      	beq.n	8001246 <CO_HBconsumer_process+0x112>
                allMonitoredActiveCurrent = false;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d001      	beq.n	8001254 <CO_HBconsumer_process+0x120>
                allMonitoredOperationalCurrent = false;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
            }
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            /* Verify, if NMT state of monitored node changed */
            if(monitoredNode->NMTstate != monitoredNode->NMTstatePrev) {
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001260:	429a      	cmp	r2, r3
 8001262:	d016      	beq.n	8001292 <CO_HBconsumer_process+0x15e>
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
                if (HBcons->pFunctSignalNmtChanged != NULL) {
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00b      	beq.n	8001284 <CO_HBconsumer_process+0x150>
                    HBcons->pFunctSignalNmtChanged(
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a1c      	ldr	r4, [r3, #32]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	7818      	ldrb	r0, [r3, #0]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001282:	47a0      	blx	r4
                    monitoredNode->pFunctSignalNmtChanged(
                        monitoredNode->nodeId, i, monitoredNode->NMTstate,
                        monitoredNode->pFunctSignalObjectNmtChanged);
#endif
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	761a      	strb	r2, [r3, #24]
 800128e:	e000      	b.n	8001292 <CO_HBconsumer_process+0x15e>
                continue;
 8001290:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001296:	3301      	adds	r3, #1
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	7a1b      	ldrb	r3, [r3, #8]
 80012a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f4ff af5d 	bcc.w	8001164 <CO_HBconsumer_process+0x30>
 80012aa:	e02e      	b.n	800130a <CO_HBconsumer_process+0x1d6>
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d103      	bne.n	80012ba <CO_HBconsumer_process+0x186>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d027      	beq.n	800130a <CO_HBconsumer_process+0x1d6>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	77fb      	strb	r3, [r7, #31]
 80012be:	e01b      	b.n	80012f8 <CO_HBconsumer_process+0x1c4>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	7ffa      	ldrb	r2, [r7, #31]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	613b      	str	r3, [r7, #16]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	761a      	strb	r2, [r3, #24]
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	789b      	ldrb	r3, [r3, #2]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <CO_HBconsumer_process+0x1be>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2201      	movs	r2, #1
 80012f0:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	7a1b      	ldrb	r3, [r3, #8]
 80012fc:	7ffa      	ldrb	r2, [r7, #31]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3de      	bcc.n	80012c0 <CO_HBconsumer_process+0x18c>
            }
        }
        allMonitoredActiveCurrent = false;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    else { /* MISRA C 2004 14.10 */ }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d114      	bne.n	800133c <CO_HBconsumer_process+0x208>
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	2b00      	cmp	r3, #0
 8001316:	d011      	beq.n	800133c <CO_HBconsumer_process+0x208>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	221b      	movs	r2, #27
 8001324:	2100      	movs	r1, #0
 8001326:	f7ff fc95 	bl	8000c54 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	221c      	movs	r2, #28
 8001336:	2100      	movs	r1, #0
 8001338:	f7ff fc8c 	bl	8000c54 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001340:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001346:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	615a      	str	r2, [r3, #20]
}
 800134e:	bf00      	nop
 8001350:	3734      	adds	r7, #52	; 0x34
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}

08001356 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	89fb      	ldrh	r3, [r7, #14]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <OD_getIndex+0x14>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	e000      	b.n	800138a <OD_getIndex+0x16>
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <OD_extension_init>:
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <OD_extension_init+0x14>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e003      	b.n	80013b2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <OD_get_u16>:
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	460b      	mov	r3, r1
 80013cc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80013ce:	7af9      	ldrb	r1, [r7, #11]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2302      	movs	r3, #2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fc8d 	bl	8001cf8 <OD_get_value>
 80013de:	4603      	mov	r3, r0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	2201      	movs	r2, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d807      	bhi.n	8001424 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	5cd2      	ldrb	r2, [r2, r3]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	4013      	ands	r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <CO_isError+0x40>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <CO_isError+0x42>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <CO_getErrorRegister+0x1e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <CO_getErrorRegister+0x1e>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	e000      	b.n	8001456 <CO_getErrorRegister+0x20>
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001462:	b480      	push	{r7}
 8001464:	b087      	sub	sp, #28
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3305      	adds	r3, #5
 8001476:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d10a      	bne.n	80014a4 <CO_NMT_receive+0x42>
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <CO_NMT_receive+0x3c>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	78db      	ldrb	r3, [r3, #3]
 8001498:	7bba      	ldrb	r2, [r7, #14]
 800149a:	429a      	cmp	r2, r3
 800149c:	d102      	bne.n	80014a4 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80014a4:	bf00      	nop
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <OD_write_1017+0x2e>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	7d1b      	ldrb	r3, [r3, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <OD_write_1017+0x2e>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d102      	bne.n	80014de <OD_write_1017+0x2e>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80014de:	2309      	movs	r3, #9
 80014e0:	e017      	b.n	8001512 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff ff34 	bl	8001356 <CO_getUint16>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fb03 f202 	mul.w	r2, r3, r2
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 fa0a 	bl	8001924 <OD_writeOriginal>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af04      	add	r7, sp, #16
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <CO_NMT_init+0x30>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <CO_NMT_init+0x30>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <CO_NMT_init+0x30>
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e098      	b.n	8001684 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001552:	222c      	movs	r2, #44	; 0x2c
 8001554:	2100      	movs	r1, #0
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f008 fb08 	bl	8009b6c <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8c3a      	ldrh	r2, [r7, #32]
 8001572:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 800157a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800157c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 800158a:	f107 0214 	add.w	r2, r7, #20
 800158e:	2301      	movs	r3, #1
 8001590:	2100      	movs	r1, #0
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff ff13 	bl	80013be <OD_get_u16>
 8001598:	4603      	mov	r3, r0
 800159a:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800159c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00c      	beq.n	80015be <CO_NMT_init+0xa2>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1017_ProducerHbTime); }
 80015a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <CO_NMT_init+0x9c>
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	f7ff fee2 	bl	8001374 <OD_getIndex>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80015b8:	f06f 030b 	mvn.w	r3, #11
 80015bc:	e062      	b.n	8001684 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80015be:	8abb      	ldrh	r3, [r7, #20]
 80015c0:	461a      	mov	r2, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a2d      	ldr	r2, [pc, #180]	; (800168c <CO_NMT_init+0x170>)
 80015d8:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <CO_NMT_init+0x174>)
 80015de:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3310      	adds	r3, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	68b8      	ldr	r0, [r7, #8]
 80015e8:	f7ff fed5 	bl	8001396 <OD_extension_init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <CO_NMT_init+0xf6>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1017_ProducerHbTime); }
 80015f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <CO_NMT_init+0xf0>
 80015fe:	68b8      	ldr	r0, [r7, #8]
 8001600:	f7ff feb8 	bl	8001374 <OD_getIndex>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800160a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800160c:	f06f 030b 	mvn.w	r3, #11
 8001610:	e038      	b.n	8001684 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	429a      	cmp	r2, r3
 800161c:	d903      	bls.n	8001626 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001626:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001628:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <CO_NMT_init+0x178>)
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2300      	movs	r3, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800163a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800163c:	f004 fc0c 	bl	8005e58 <CO_CANrxBufferInit>
 8001640:	4603      	mov	r3, r0
 8001642:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <CO_NMT_init+0x136>
        return ret;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001650:	e018      	b.n	8001684 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001658:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800165a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800165c:	2300      	movs	r3, #0
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2301      	movs	r3, #1
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001668:	f004 fc54 	bl	8005f14 <CO_CANtxBufferInit>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e001      	b.n	8001684 <CO_NMT_init+0x168>
    }

    return ret;
 8001680:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08001875 	.word	0x08001875
 8001690:	080014b1 	.word	0x080014b1
 8001694:	08001463 	.word	0x08001463

08001698 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80016b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d204      	bcs.n	80016d4 <CO_NMT_process+0x3c>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	e000      	b.n	80016d6 <CO_NMT_process+0x3e>
 80016d4:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10e      	bne.n	80016fe <CO_NMT_process+0x66>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d029      	beq.n	800173c <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016f6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d01e      	beq.n	800173c <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	7ffa      	ldrb	r2, [r7, #31]
 8001704:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f004 fc53 	bl	8005fbc <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10a      	bne.n	8001734 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	889b      	ldrh	r3, [r3, #4]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <CO_NMT_process+0x96>
 800172a:	2305      	movs	r3, #5
 800172c:	e000      	b.n	8001730 <CO_NMT_process+0x98>
 800172e:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001730:	77fb      	strb	r3, [r7, #31]
 8001732:	e003      	b.n	800173c <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	7ffa      	ldrb	r2, [r7, #31]
 8001740:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	789b      	ldrb	r3, [r3, #2]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d025      	beq.n	8001796 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	2b82      	cmp	r3, #130	; 0x82
 8001750:	d01a      	beq.n	8001788 <CO_NMT_process+0xf0>
 8001752:	2b82      	cmp	r3, #130	; 0x82
 8001754:	dc1b      	bgt.n	800178e <CO_NMT_process+0xf6>
 8001756:	2b81      	cmp	r3, #129	; 0x81
 8001758:	d013      	beq.n	8001782 <CO_NMT_process+0xea>
 800175a:	2b81      	cmp	r3, #129	; 0x81
 800175c:	dc17      	bgt.n	800178e <CO_NMT_process+0xf6>
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	d00c      	beq.n	800177c <CO_NMT_process+0xe4>
 8001762:	2b80      	cmp	r3, #128	; 0x80
 8001764:	dc13      	bgt.n	800178e <CO_NMT_process+0xf6>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d002      	beq.n	8001770 <CO_NMT_process+0xd8>
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 800176e:	e00e      	b.n	800178e <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 8001770:	2305      	movs	r3, #5
 8001772:	77fb      	strb	r3, [r7, #31]
                break;
 8001774:	e00c      	b.n	8001790 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 8001776:	2304      	movs	r3, #4
 8001778:	77fb      	strb	r3, [r7, #31]
                break;
 800177a:	e009      	b.n	8001790 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 800177c:	237f      	movs	r3, #127	; 0x7f
 800177e:	77fb      	strb	r3, [r7, #31]
                break;
 8001780:	e006      	b.n	8001790 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 8001782:	2302      	movs	r3, #2
 8001784:	77bb      	strb	r3, [r7, #30]
                break;
 8001786:	e003      	b.n	8001790 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 8001788:	2301      	movs	r3, #1
 800178a:	77bb      	strb	r3, [r7, #30]
                break;
 800178c:	e000      	b.n	8001790 <CO_NMT_process+0xf8>
                break;
 800178e:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01c      	beq.n	80017dc <CO_NMT_process+0x144>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2112      	movs	r1, #18
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe1d 	bl	80013e8 <CO_isError>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	211b      	movs	r1, #27
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe14 	bl	80013e8 <CO_isError>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d108      	bne.n	80017d8 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	211c      	movs	r1, #28
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe0b 	bl	80013e8 <CO_isError>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <CO_NMT_process+0x146>
 80017dc:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80017de:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <CO_NMT_process+0x170>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe20 	bl	8001436 <CO_getErrorRegister>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	889b      	ldrh	r3, [r3, #4]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <CO_NMT_process+0x170>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <CO_NMT_process+0x172>
 8001808:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800180a:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 800180c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d110      	bne.n	8001836 <CO_NMT_process+0x19e>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <CO_NMT_process+0x188>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00a      	beq.n	8001836 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	889b      	ldrh	r3, [r3, #4]
 8001824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <CO_NMT_process+0x198>
 800182c:	2304      	movs	r3, #4
 800182e:	e000      	b.n	8001832 <CO_NMT_process+0x19a>
 8001830:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001832:	77fb      	strb	r3, [r7, #31]
 8001834:	e010      	b.n	8001858 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	889b      	ldrh	r3, [r3, #4]
 800183a:	b21b      	sxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	da0b      	bge.n	8001858 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8001840:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001844:	2b7f      	cmp	r3, #127	; 0x7f
 8001846:	d107      	bne.n	8001858 <CO_NMT_process+0x1c0>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <CO_NMT_process+0x1c0>
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001854:	2305      	movs	r3, #5
 8001856:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	7ffa      	ldrb	r2, [r7, #31]
 800185c:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) { *NMTstate = NMTstateCpy; }
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <CO_NMT_process+0x1d2>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	7ffa      	ldrb	r2, [r7, #31]
 8001868:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 800186a:	7fbb      	ldrb	r3, [r7, #30]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <OD_readOriginal+0x20>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <OD_readOriginal+0x20>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001894:	2309      	movs	r3, #9
 8001896:	e041      	b.n	800191c <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018aa:	230e      	movs	r3, #14
 80018ac:	e036      	b.n	800191c <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <OD_readOriginal+0x4e>
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d922      	bls.n	8001908 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d801      	bhi.n	80018d0 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80018cc:	2309      	movs	r3, #9
 80018ce:	e025      	b.n	800191c <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4413      	add	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d90a      	bls.n	8001902 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80018fc:	23ff      	movs	r3, #255	; 0xff
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	e002      	b.n	8001908 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f008 f905 	bl	8009b1c <memcpy>

    *countRead = dataLenToCopy;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001918:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <OD_writeOriginal+0x20>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <OD_writeOriginal+0x20>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001944:	2309      	movs	r3, #9
 8001946:	e047      	b.n	80019d8 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800195a:	230e      	movs	r3, #14
 800195c:	e03c      	b.n	80019d8 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <OD_writeOriginal+0x4e>
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d922      	bls.n	80019b8 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	429a      	cmp	r2, r3
 800197a:	d801      	bhi.n	8001980 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800197c:	2309      	movs	r3, #9
 800197e:	e02b      	b.n	80019d8 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4413      	add	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	d90a      	bls.n	80019b2 <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	441a      	add	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019ac:	23ff      	movs	r3, #255	; 0xff
 80019ae:	75fb      	strb	r3, [r7, #23]
 80019b0:	e002      	b.n	80019b8 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d201      	bcs.n	80019c4 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80019c0:	230c      	movs	r3, #12
 80019c2:	e009      	b.n	80019d8 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	69b8      	ldr	r0, [r7, #24]
 80019ca:	f008 f8a7 	bl	8009b1c <memcpy>

    *countWritten = dataLenToCopy;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	601a      	str	r2, [r3, #0]
    return returnCode;
 80019d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 80019ee:	2302      	movs	r3, #2
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a0a:	2302      	movs	r3, #2
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <OD_find+0x1a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <OD_find+0x1e>
        return NULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e046      	b.n	8001ac4 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001a42:	e026      	b.n	8001a92 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a44:	8afa      	ldrh	r2, [r7, #22]
 8001a46:	8abb      	ldrh	r3, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	105b      	asrs	r3, r3, #1
 8001a4c:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	89fa      	ldrh	r2, [r7, #14]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	887a      	ldrh	r2, [r7, #2]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d101      	bne.n	8001a6e <OD_find+0x56>
            return entry;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	e02a      	b.n	8001ac4 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d209      	bcs.n	8001a8c <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001a78:	89fb      	ldrh	r3, [r7, #14]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <OD_find+0x6e>
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	e000      	b.n	8001a88 <OD_find+0x70>
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	82bb      	strh	r3, [r7, #20]
 8001a8a:	e002      	b.n	8001a92 <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001a92:	8afa      	ldrh	r2, [r7, #22]
 8001a94:	8abb      	ldrh	r3, [r7, #20]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3d4      	bcc.n	8001a44 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001a9a:	8afa      	ldrh	r2, [r7, #22]
 8001a9c:	8abb      	ldrh	r3, [r7, #20]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d10f      	bne.n	8001ac2 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	8afa      	ldrh	r2, [r7, #22]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d101      	bne.n	8001ac2 <OD_find+0xaa>
            return entry;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	e000      	b.n	8001ac4 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b08d      	sub	sp, #52	; 0x34
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	460b      	mov	r3, r1
 8001ade:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) { return ODR_IDX_NOT_EXIST; }
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <OD_getSub+0x1e>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <OD_getSub+0x22>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e0d6      	b.n	8001ca0 <OD_getSub+0x1d0>
    if (io == NULL) { return ODR_DEV_INCOMPAT; }
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <OD_getSub+0x2c>
 8001af8:	2309      	movs	r3, #9
 8001afa:	e0d1      	b.n	8001ca0 <OD_getSub+0x1d0>

    OD_stream_t *stream = &io->stream;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	78db      	ldrb	r3, [r3, #3]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d050      	beq.n	8001bae <OD_getSub+0xde>
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	f300 808c 	bgt.w	8001c2a <OD_getSub+0x15a>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d002      	beq.n	8001b1c <OD_getSub+0x4c>
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d015      	beq.n	8001b46 <OD_getSub+0x76>
 8001b1a:	e086      	b.n	8001c2a <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) { return ODR_SUB_NOT_EXIST; }
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <OD_getSub+0x56>
 8001b22:	230e      	movs	r3, #14
 8001b24:	e0bc      	b.n	8001ca0 <OD_getSub+0x1d0>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	791a      	ldrb	r2, [r3, #4]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	609a      	str	r2, [r3, #8]
        break;
 8001b44:	e073      	b.n	8001c2e <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) { return ODR_SUB_NOT_EXIST; }
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	789b      	ldrb	r3, [r3, #2]
 8001b4a:	7afa      	ldrb	r2, [r7, #11]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d301      	bcc.n	8001b54 <OD_getSub+0x84>
 8001b50:	230e      	movs	r3, #14
 8001b52:	e0a5      	b.n	8001ca0 <OD_getSub+0x1d0>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	7a1a      	ldrb	r2, [r3, #8]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	2201      	movs	r2, #1
 8001b74:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001b76:	e05a      	b.n	8001c2e <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	7a5a      	ldrb	r2, [r3, #9]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	7afa      	ldrb	r2, [r7, #11]
 8001b92:	3a01      	subs	r2, #1
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	e000      	b.n	8001ba0 <OD_getSub+0xd0>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba2:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	609a      	str	r2, [r3, #8]
        break;
 8001bac:	e03f      	b.n	8001c2e <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bbe:	e01c      	b.n	8001bfa <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001bc0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	7afa      	ldrb	r2, [r7, #11]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d10a      	bne.n	8001bf0 <OD_getSub+0x120>
                odo = &odoArr[i];
 8001bda:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	4413      	add	r3, r2
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001bee:	e00a      	b.n	8001c06 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	789b      	ldrb	r3, [r3, #2]
 8001bfe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3dc      	bcc.n	8001bc0 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) { return ODR_SUB_NOT_EXIST; }
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <OD_getSub+0x140>
 8001c0c:	230e      	movs	r3, #14
 8001c0e:	e047      	b.n	8001ca0 <OD_getSub+0x1d0>

        stream->attribute = odo->attribute;
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	795a      	ldrb	r2, [r3, #5]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	609a      	str	r2, [r3, #8]
        break;
 8001c28:	e001      	b.n	8001c2e <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001c2a:	2309      	movs	r3, #9
 8001c2c:	e038      	b.n	8001ca0 <OD_getSub+0x1d0>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <OD_getSub+0x16c>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <OD_getSub+0x1dc>)
 8001c40:	619a      	str	r2, [r3, #24]
        io->write = OD_writeOriginal;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <OD_getSub+0x1e0>)
 8001c46:	61da      	str	r2, [r3, #28]
        stream->object = NULL;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	e01c      	b.n	8001c8a <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <OD_getSub+0x192>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	e000      	b.n	8001c64 <OD_getSub+0x194>
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <OD_getSub+0x1e4>)
        io->read = entry->extension->read != NULL ?
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6193      	str	r3, [r2, #24]
        io->write = entry->extension->write != NULL ?
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <OD_getSub+0x1aa>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	e000      	b.n	8001c7c <OD_getSub+0x1ac>
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <OD_getSub+0x1e8>)
        io->write = entry->extension->write != NULL ?
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	61d3      	str	r3, [r2, #28]
        stream->object = entry->extension->object;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	7afa      	ldrb	r2, [r7, #11]
 8001c9c:	751a      	strb	r2, [r3, #20]

    return ODR_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3734      	adds	r7, #52	; 0x34
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	08001875 	.word	0x08001875
 8001cb0:	08001925 	.word	0x08001925
 8001cb4:	080019e1 	.word	0x080019e1
 8001cb8:	080019fd 	.word	0x080019fd

08001cbc <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db03      	blt.n	8001cd6 <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b19      	cmp	r3, #25
 8001cd4:	dd02      	ble.n	8001cdc <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <OD_getSDOabCode+0x38>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	e004      	b.n	8001ce6 <OD_getSDOabCode+0x2a>
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <OD_getSDOabCode+0x38>)
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	0800ab9c 	.word	0x0800ab9c

08001cf8 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b091      	sub	sp, #68	; 0x44
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	460b      	mov	r3, r1
 8001d06:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) { return ODR_DEV_INCOMPAT; }
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <OD_get_value+0x1a>
 8001d0e:	2309      	movs	r3, #9
 8001d10:	e024      	b.n	8001d5c <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001d12:	f107 0318 	add.w	r3, r7, #24
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countRd = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d1c:	f107 0218 	add.w	r2, r7, #24
 8001d20:	7af9      	ldrb	r1, [r7, #11]
 8001d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff fed3 	bl	8001ad0 <OD_getSub>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) { return ret; }
 8001d30:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <OD_get_value+0x46>
 8001d38:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001d3c:	e00e      	b.n	8001d5c <OD_get_value+0x64>
    if (stream->dataLength != len) { return ODR_TYPE_MISMATCH; }
 8001d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <OD_get_value+0x54>
 8001d48:	230b      	movs	r3, #11
 8001d4a:	e007      	b.n	8001d5c <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001d4c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d58:	47a0      	blx	r4
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3744      	adds	r7, #68	; 0x44
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}

08001d64 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b091      	sub	sp, #68	; 0x44
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	460b      	mov	r3, r1
 8001d72:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d7e:	f107 0218 	add.w	r2, r7, #24
 8001d82:	7af9      	ldrb	r1, [r7, #11]
 8001d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fea2 	bl	8001ad0 <OD_getSub>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) { return ret; }
 8001d92:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <OD_set_value+0x3c>
 8001d9a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001d9e:	e00e      	b.n	8001dbe <OD_set_value+0x5a>
    if (stream->dataLength != len) { return ODR_TYPE_MISMATCH; }
 8001da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <OD_set_value+0x4a>
 8001daa:	230b      	movs	r3, #11
 8001dac:	e007      	b.n	8001dbe <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001dae:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001dba:	47a0      	blx	r4
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3744      	adds	r7, #68	; 0x44
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}

08001dc6 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b08e      	sub	sp, #56	; 0x38
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001ddc:	f107 0210 	add.w	r2, r7, #16
 8001de0:	7af9      	ldrb	r1, [r7, #11]
 8001de2:	2301      	movs	r3, #1
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fe73 	bl	8001ad0 <OD_getSub>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001df0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d116      	bne.n	8001e26 <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <OD_getPtr+0x42>
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d103      	bne.n	8001e10 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001e08:	2309      	movs	r3, #9
 8001e0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e0e:	e00a      	b.n	8001e26 <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <OD_getPtr+0x60>
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d002      	beq.n	8001e26 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001e20:	230b      	movs	r3, #11
 8001e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        else { /* MISRA C 2004 14.10 */ }
    }

    if (err != NULL) { *err = errCopy; }
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <OD_getPtr+0x6e>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001e32:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001e34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <OD_getPtr+0x7c>
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e000      	b.n	8001e44 <OD_getPtr+0x7e>
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3738      	adds	r7, #56	; 0x38
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <OD_getIndex+0x14>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	e000      	b.n	8001e62 <OD_getIndex+0x16>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <OD_get_u8>:
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af02      	add	r7, sp, #8
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001e7e:	7af9      	ldrb	r1, [r7, #11]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff ff35 	bl	8001cf8 <OD_get_value>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <OD_get_u32>:
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001ea8:	7af9      	ldrb	r1, [r7, #11]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2304      	movs	r3, #4
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ff20 	bl	8001cf8 <OD_get_value>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDOclient_receive(void *object, void *msg) {
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t *SDO_C = (CO_SDOclient_t*)object;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3305      	adds	r3, #5
 8001eda:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if (SDO_C->state != CO_SDO_ST_IDLE && DLC == 8U
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d014      	beq.n	8001f12 <CO_SDOclient_receive+0x50>
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d111      	bne.n	8001f12 <CO_SDOclient_receive+0x50>
        && (!CO_FLAG_READ(SDO_C->CANrxNew) || data[0] == 0x80)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <CO_SDOclient_receive+0x3c>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b80      	cmp	r3, #128	; 0x80
 8001efc:	d109      	bne.n	8001f12 <CO_SDOclient_receive+0x50>
            || (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ
                && SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP)
        ) {
#endif
            /* copy data and set 'new message' flag */
            memcpy((void *)&SDO_C->CANrxData[0], (const void *)&data[0], 8);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3370      	adds	r3, #112	; 0x70
 8001f02:	2208      	movs	r2, #8
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f007 fe08 	bl	8009b1c <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
            }
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <CO_SDOclient_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO_C == NULL || OD_1280_SDOcliPar == NULL
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <CO_SDOclient_init+0x42>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) < OD_H1280_SDO_CLIENT_1_PARAM
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff89 	bl	8001e4c <OD_getIndex>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001f40:	d30c      	bcc.n	8001f5c <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) > (OD_H1280_SDO_CLIENT_1_PARAM + 0x7F)
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff82 	bl	8001e4c <OD_getIndex>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8001f4e:	d205      	bcs.n	8001f5c <CO_SDOclient_init+0x42>
        || CANdevRx==NULL || CANdevTx==NULL
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <CO_SDOclient_init+0x42>
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <CO_SDOclient_init+0x48>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	e068      	b.n	8002034 <CO_SDOclient_init+0x11a>
    /* Configure object variables */
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_LOCAL
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f66:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f6c:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f72:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f78:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3348      	adds	r3, #72	; 0x48
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	4619      	mov	r1, r3
 8001f88:	f002 f87a 	bl	8004080 <CO_fifo_init>
                 CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1);

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 8001f8c:	f107 021a 	add.w	r2, r7, #26
 8001f90:	2301      	movs	r3, #1
 8001f92:	2100      	movs	r1, #0
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff6a 	bl	8001e6e <OD_get_u8>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8001f9e:	f107 0214 	add.w	r2, r7, #20
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff76 	bl	8001e98 <OD_get_u32>
 8001fac:	4603      	mov	r3, r0
 8001fae:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8001fb0:	f107 0210 	add.w	r2, r7, #16
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff6d 	bl	8001e98 <OD_get_u32>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 8001fc2:	f107 0219 	add.w	r2, r7, #25
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	2103      	movs	r1, #3
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff4f 	bl	8001e6e <OD_get_u8>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	773b      	strb	r3, [r7, #28]

    if (odRet0 != ODR_OK || maxSubIndex != 3
 8001fd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10e      	bne.n	8001ffa <CO_SDOclient_init+0xe0>
 8001fdc:	7ebb      	ldrb	r3, [r7, #26]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d10b      	bne.n	8001ffa <CO_SDOclient_init+0xe0>
        || odRet1 != ODR_OK || odRet2 != ODR_OK || odRet3 != ODR_OK
 8001fe2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <CO_SDOclient_init+0xe0>
 8001fea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <CO_SDOclient_init+0xe0>
 8001ff2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <CO_SDOclient_init+0xfa>
    ) {
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <CO_SDOclient_init+0xf4>
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff23 	bl	8001e4c <OD_getIndex>
 8002006:	4603      	mov	r3, r0
 8002008:	461a      	mov	r2, r3
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800200e:	f06f 030b 	mvn.w	r3, #11
 8002012:	e00f      	b.n	8002034 <CO_SDOclient_init+0x11a>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C,
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	7e7b      	ldrb	r3, [r7, #25]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f80e 	bl	800203c <CO_SDOclient_setup>
 8002020:	4603      	mov	r3, r0
 8002022:	76fb      	strb	r3, [r7, #27]
                                                     COB_IDClientToServer,
                                                     COB_IDServerToClient,
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 8002024:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <CO_SDOclient_init+0x118>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	e000      	b.n	8002034 <CO_SDOclient_init+0x11a>
    }

    return CO_ERROR_NO;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <CO_SDOclient_setup>:
/******************************************************************************/
CO_SDO_return_t CO_SDOclient_setup(CO_SDOclient_t *SDO_C,
                                   uint32_t COB_IDClientToServer,
                                   uint32_t COB_IDServerToClient,
                                   uint8_t nodeIDOfTheSDOServer)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af04      	add	r7, sp, #16
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 8002050:	f06f 0301 	mvn.w	r3, #1
 8002054:	e05f      	b.n	8002116 <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	66da      	str	r2, [r3, #108]	; 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db05      	blt.n	800207c <CO_SDOclient_setup+0x40>
                        (uint16_t)(COB_IDClientToServer & 0x7FF) : 0;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	b29b      	uxth	r3, r3
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8002074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002078:	b29b      	uxth	r3, r3
 800207a:	e000      	b.n	800207e <CO_SDOclient_setup+0x42>
 800207c:	2300      	movs	r3, #0
 800207e:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db05      	blt.n	8002092 <CO_SDOclient_setup+0x56>
                        (uint16_t)(COB_IDServerToClient & 0x7FF) : 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	b29b      	uxth	r3, r3
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 800208a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208e:	b29b      	uxth	r3, r3
 8002090:	e000      	b.n	8002094 <CO_SDOclient_setup+0x58>
 8002092:	2300      	movs	r3, #0
 8002094:	82bb      	strh	r3, [r7, #20]
    if (CanIdC2S != 0 && CanIdS2C != 0) {
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <CO_SDOclient_setup+0x6e>
 800209c:	8abb      	ldrh	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	619a      	str	r2, [r3, #24]
 80020a8:	e006      	b.n	80020b8 <CO_SDOclient_setup+0x7c>
    }
    else {
        CanIdC2S = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8899      	ldrh	r1, [r3, #4]
 80020c0:	8aba      	ldrh	r2, [r7, #20]
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <CO_SDOclient_setup+0xe4>)
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020d2:	f003 fec1 	bl	8005e58 <CO_CANrxBufferInit>
 80020d6:	4603      	mov	r3, r0
 80020d8:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO_C,           /* object passed to receive function */
            CO_SDOclient_receive);  /* this function will process rx msg */

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6898      	ldr	r0, [r3, #8]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8999      	ldrh	r1, [r3, #12]
 80020e2:	8afa      	ldrh	r2, [r7, #22]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2308      	movs	r3, #8
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2300      	movs	r3, #0
 80020ee:	f003 ff11 	bl	8005f14 <CO_CANtxBufferInit>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	611a      	str	r2, [r3, #16]
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */


    if (ret != CO_ERROR_NO || SDO_C->CANtxBuff == NULL) {
 80020f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <CO_SDOclient_setup+0xcc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 800210e:	f06f 0301 	mvn.w	r3, #1
 8002112:	e000      	b.n	8002116 <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	08001ec3 	.word	0x08001ec3

08002124 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <OD_getIndex+0x14>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	e000      	b.n	8002172 <OD_getIndex+0x16>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <OD_extension_init>:
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <OD_extension_init+0x14>
 800218e:	2305      	movs	r3, #5
 8002190:	e003      	b.n	800219a <OD_extension_init+0x1c>
    entry->extension = extension;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <OD_get_u8>:
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80021b6:	7af9      	ldrb	r1, [r7, #11]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fd99 	bl	8001cf8 <OD_get_value>
 80021c6:	4603      	mov	r3, r0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <OD_get_u32>:
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	460b      	mov	r3, r1
 80021de:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80021e0:	7af9      	ldrb	r1, [r7, #11]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2304      	movs	r3, #4
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff fd84 	bl	8001cf8 <OD_get_value>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af02      	add	r7, sp, #8
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	460b      	mov	r3, r1
 8002208:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800220a:	1d3a      	adds	r2, r7, #4
 800220c:	7af9      	ldrb	r1, [r7, #11]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2304      	movs	r3, #4
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fda5 	bl	8001d64 <OD_set_value>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	791b      	ldrb	r3, [r3, #4]
 8002236:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	3305      	adds	r3, #5
 800223c:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d115      	bne.n	8002270 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d103      	bne.n	8002254 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2200      	movs	r2, #0
 8002250:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002252:	e00d      	b.n	8002270 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3340      	adds	r3, #64	; 0x40
 8002260:	7cfa      	ldrb	r2, [r7, #19]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f007 fc59 	bl	8009b1c <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2201      	movs	r2, #1
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af04      	add	r7, sp, #16
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	460b      	mov	r3, r1
 8002288:	80fb      	strh	r3, [r7, #6]
 800228a:	4613      	mov	r3, r2
 800228c:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d106      	bne.n	80022a6 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	429a      	cmp	r2, r3
 80022a0:	d101      	bne.n	80022a6 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e04e      	b.n	8002344 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db02      	blt.n	80022be <CO_SDOserver_init_canRxTx+0x46>
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	e000      	b.n	80022c0 <CO_SDOserver_init_canRxTx+0x48>
 80022be:	2300      	movs	r3, #0
 80022c0:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db02      	blt.n	80022ce <CO_SDOserver_init_canRxTx+0x56>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	e000      	b.n	80022d0 <CO_SDOserver_init_canRxTx+0x58>
 80022ce:	2300      	movs	r3, #0
 80022d0:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 80022d2:	8afb      	ldrh	r3, [r7, #22]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <CO_SDOserver_init_canRxTx+0x6e>
 80022d8:	8abb      	ldrh	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	e006      	b.n	80022f4 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80022f4:	8afa      	ldrh	r2, [r7, #22]
 80022f6:	88f9      	ldrh	r1, [r7, #6]
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <CO_SDOserver_init_canRxTx+0xd4>)
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	2300      	movs	r3, #0
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002308:	68b8      	ldr	r0, [r7, #8]
 800230a:	f003 fda5 	bl	8005e58 <CO_CANrxBufferInit>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	8aba      	ldrh	r2, [r7, #20]
 8002318:	88b9      	ldrh	r1, [r7, #4]
 800231a:	2300      	movs	r3, #0
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2308      	movs	r3, #8
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	f003 fdf6 	bl	8005f14 <CO_CANtxBufferInit>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002336:	23ff      	movs	r3, #255	; 0xff
 8002338:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8002340:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	08002225 	.word	0x08002225

08002350 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b08f      	sub	sp, #60	; 0x3c
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <OD_write_1201_additional+0x20>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <OD_write_1201_additional+0x20>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8002370:	2309      	movs	r3, #9
 8002372:	e0f9      	b.n	8002568 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	7d1b      	ldrb	r3, [r3, #20]
 800237e:	2b03      	cmp	r3, #3
 8002380:	f200 80e8 	bhi.w	8002554 <OD_write_1201_additional+0x204>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <OD_write_1201_additional+0x3c>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023a1 	.word	0x080023a1
 8002394:	08002465 	.word	0x08002465
 8002398:	0800252b 	.word	0x0800252b
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 800239c:	2304      	movs	r3, #4
 800239e:	e0e3      	b.n	8002568 <OD_write_1201_additional+0x218>
            break;

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80023a0:	68b8      	ldr	r0, [r7, #8]
 80023a2:	f7ff fecd 	bl	8002140 <CO_getUint32>
 80023a6:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b0:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023bc:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	0fdb      	lsrs	r3, r3, #31
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4b69      	ldr	r3, [pc, #420]	; (8002570 <OD_write_1201_additional+0x220>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d134      	bne.n	800243c <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <OD_write_1201_additional+0x98>
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <OD_write_1201_additional+0x98>
 80023e0:	8afa      	ldrh	r2, [r7, #22]
 80023e2:	8abb      	ldrh	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d129      	bne.n	800243c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d028      	beq.n	8002440 <OD_write_1201_additional+0xf0>
 80023ee:	8afb      	ldrh	r3, [r7, #22]
 80023f0:	2b7f      	cmp	r3, #127	; 0x7f
 80023f2:	d923      	bls.n	800243c <OD_write_1201_additional+0xec>
 80023f4:	8afb      	ldrh	r3, [r7, #22]
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fa:	d903      	bls.n	8002404 <OD_write_1201_additional+0xb4>
 80023fc:	8afb      	ldrh	r3, [r7, #22]
 80023fe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002402:	d91b      	bls.n	800243c <OD_write_1201_additional+0xec>
 8002404:	8afb      	ldrh	r3, [r7, #22]
 8002406:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800240a:	d903      	bls.n	8002414 <OD_write_1201_additional+0xc4>
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002412:	d313      	bcc.n	800243c <OD_write_1201_additional+0xec>
 8002414:	8afb      	ldrh	r3, [r7, #22]
 8002416:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800241a:	d903      	bls.n	8002424 <OD_write_1201_additional+0xd4>
 800241c:	8afb      	ldrh	r3, [r7, #22]
 800241e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002422:	d30b      	bcc.n	800243c <OD_write_1201_additional+0xec>
 8002424:	8afb      	ldrh	r3, [r7, #22]
 8002426:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800242a:	d303      	bcc.n	8002434 <OD_write_1201_additional+0xe4>
 800242c:	8afb      	ldrh	r3, [r7, #22]
 800242e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002432:	d303      	bcc.n	800243c <OD_write_1201_additional+0xec>
 8002434:	8afb      	ldrh	r3, [r7, #22]
 8002436:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800243a:	d901      	bls.n	8002440 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 800243c:	230f      	movs	r3, #15
 800243e:	e093      	b.n	8002568 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4603      	mov	r3, r0
 800245c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800245e:	f7ff ff0b 	bl	8002278 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8002462:	e07a      	b.n	800255a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f7ff fe6b 	bl	8002140 <CO_getUint32>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	b29b      	uxth	r3, r3
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	b29b      	uxth	r3, r3
 800247c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002480:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	43db      	mvns	r3, r3
 8002486:	0fdb      	lsrs	r3, r3, #31
 8002488:	b2db      	uxtb	r3, r3
 800248a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <OD_write_1201_additional+0x220>)
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d134      	bne.n	8002500 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <OD_write_1201_additional+0x15c>
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <OD_write_1201_additional+0x15c>
 80024a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80024a6:	8c3b      	ldrh	r3, [r7, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d129      	bne.n	8002500 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <OD_write_1201_additional+0x1b4>
 80024b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024b4:	2b7f      	cmp	r3, #127	; 0x7f
 80024b6:	d923      	bls.n	8002500 <OD_write_1201_additional+0x1b0>
 80024b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d903      	bls.n	80024c8 <OD_write_1201_additional+0x178>
 80024c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024c2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80024c6:	d91b      	bls.n	8002500 <OD_write_1201_additional+0x1b0>
 80024c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024ca:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80024ce:	d903      	bls.n	80024d8 <OD_write_1201_additional+0x188>
 80024d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024d6:	d313      	bcc.n	8002500 <OD_write_1201_additional+0x1b0>
 80024d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024de:	d903      	bls.n	80024e8 <OD_write_1201_additional+0x198>
 80024e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024e2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80024e6:	d30b      	bcc.n	8002500 <OD_write_1201_additional+0x1b0>
 80024e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024ea:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80024ee:	d303      	bcc.n	80024f8 <OD_write_1201_additional+0x1a8>
 80024f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f6:	d303      	bcc.n	8002500 <OD_write_1201_additional+0x1b0>
 80024f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024fe:	d901      	bls.n	8002504 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8002500:	230f      	movs	r3, #15
 8002502:	e031      	b.n	8002568 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	9201      	str	r2, [sp, #4]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4623      	mov	r3, r4
 8002520:	4602      	mov	r2, r0
 8002522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002524:	f7ff fea8 	bl	8002278 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8002528:	e017      	b.n	800255a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8002530:	230b      	movs	r3, #11
 8002532:	e019      	b.n	8002568 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8002534:	68b8      	ldr	r0, [r7, #8]
 8002536:	f7ff fdf5 	bl	8002124 <CO_getUint8>
 800253a:	4603      	mov	r3, r0
 800253c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8002540:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <OD_write_1201_additional+0x200>
 8002548:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800254c:	2b00      	cmp	r3, #0
 800254e:	da03      	bge.n	8002558 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8002550:	230f      	movs	r3, #15
 8002552:	e009      	b.n	8002568 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8002554:	230e      	movs	r3, #14
 8002556:	e007      	b.n	8002568 <OD_write_1201_additional+0x218>
            break;
 8002558:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff f9df 	bl	8001924 <OD_writeOriginal>
 8002566:	4603      	mov	r3, r0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3734      	adds	r7, #52	; 0x34
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	3ffff800 	.word	0x3ffff800

08002574 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <CO_SDOserver_init+0x26>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <CO_SDOserver_init+0x26>
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <CO_SDOserver_init+0x26>
 8002594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e0f5      	b.n	800278c <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80025ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80025ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d117      	bne.n	80025f6 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) { return CO_ERROR_ILLEGAL_ARGUMENT; }
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <CO_SDOserver_init+0x60>
 80025cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da02      	bge.n	80025da <CO_SDOserver_init+0x66>
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	e0d8      	b.n	800278c <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80025e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80025ec:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	611a      	str	r2, [r3, #16]
 80025f4:	e0a4      	b.n	8002740 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fdb0 	bl	800215c <OD_getIndex>
 80025fc:	4603      	mov	r3, r0
 80025fe:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8002600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002602:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002606:	d123      	bne.n	8002650 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) {
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <CO_SDOserver_init+0xa2>
 800260e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	da02      	bge.n	800261c <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e0b7      	b.n	800278c <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002624:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800262e:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8002636:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002638:	2301      	movs	r3, #1
 800263a:	2101      	movs	r1, #1
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fddc 	bl	80021fa <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8002642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002644:	2301      	movs	r3, #1
 8002646:	2102      	movs	r1, #2
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fdd6 	bl	80021fa <OD_set_u32>
 800264e:	e077      	b.n	8002740 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8002650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002652:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002656:	d96f      	bls.n	8002738 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8002658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800265a:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800265e:	d26b      	bcs.n	8002738 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8002660:	f107 021d 	add.w	r2, r7, #29
 8002664:	2301      	movs	r3, #1
 8002666:	2100      	movs	r1, #0
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fd9c 	bl	80021a6 <OD_get_u8>
 800266e:	4603      	mov	r3, r0
 8002670:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8002674:	f107 0218 	add.w	r2, r7, #24
 8002678:	2301      	movs	r3, #1
 800267a:	2101      	movs	r1, #1
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fda7 	bl	80021d0 <OD_get_u32>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8002688:	f107 0214 	add.w	r2, r7, #20
 800268c:	2301      	movs	r3, #1
 800268e:	2102      	movs	r1, #2
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fd9d 	bl	80021d0 <OD_get_u32>
 8002696:	4603      	mov	r3, r0
 8002698:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800269a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <CO_SDOserver_init+0x14a>
 80026a2:	7f7b      	ldrb	r3, [r7, #29]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d002      	beq.n	80026ae <CO_SDOserver_init+0x13a>
 80026a8:	7f7b      	ldrb	r3, [r7, #29]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 80026ae:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <CO_SDOserver_init+0x14a>
 80026b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) { *errInfo = OD_SDOsrvParIdx; }
 80026be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <CO_SDOserver_init+0x156>
 80026c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80026c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c8:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80026ca:	f06f 030b 	mvn.w	r3, #11
 80026ce:	e05d      	b.n	800278c <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db05      	blt.n	80026e2 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80026da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026de:	b29b      	uxth	r3, r3
 80026e0:	e000      	b.n	80026e4 <CO_SDOserver_init+0x170>
 80026e2:	2300      	movs	r3, #0
 80026e4:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db05      	blt.n	80026f8 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80026f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	e000      	b.n	80026fa <CO_SDOserver_init+0x186>
 80026f8:	2300      	movs	r3, #0
 80026fa:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a23      	ldr	r2, [pc, #140]	; (8002794 <CO_SDOserver_init+0x220>)
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <CO_SDOserver_init+0x224>)
 800270c:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3358      	adds	r3, #88	; 0x58
 8002712:	4619      	mov	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fd32 	bl	800217e <OD_extension_init>
 800271a:	4603      	mov	r3, r0
 800271c:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 800271e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) { *errInfo = OD_SDOsrvParIdx; }
 8002726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <CO_SDOserver_init+0x1be>
 800272c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8002732:	f06f 030b 	mvn.w	r3, #11
 8002736:	e029      	b.n	800278c <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	e026      	b.n	800278c <CO_SDOserver_init+0x218>
        ) {
 800273e:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274a:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002750:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800275a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800276e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8002770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002774:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8002778:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800277a:	9201      	str	r2, [sp, #4]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fd77 	bl	8002278 <CO_SDOserver_init_canRxTx>
 800278a:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08001875 	.word	0x08001875
 8002798:	08002351 	.word	0x08002351

0800279c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	460b      	mov	r3, r1
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07b      	beq.n	80028ba <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <validateAndWriteToOD+0x5a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d00f      	beq.n	80027f6 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80027de:	429a      	cmp	r2, r3
 80027e0:	d901      	bls.n	80027e6 <validateAndWriteToOD+0x4a>
 80027e2:	4a70      	ldr	r2, [pc, #448]	; (80029a4 <validateAndWriteToOD+0x208>)
 80027e4:	e000      	b.n	80027e8 <validateAndWriteToOD+0x4c>
 80027e6:	4a70      	ldr	r2, [pc, #448]	; (80029a8 <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	751a      	strb	r2, [r3, #20]
            return false;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e0d2      	b.n	800299c <validateAndWriteToOD+0x200>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002802:	b25b      	sxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	da3c      	bge.n	8002882 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <validateAndWriteToOD+0x7c>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	6a3a      	ldr	r2, [r7, #32]
 8002814:	429a      	cmp	r2, r3
 8002816:	d934      	bls.n	8002882 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800281e:	3302      	adds	r3, #2
 8002820:	2b20      	cmp	r3, #32
 8002822:	d82e      	bhi.n	8002882 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->sizeTran++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	66da      	str	r2, [r3, #108]	; 0x6c
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <validateAndWriteToOD+0xba>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->sizeTran++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	621a      	str	r2, [r3, #32]
 8002880:	e02d      	b.n	80028de <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	621a      	str	r2, [r3, #32]
 8002890:	e025      	b.n	80028de <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d020      	beq.n	80028de <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d201      	bcs.n	80028aa <validateAndWriteToOD+0x10e>
 80028a6:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <validateAndWriteToOD+0x208>)
 80028a8:	e000      	b.n	80028ac <validateAndWriteToOD+0x110>
 80028aa:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	751a      	strb	r2, [r3, #20]
            return false;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e070      	b.n	800299c <validateAndWriteToOD+0x200>
        }
        else { /* MISRA C 2004 14.10 */ }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <validateAndWriteToOD+0x142>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d907      	bls.n	80028de <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <validateAndWriteToOD+0x208>)
 80028d2:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	751a      	strb	r2, [r3, #20]
            return false;
 80028da:	2300      	movs	r3, #0
 80028dc:	e05e      	b.n	800299c <validateAndWriteToOD+0x200>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8210 	mrs	r2, PRIMASK
 80028ea:	617a      	str	r2, [r7, #20]
  return(result);
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f103 0018 	add.w	r0, r3, #24
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	47a0      	blx	r4
 8002910:	4603      	mov	r3, r0
 8002912:	77fb      	strb	r3, [r7, #31]
                                   SDO->bufOffsetWr, &countWritten);
    CO_UNLOCK_OD(SDO->CANdevTx);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 800292c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d011      	beq.n	8002958 <validateAndWriteToOD+0x1bc>
 8002934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d00c      	beq.n	8002958 <validateAndWriteToOD+0x1bc>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800293e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f9ba 	bl	8001cbc <OD_getSDOabCode>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	751a      	strb	r2, [r3, #20]
        return false;
 8002954:	2300      	movs	r3, #0
 8002956:	e021      	b.n	800299c <validateAndWriteToOD+0x200>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <validateAndWriteToOD+0x1de>
 8002960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d107      	bne.n	800297a <validateAndWriteToOD+0x1de>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <validateAndWriteToOD+0x20c>)
 800296e:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	751a      	strb	r2, [r3, #20]
        return false;
 8002976:	2300      	movs	r3, #0
 8002978:	e010      	b.n	800299c <validateAndWriteToOD+0x200>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <validateAndWriteToOD+0x1fe>
 8002982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <validateAndWriteToOD+0x1fe>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <validateAndWriteToOD+0x208>)
 800298e:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	751a      	strb	r2, [r3, #20]
        return false;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <validateAndWriteToOD+0x200>
    }
    else { /* MISRA C 2004 14.10 */ }

    return true;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	372c      	adds	r7, #44	; 0x2c
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	06070012 	.word	0x06070012
 80029a8:	06070013 	.word	0x06070013

080029ac <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08d      	sub	sp, #52	; 0x34
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && countRemain < countMinimum) {
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 80a5 	bne.w	8002b1e <readFromOd+0x172>
 80029d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f080 80a0 	bcs.w	8002b1e <readFromOd+0x172>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029f0:	4413      	add	r3, r2
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	f007 f89f 	bl	8009b38 <memmove>
        SDO->bufOffsetRd = 0;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	f1c3 0320 	rsb	r3, r3, #32
 8002a10:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	4413      	add	r3, r2
 8002a20:	61fb      	str	r3, [r7, #28]

        CO_LOCK_OD(SDO->CANdevTx);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a26:	f3ef 8210 	mrs	r2, PRIMASK
 8002a2a:	617a      	str	r2, [r7, #20]
  return(result);
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8002a30:	b672      	cpsid	i
}
 8002a32:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f103 0018 	add.w	r0, r3, #24
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	69f9      	ldr	r1, [r7, #28]
 8002a46:	47a0      	blx	r4
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                      countRdRequest, &countRd);
        CO_UNLOCK_OD(SDO->CANdevTx);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f383 8810 	msr	PRIMASK, r3
}
 8002a5c:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8002a5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d011      	beq.n	8002a8a <readFromOd+0xde>
 8002a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d00c      	beq.n	8002a8a <readFromOd+0xde>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8002a70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f921 	bl	8001cbc <OD_getSDOabCode>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	751a      	strb	r2, [r3, #20]
            return false;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e04a      	b.n	8002b20 <readFromOd+0x174>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d022      	beq.n	8002ad6 <readFromOd+0x12a>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da1c      	bge.n	8002ad6 <readFromOd+0x12a>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8002aa6:	69f8      	ldr	r0, [r7, #28]
 8002aa8:	f7fd fb92 	bl	80001d0 <strlen>
 8002aac:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0) { countStr = 1; }/* zero length is not allowed */
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <readFromOd+0x10c>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
            if (countStr < countRd) {
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d20a      	bcs.n	8002ad6 <readFromOd+0x12a>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	441a      	add	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <readFromOd+0x14a>
 8002aec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d110      	bne.n	8002b18 <readFromOd+0x16c>
            SDO->finished = false;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d90a      	bls.n	8002b1e <readFromOd+0x172>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <readFromOd+0x17c>)
 8002b0c:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	751a      	strb	r2, [r3, #20]
                return false;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e003      	b.n	8002b20 <readFromOd+0x174>
            }
        }
        else {
            SDO->finished = true;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	675a      	str	r2, [r3, #116]	; 0x74
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3734      	adds	r7, #52	; 0x34
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	06040047 	.word	0x06040047

08002b2c <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b09b      	sub	sp, #108	; 0x6c
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8002b40:	f06f 0301 	mvn.w	r3, #1
 8002b44:	f000 bccc 	b.w	80034e0 <CO_SDOserver_process+0x9b4>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <CO_SDOserver_process+0x56>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	7d1b      	ldrb	r3, [r3, #20]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <CO_SDOserver_process+0x56>
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b80:	e2c7      	b.n	8003112 <CO_SDOserver_process+0x5e6>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <CO_SDOserver_process+0x64>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ba2:	e2b6      	b.n	8003112 <CO_SDOserver_process+0x5e6>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 82b3 	beq.w	8003112 <CO_SDOserver_process+0x5e6>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7d1b      	ldrb	r3, [r3, #20]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 80ce 	bne.w	8002d54 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d103      	bne.n	8002bd2 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2211      	movs	r2, #17
 8002bce:	751a      	strb	r2, [r3, #20]
 8002bd0:	e00f      	b.n	8002bf2 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d105      	bne.n	8002be8 <CO_SDOserver_process+0xbc>
                upload = true;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2221      	movs	r2, #33	; 0x21
 8002be4:	751a      	strb	r2, [r3, #20]
 8002be6:	e004      	b.n	8002bf2 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8002be8:	4ba5      	ldr	r3, [pc, #660]	; (8002e80 <CO_SDOserver_process+0x354>)
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d162      	bne.n	8002cbe <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bfe:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c08:	b21b      	sxth	r3, r3
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7fe fef4 	bl	8001a18 <OD_find>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f103 0218 	add.w	r2, r3, #24
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f7fe ff47 	bl	8001ad0 <OD_getSub>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8002c48:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8002c50:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f831 	bl	8001cbc <OD_getSDOabCode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	751a      	strb	r2, [r3, #20]
 8002c64:	e02b      	b.n	8002cbe <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8002c74:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <CO_SDOserver_process+0x358>)
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	751a      	strb	r2, [r3, #20]
 8002c7e:	e01e      	b.n	8002cbe <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8002c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8002c94:	4b7c      	ldr	r3, [pc, #496]	; (8002e88 <CO_SDOserver_process+0x35c>)
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	751a      	strb	r2, [r3, #20]
 8002c9e:	e00e      	b.n	8002cbe <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8002ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10b      	bne.n	8002cbe <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8002cb4:	4b75      	ldr	r3, [pc, #468]	; (8002e8c <CO_SDOserver_process+0x360>)
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8002cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d047      	beq.n	8002d54 <CO_SDOserver_process+0x228>
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d144      	bne.n	8002d54 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran = 0;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8002cea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff fe5a 	bl	80029ac <readFromOd>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d02a      	beq.n	8002d54 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01a      	beq.n	8002d3c <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0) {
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	669a      	str	r2, [r3, #104]	; 0x68
 8002d20:	e018      	b.n	8002d54 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d011      	beq.n	8002d54 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8002d30:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <CO_SDOserver_process+0x364>)
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	751a      	strb	r2, [r3, #20]
 8002d3a:	e00b      	b.n	8002d54 <CO_SDOserver_process+0x228>
                        }
                        else { /* MISRA C 2004 14.10 */ }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d42:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db02      	blt.n	8002d4e <CO_SDOserver_process+0x222>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	e000      	b.n	8002d50 <CO_SDOserver_process+0x224>
 8002d4e:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) {
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	7d1b      	ldrb	r3, [r3, #20]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 81c5 	beq.w	80030ea <CO_SDOserver_process+0x5be>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	7d1b      	ldrb	r3, [r3, #20]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	f000 81bf 	beq.w	80030ea <CO_SDOserver_process+0x5be>
        switch (SDO->state) {
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	7d1b      	ldrb	r3, [r3, #20]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3b11      	subs	r3, #17
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	f200 81b2 	bhi.w	80030de <CO_SDOserver_process+0x5b2>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <CO_SDOserver_process+0x254>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dcd 	.word	0x08002dcd
 8002d84:	080030df 	.word	0x080030df
 8002d88:	08002f97 	.word	0x08002f97
 8002d8c:	080030df 	.word	0x080030df
 8002d90:	080030df 	.word	0x080030df
 8002d94:	080030df 	.word	0x080030df
 8002d98:	080030df 	.word	0x080030df
 8002d9c:	080030df 	.word	0x080030df
 8002da0:	080030df 	.word	0x080030df
 8002da4:	080030df 	.word	0x080030df
 8002da8:	080030df 	.word	0x080030df
 8002dac:	080030df 	.word	0x080030df
 8002db0:	080030df 	.word	0x080030df
 8002db4:	080030df 	.word	0x080030df
 8002db8:	080030df 	.word	0x080030df
 8002dbc:	080030df 	.word	0x080030df
 8002dc0:	0800308d 	.word	0x0800308d
 8002dc4:	080030df 	.word	0x080030df
 8002dc8:	08003095 	.word	0x08003095
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a3 	beq.w	8002f22 <CO_SDOserver_process+0x3f6>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8002de2:	2304      	movs	r3, #4
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e08:	e007      	b.n	8002e1a <CO_SDOserver_process+0x2ee>
                }
                else if (sizeInOd > 0 && sizeInOd < 4) {
 8002e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <CO_SDOserver_process+0x2ee>
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d801      	bhi.n	8002e1a <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 8002e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e18:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
                else { /* MISRA C 2004 14.10 */ }

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	2300      	movs	r3, #0
 8002e20:	853b      	strh	r3, [r7, #40]	; 0x28
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f006 fe74 	bl	8009b1c <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da17      	bge.n	8002e70 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8002e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <CO_SDOserver_process+0x322>
 8002e46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d210      	bcs.n	8002e70 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8002e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8002e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <CO_SDOserver_process+0x334>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <CO_SDOserver_process+0x336>
 8002e60:	2302      	movs	r3, #2
 8002e62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e64:	4413      	add	r3, r2
 8002e66:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e6c:	621a      	str	r2, [r3, #32]
                ) {
 8002e6e:	e021      	b.n	8002eb4 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8002e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10e      	bne.n	8002e94 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e7a:	621a      	str	r2, [r3, #32]
 8002e7c:	e01a      	b.n	8002eb4 <CO_SDOserver_process+0x388>
 8002e7e:	bf00      	nop
 8002e80:	05040001 	.word	0x05040001
 8002e84:	06010000 	.word	0x06010000
 8002e88:	06010001 	.word	0x06010001
 8002e8c:	06010002 	.word	0x06010002
 8002e90:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8002e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d00b      	beq.n	8002eb4 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d901      	bls.n	8002ea8 <CO_SDOserver_process+0x37c>
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <CO_SDOserver_process+0x5c4>)
 8002ea6:	e000      	b.n	8002eaa <CO_SDOserver_process+0x37e>
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <CO_SDOserver_process+0x5c8>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	751a      	strb	r2, [r3, #20]
                    break;
 8002eb2:	e126      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                }
                else { /* MISRA C 2004 14.10 */ }

                /* Copy data */
                OD_size_t countWritten = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	623b      	str	r3, [r7, #32]

                CO_LOCK_OD(SDO->CANdevTx);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebc:	f3ef 8210 	mrs	r2, PRIMASK
 8002ec0:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8002ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec6:	b672      	cpsid	i
}
 8002ec8:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f103 0018 	add.w	r0, r3, #24
 8002ed4:	f107 0320 	add.w	r3, r7, #32
 8002ed8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ede:	47a0      	blx	r4
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                               dataSizeToWrite, &countWritten);
                CO_UNLOCK_OD(SDO->CANdevTx);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	bf00      	nop

                if (odRet != ODR_OK) {
 8002ef6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <CO_SDOserver_process+0x3e8>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8002efe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe feda 	bl	8001cbc <OD_getSDOabCode>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	751a      	strb	r2, [r3, #20]
                    break;
 8002f12:	e0f6      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2212      	movs	r2, #18
 8002f18:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	675a      	str	r2, [r3, #116]	; 0x74
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8002f20:	e0ef      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                if (SDO->CANrxData[0] & 0x01) {
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d028      	beq.n	8002f82 <CO_SDOserver_process+0x456>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3344      	adds	r3, #68	; 0x44
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61fb      	str	r3, [r7, #28]
                    SDO->sizeInd = CO_SWAP_32(size);
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	669a      	str	r2, [r3, #104]	; 0x68
                    if (sizeInOd > 0) {
 8002f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01e      	beq.n	8002f88 <CO_SDOserver_process+0x45c>
                        if (SDO->sizeInd > sizeInOd) {
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d205      	bcs.n	8002f60 <CO_SDOserver_process+0x434>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8002f54:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <CO_SDOserver_process+0x5c4>)
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	751a      	strb	r2, [r3, #20]
                            break;
 8002f5e:	e0d0      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                        else if (SDO->sizeInd < sizeInOd
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d90e      	bls.n	8002f88 <CO_SDOserver_process+0x45c>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db08      	blt.n	8002f88 <CO_SDOserver_process+0x45c>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8002f76:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <CO_SDOserver_process+0x5c8>)
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	751a      	strb	r2, [r3, #20]
                            break;
 8002f80:	e0bf      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                    SDO->sizeInd = 0;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2212      	movs	r2, #18
 8002f8c:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	675a      	str	r2, [r3, #116]	; 0x74
            break;
 8002f94:	e0b5      	b.n	8003102 <CO_SDOserver_process+0x5d6>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d16d      	bne.n	8003080 <CO_SDOserver_process+0x554>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	675a      	str	r2, [r3, #116]	; 0x74

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                if (toggle != SDO->toggle) {
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fd2:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d005      	beq.n	8002fe6 <CO_SDOserver_process+0x4ba>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <CO_SDOserver_process+0x5cc>)
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	751a      	strb	r2, [r3, #20]
                    break;
 8002fe4:	e08d      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003004:	18d0      	adds	r0, r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3341      	adds	r3, #65	; 0x41
 800300a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300c:	4619      	mov	r1, r3
 800300e:	f006 fd85 	bl	8009b1c <memcpy>
                SDO->bufOffsetWr += count;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301a:	441a      	add	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran += count;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	441a      	add	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <CO_SDOserver_process+0x522>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	429a      	cmp	r2, r3
 8003040:	d905      	bls.n	800304e <CO_SDOserver_process+0x522>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <CO_SDOserver_process+0x5c4>)
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	751a      	strb	r2, [r3, #20]
                    break;
 800304c:	e059      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <CO_SDOserver_process+0x538>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800305c:	f1c3 0320 	rsb	r3, r3, #32
 8003060:	2b08      	cmp	r3, #8
 8003062:	d809      	bhi.n	8003078 <CO_SDOserver_process+0x54c>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8003064:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003068:	2300      	movs	r3, #0
 800306a:	2200      	movs	r2, #0
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fb95 	bl	800279c <validateAndWriteToOD>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d043      	beq.n	8003100 <CO_SDOserver_process+0x5d4>
                        break;
                    }
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2214      	movs	r2, #20
 800307c:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 800307e:	e040      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                abortCode = CO_SDO_AB_CMD;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <CO_SDOserver_process+0x5d0>)
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	751a      	strb	r2, [r3, #20]
            break;
 800308a:	e03a      	b.n	8003102 <CO_SDOserver_process+0x5d6>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2222      	movs	r2, #34	; 0x22
 8003090:	751a      	strb	r2, [r3, #20]
            break;
 8003092:	e036      	b.n	8003102 <CO_SDOserver_process+0x5d6>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800309e:	2b60      	cmp	r3, #96	; 0x60
 80030a0:	d117      	bne.n	80030d2 <CO_SDOserver_process+0x5a6>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                if (toggle != SDO->toggle) {
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030b6:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d005      	beq.n	80030ca <CO_SDOserver_process+0x59e>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <CO_SDOserver_process+0x5cc>)
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	751a      	strb	r2, [r3, #20]
                    break;
 80030c8:	e01b      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2224      	movs	r2, #36	; 0x24
 80030ce:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80030d0:	e017      	b.n	8003102 <CO_SDOserver_process+0x5d6>
                abortCode = CO_SDO_AB_CMD;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <CO_SDOserver_process+0x5d0>)
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	751a      	strb	r2, [r3, #20]
            break;
 80030dc:	e011      	b.n	8003102 <CO_SDOserver_process+0x5d6>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 80030de:	4b07      	ldr	r3, [pc, #28]	; (80030fc <CO_SDOserver_process+0x5d0>)
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	751a      	strb	r2, [r3, #20]
            break;
 80030e8:	e00b      	b.n	8003102 <CO_SDOserver_process+0x5d6>
        }
        } /* switch (SDO->state) */
        } /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
 80030ea:	bf00      	nop
 80030ec:	e009      	b.n	8003102 <CO_SDOserver_process+0x5d6>
 80030ee:	bf00      	nop
 80030f0:	06070012 	.word	0x06070012
 80030f4:	06070013 	.word	0x06070013
 80030f8:	05030000 	.word	0x05030000
 80030fc:	05040001 	.word	0x05040001
                        break;
 8003100:	bf00      	nop
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c
    } /* else if (isNew) */
    else { /* MISRA C 2004 14.10 */ }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8003112:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003116:	2b01      	cmp	r3, #1
 8003118:	d11e      	bne.n	8003158 <CO_SDOserver_process+0x62c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003122:	429a      	cmp	r2, r3
 8003124:	d205      	bcs.n	8003132 <CO_SDOserver_process+0x606>
            SDO->timeoutTimer += timeDifference_us;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	441a      	add	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800313a:	429a      	cmp	r2, r3
 800313c:	d304      	bcc.n	8003148 <CO_SDOserver_process+0x61c>
            abortCode = CO_SDO_AB_TIMEOUT;
 800313e:	4ba8      	ldr	r3, [pc, #672]	; (80033e0 <CO_SDOserver_process+0x8b4>)
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <CO_SDOserver_process+0x62c>
            ret = CO_SDO_RT_transmittBufferFull;
 8003152:	2304      	movs	r3, #4
 8003154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003158:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 8188 	bne.w	8003472 <CO_SDOserver_process+0x946>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	3305      	adds	r3, #5
 8003168:	2208      	movs	r2, #8
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f006 fcfd 	bl	8009b6c <memset>

        switch (SDO->state) {
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	7d1b      	ldrb	r3, [r3, #20]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3b12      	subs	r3, #18
 800317a:	2b12      	cmp	r3, #18
 800317c:	f200 817b 	bhi.w	8003476 <CO_SDOserver_process+0x94a>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <CO_SDOserver_process+0x65c>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031d5 	.word	0x080031d5
 800318c:	08003477 	.word	0x08003477
 8003190:	08003247 	.word	0x08003247
 8003194:	08003477 	.word	0x08003477
 8003198:	08003477 	.word	0x08003477
 800319c:	08003477 	.word	0x08003477
 80031a0:	08003477 	.word	0x08003477
 80031a4:	08003477 	.word	0x08003477
 80031a8:	08003477 	.word	0x08003477
 80031ac:	08003477 	.word	0x08003477
 80031b0:	08003477 	.word	0x08003477
 80031b4:	08003477 	.word	0x08003477
 80031b8:	08003477 	.word	0x08003477
 80031bc:	08003477 	.word	0x08003477
 80031c0:	08003477 	.word	0x08003477
 80031c4:	08003477 	.word	0x08003477
 80031c8:	08003293 	.word	0x08003293
 80031cc:	08003477 	.word	0x08003477
 80031d0:	08003351 	.word	0x08003351
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2260      	movs	r2, #96	; 0x60
 80031da:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003202:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
            //CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	2b00      	cmp	r3, #0
 8003210:	d006      	beq.n	8003220 <CO_SDOserver_process+0x6f4>
                SDO->state = CO_SDO_ST_IDLE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 800321e:	e12f      	b.n	8003480 <CO_SDOserver_process+0x954>
                SDO->toggle = 0x00;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->sizeTran = 0;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->bufOffsetWr = 0;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->bufOffsetRd = 0;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2213      	movs	r2, #19
 8003242:	751a      	strb	r2, [r3, #20]
            break;
 8003244:	e11c      	b.n	8003480 <CO_SDOserver_process+0x954>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f042 0220 	orr.w	r2, r2, #32
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <CO_SDOserver_process+0x73a>
 8003262:	2210      	movs	r2, #16
 8003264:	e000      	b.n	8003268 <CO_SDOserver_process+0x73c>
 8003266:	2200      	movs	r2, #0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	67da      	str	r2, [r3, #124]	; 0x7c
            //CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
            if (SDO->finished) {
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <CO_SDOserver_process+0x75e>
                SDO->state = CO_SDO_ST_IDLE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8003288:	e0fa      	b.n	8003480 <CO_SDOserver_process+0x954>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2213      	movs	r2, #19
 800328e:	751a      	strb	r2, [r3, #20]
            break;
 8003290:	e0f6      	b.n	8003480 <CO_SDOserver_process+0x954>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003296:	2b00      	cmp	r3, #0
 8003298:	d024      	beq.n	80032e4 <CO_SDOserver_process+0x7b8>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d820      	bhi.n	80032e4 <CO_SDOserver_process+0x7b8>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f1c3 0304 	rsb	r3, r3, #4
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f103 0009 	add.w	r0, r3, #9
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	461a      	mov	r2, r3
 80032d2:	f006 fc23 	bl	8009b1c <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032e2:	e020      	b.n	8003326 <CO_SDOserver_process+0x7fa>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <CO_SDOserver_process+0x7de>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f0:	63bb      	str	r3, [r7, #56]	; 0x38
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	61bb      	str	r3, [r7, #24]
                    SDO->CANtxBuff->data[0] = 0x41;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2241      	movs	r2, #65	; 0x41
 80032fc:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	3309      	adds	r3, #9
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e003      	b.n	8003312 <CO_SDOserver_process+0x7e6>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2240      	movs	r2, #64	; 0x40
 8003310:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->timeoutTimer = 0;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	67da      	str	r2, [r3, #124]	; 0x7c
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2223      	movs	r2, #35	; 0x23
 8003324:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800334c:	721a      	strb	r2, [r3, #8]
            //CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
            break;
 800334e:	e097      	b.n	8003480 <CO_SDOserver_process+0x954>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false)) {
 8003350:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003354:	2300      	movs	r3, #0
 8003356:	2207      	movs	r2, #7
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fb27 	bl	80029ac <readFromOd>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 808a 	beq.w	800347a <CO_SDOserver_process+0x94e>
                break;
            }

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8003370:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <CO_SDOserver_process+0x854>
 800337c:	2210      	movs	r2, #16
 800337e:	e000      	b.n	8003382 <CO_SDOserver_process+0x856>
 8003380:	2200      	movs	r2, #0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	2b06      	cmp	r3, #6
 800339c:	d906      	bls.n	80033ac <CO_SDOserver_process+0x880>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01e      	beq.n	80033e4 <CO_SDOserver_process+0x8b8>
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d11b      	bne.n	80033e4 <CO_SDOserver_process+0x8b8>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	795a      	ldrb	r2, [r3, #5]
 80033b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033dc:	e00a      	b.n	80033f4 <CO_SDOserver_process+0x8c8>
 80033de:	bf00      	nop
 80033e0:	05040000 	.word	0x05040000
            }
            else {
                SDO->timeoutTimer = 0;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2223      	movs	r2, #35	; 0x23
 80033ee:	751a      	strb	r2, [r3, #20]
                count = 7;
 80033f0:	2307      	movs	r3, #7
 80033f2:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	1d98      	adds	r0, r3, #6
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003406:	4413      	add	r3, r2
 8003408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800340a:	4619      	mov	r1, r3
 800340c:	f006 fb86 	bl	8009b1c <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	441a      	add	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            SDO->sizeTran += count;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003426:	441a      	add	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	66da      	str	r2, [r3, #108]	; 0x6c

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	2b00      	cmp	r3, #0
 8003432:	d024      	beq.n	800347e <CO_SDOserver_process+0x952>
                if (SDO->sizeTran > SDO->sizeInd) {
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343c:	429a      	cmp	r2, r3
 800343e:	d905      	bls.n	800344c <CO_SDOserver_process+0x920>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <CO_SDOserver_process+0x9bc>)
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	751a      	strb	r2, [r3, #20]
                    break;
 800344a:	e019      	b.n	8003480 <CO_SDOserver_process+0x954>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 800344c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003450:	2b00      	cmp	r3, #0
 8003452:	d114      	bne.n	800347e <CO_SDOserver_process+0x952>
                         && SDO->sizeTran < SDO->sizeInd
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345c:	429a      	cmp	r2, r3
 800345e:	d20e      	bcs.n	800347e <CO_SDOserver_process+0x952>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8003460:	4b22      	ldr	r3, [pc, #136]	; (80034ec <CO_SDOserver_process+0x9c0>)
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ret = CO_SDO_RT_waitingResponse;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	751a      	strb	r2, [r3, #20]
                    break;
 8003470:	e006      	b.n	8003480 <CO_SDOserver_process+0x954>

        default: {
            break;
        }
        } /* switch (SDO->state) */
    }
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <CO_SDOserver_process+0x954>
            break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <CO_SDOserver_process+0x954>
                break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <CO_SDOserver_process+0x954>
            break;
 800347e:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8003480:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003484:	2b01      	cmp	r3, #1
 8003486:	d129      	bne.n	80034dc <CO_SDOserver_process+0x9b0>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	7d1b      	ldrb	r3, [r3, #20]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d124      	bne.n	80034dc <CO_SDOserver_process+0x9b0>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80034c4:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	3309      	adds	r3, #9
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]
            //CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
            SDO->state = CO_SDO_ST_IDLE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 80034d6:	23f6      	movs	r3, #246	; 0xf6
 80034d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80034dc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	376c      	adds	r7, #108	; 0x6c
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd90      	pop	{r4, r7, pc}
 80034e8:	06070012 	.word	0x06070012
 80034ec:	06070013 	.word	0x06070013

080034f0 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <OD_getIndex+0x14>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	e000      	b.n	800353e <OD_getIndex+0x16>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <OD_extension_init>:
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <OD_extension_init+0x14>
 800355a:	2305      	movs	r3, #5
 800355c:	e003      	b.n	8003566 <OD_extension_init+0x1c>
    entry->extension = extension;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <OD_get_u8>:
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af02      	add	r7, sp, #8
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	460b      	mov	r3, r1
 8003580:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003582:	7af9      	ldrb	r1, [r7, #11]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7fe fbb3 	bl	8001cf8 <OD_get_value>
 8003592:	4603      	mov	r3, r0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <OD_get_u32>:
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	460b      	mov	r3, r1
 80035aa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80035ac:	7af9      	ldrb	r1, [r7, #11]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2304      	movs	r3, #4
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7fe fb9e 	bl	8001cf8 <OD_get_value>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) { SYNC->counter = 1; }
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7c9b      	ldrb	r3, [r3, #18]
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	749a      	strb	r2, [r3, #18]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	7c9a      	ldrb	r2, [r3, #18]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7c5b      	ldrb	r3, [r3, #17]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d902      	bls.n	80035ec <CO_SYNCsend+0x26>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	7c92      	ldrb	r2, [r2, #18]
 800360e:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f002 fcce 	bl	8005fbc <CO_CANsend>
 8003620:	4603      	mov	r3, r0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	791b      	ldrb	r3, [r3, #4]
 800363c:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	7c5b      	ldrb	r3, [r3, #17]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e019      	b.n	800368a <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800365c:	b2da      	uxtb	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	721a      	strb	r2, [r3, #8]
 8003662:	e012      	b.n	800368a <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d109      	bne.n	800367e <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	3305      	adds	r3, #5
 800366e:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e005      	b.n	800368a <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003684:	b2da      	uxtb	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2201      	movs	r2, #1
 80036a8:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b08f      	sub	sp, #60	; 0x3c
 80036bc:	af04      	add	r7, sp, #16
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <OD_write_1005+0x2e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	7d1b      	ldrb	r3, [r3, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <OD_write_1005+0x2e>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d102      	bne.n	80036e6 <OD_write_1005+0x2e>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80036e6:	2309      	movs	r3, #9
 80036e8:	e0a3      	b.n	8003832 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 80036f0:	68b8      	ldr	r0, [r7, #8]
 80036f2:	f7ff ff0b 	bl	800350c <CO_getUint32>
 80036f6:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003700:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <OD_write_1005+0x184>)
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d133      	bne.n	8003786 <OD_write_1005+0xce>
 800371e:	8bfb      	ldrh	r3, [r7, #30]
 8003720:	2b7f      	cmp	r3, #127	; 0x7f
 8003722:	d930      	bls.n	8003786 <OD_write_1005+0xce>
 8003724:	8bfb      	ldrh	r3, [r7, #30]
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d903      	bls.n	8003734 <OD_write_1005+0x7c>
 800372c:	8bfb      	ldrh	r3, [r7, #30]
 800372e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003732:	d928      	bls.n	8003786 <OD_write_1005+0xce>
 8003734:	8bfb      	ldrh	r3, [r7, #30]
 8003736:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800373a:	d903      	bls.n	8003744 <OD_write_1005+0x8c>
 800373c:	8bfb      	ldrh	r3, [r7, #30]
 800373e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003742:	d320      	bcc.n	8003786 <OD_write_1005+0xce>
 8003744:	8bfb      	ldrh	r3, [r7, #30]
 8003746:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800374a:	d903      	bls.n	8003754 <OD_write_1005+0x9c>
 800374c:	8bfb      	ldrh	r3, [r7, #30]
 800374e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003752:	d318      	bcc.n	8003786 <OD_write_1005+0xce>
 8003754:	8bfb      	ldrh	r3, [r7, #30]
 8003756:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800375a:	d303      	bcc.n	8003764 <OD_write_1005+0xac>
 800375c:	8bfb      	ldrh	r3, [r7, #30]
 800375e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003762:	d310      	bcc.n	8003786 <OD_write_1005+0xce>
 8003764:	8bfb      	ldrh	r3, [r7, #30]
 8003766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376a:	d80c      	bhi.n	8003786 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <OD_write_1005+0xd2>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <OD_write_1005+0xd2>
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003780:	8bfa      	ldrh	r2, [r7, #30]
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8003786:	230f      	movs	r3, #15
 8003788:	e053      	b.n	8003832 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003790:	8bfa      	ldrh	r2, [r7, #30]
 8003792:	429a      	cmp	r2, r3
 8003794:	d03a      	beq.n	800380c <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800379e:	8bfa      	ldrh	r2, [r7, #30]
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <OD_write_1005+0x188>)
 80037a2:	9302      	str	r3, [sp, #8]
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80037b0:	f002 fb52 	bl	8005e58 <CO_CANrxBufferInit>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 80037b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 80037c0:	2309      	movs	r3, #9
 80037c2:	e036      	b.n	8003832 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461c      	mov	r4, r3
 80037de:	8bfa      	ldrh	r2, [r7, #30]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	9400      	str	r4, [sp, #0]
 80037e6:	2300      	movs	r3, #0
 80037e8:	f002 fb94 	bl	8005f14 <CO_CANtxBufferInit>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	2200      	movs	r2, #0
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8003800:	2309      	movs	r3, #9
 8003802:	e016      	b.n	8003832 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	8bfa      	ldrh	r2, [r7, #30]
 8003808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2200      	movs	r2, #0
 800381c:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	2200      	movs	r2, #0
 8003822:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7fe f87a 	bl	8001924 <OD_writeOriginal>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	372c      	adds	r7, #44	; 0x2c
 8003836:	46bd      	mov	sp, r7
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	bf00      	nop
 800383c:	bffff800 	.word	0xbffff800
 8003840:	0800362b 	.word	0x0800362b

08003844 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <OD_write_1019+0x2e>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	7d1b      	ldrb	r3, [r3, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <OD_write_1019+0x2e>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <OD_write_1019+0x2e>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8003872:	2309      	movs	r3, #9
 8003874:	e041      	b.n	80038fa <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 800387c:	68b8      	ldr	r0, [r7, #8]
 800387e:	f7ff fe37 	bl	80034f0 <CO_getUint8>
 8003882:	4603      	mov	r3, r0
 8003884:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <OD_write_1019+0x4e>
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2bf0      	cmp	r3, #240	; 0xf0
 8003890:	d901      	bls.n	8003896 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8003892:	230f      	movs	r3, #15
 8003894:	e031      	b.n	80038fa <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80038a0:	2317      	movs	r3, #23
 80038a2:	e02a      	b.n	80038fa <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461c      	mov	r4, r3
 80038c2:	2300      	movs	r3, #0
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	9400      	str	r4, [sp, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	f002 fb23 	bl	8005f14 <CO_CANtxBufferInit>
 80038ce:	4602      	mov	r2, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80038e2:	2309      	movs	r3, #9
 80038e4:	e009      	b.n	80038fa <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	7cfa      	ldrb	r2, [r7, #19]
 80038ea:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7fe f816 	bl	8001924 <OD_writeOriginal>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}
	...

08003904 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af04      	add	r7, sp, #16
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <CO_SYNC_init+0x32>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <CO_SYNC_init+0x32>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <CO_SYNC_init+0x32>
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	e0fe      	b.n	8003b3a <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 800393c:	2260      	movs	r2, #96	; 0x60
 800393e:	2100      	movs	r1, #0
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f006 f913 	bl	8009b6c <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 800394a:	f107 0218 	add.w	r2, r7, #24
 800394e:	2301      	movs	r3, #1
 8003950:	2100      	movs	r1, #0
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fe22 	bl	800359c <OD_get_u32>
 8003958:	4603      	mov	r3, r0
 800395a:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800395c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <CO_SYNC_init+0x7a>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1005_cobIdSync); }
 8003964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <CO_SYNC_init+0x74>
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fddc 	bl	8003528 <OD_getIndex>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003978:	f06f 030b 	mvn.w	r3, #11
 800397c:	e0dd      	b.n	8003b3a <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a6f      	ldr	r2, [pc, #444]	; (8003b44 <CO_SYNC_init+0x240>)
 8003988:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <CO_SYNC_init+0x244>)
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3334      	adds	r3, #52	; 0x34
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fdd7 	bl	800354a <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 800399c:	2300      	movs	r3, #0
 800399e:	2204      	movs	r2, #4
 80039a0:	2100      	movs	r1, #0
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	f7fe fa0f 	bl	8001dc6 <OD_getPtr>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) { 
 80039b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80039bc:	6838      	ldr	r0, [r7, #0]
 80039be:	f7ff fdb3 	bl	8003528 <OD_getIndex>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80039ca:	f06f 030b 	mvn.w	r3, #11
 80039ce:	e0b4      	b.n	8003b3a <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80039d0:	2300      	movs	r3, #0
 80039d2:	2204      	movs	r2, #4
 80039d4:	2100      	movs	r1, #0
 80039d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039d8:	f7fe f9f5 	bl	8001dc6 <OD_getPtr>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <CO_SYNC_init+0x106>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10c      	bne.n	8003a0a <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 80039f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80039f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f8:	f7ff fd96 	bl	8003528 <OD_getIndex>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003a04:	f06f 030b 	mvn.w	r3, #11
 8003a08:	e097      	b.n	8003b3a <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d033      	beq.n	8003a7c <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8003a14:	f107 0217 	add.w	r2, r7, #23
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a1e:	f7ff fda8 	bl	8003572 <OD_get_u8>
 8003a22:	4603      	mov	r3, r0
 8003a24:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8003a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <CO_SYNC_init+0x144>
            if (errInfo != NULL) { 
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8003a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a36:	f7ff fd77 	bl	8003528 <OD_getIndex>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a40:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8003a42:	f06f 030b 	mvn.w	r3, #11
 8003a46:	e078      	b.n	8003b3a <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) { syncCounterOvf = 2; }
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <CO_SYNC_init+0x150>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	75fb      	strb	r3, [r7, #23]
 8003a52:	e004      	b.n	8003a5e <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) { syncCounterOvf = 240; }
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	2bf0      	cmp	r3, #240	; 0xf0
 8003a58:	d901      	bls.n	8003a5e <CO_SYNC_init+0x15a>
 8003a5a:	23f0      	movs	r3, #240	; 0xf0
 8003a5c:	75fb      	strb	r3, [r7, #23]
        else { /* MISRA C 2004 14.10 */ }

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a37      	ldr	r2, [pc, #220]	; (8003b44 <CO_SYNC_init+0x240>)
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a37      	ldr	r2, [pc, #220]	; (8003b4c <CO_SYNC_init+0x248>)
 8003a6e:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3350      	adds	r3, #80	; 0x50
 8003a74:	4619      	mov	r1, r3
 8003a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a78:	f7ff fd67 	bl	800354a <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8003a7c:	7dfa      	ldrb	r2, [r7, #23]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ab8:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003abe:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003ac4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <CO_SYNC_init+0x24c>)
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ae6:	f002 f9b7 	bl	8005e58 <CO_CANrxBufferInit>
 8003aea:	4603      	mov	r3, r0
 8003aec:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8003aee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <CO_SYNC_init+0x1f8>
        return ret;
 8003af6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003afa:	e01e      	b.n	8003b3a <CO_SYNC_init+0x236>
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4618      	mov	r0, r3
 8003b14:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8003b16:	2300      	movs	r3, #0
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	9000      	str	r0, [sp, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b20:	f002 f9f8 	bl	8005f14 <CO_CANtxBufferInit>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e000      	b.n	8003b3a <CO_SYNC_init+0x236>
    }
#endif

    return CO_ERROR_NO;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	08001875 	.word	0x08001875
 8003b48:	080036b9 	.word	0x080036b9
 8003b4c:	08003845 	.word	0x08003845
 8003b50:	0800362b 	.word	0x0800362b

08003b54 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8088 	beq.w	8003c7e <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) { SYNC->timer = timerNew; }
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d902      	bls.n	8003b88 <CO_SYNC_process+0x34>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8003b96:	2301      	movs	r3, #1
 8003b98:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <CO_SYNC_process+0x5c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e000      	b.n	8003bb2 <CO_SYNC_process+0x5e>
 8003bb0:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8003bb2:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d031      	beq.n	8003c1e <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d828      	bhi.n	8003c1e <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fcf8 	bl	80035c6 <CO_SYNCsend>
 8003bd6:	e022      	b.n	8003c1e <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	7c1b      	ldrb	r3, [r3, #16]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d11e      	bne.n	8003c1e <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) {
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d202      	bcs.n	8003bf8 <CO_SYNC_process+0xa4>
                    periodTimeout = 0xFFFFFFFF;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	61bb      	str	r3, [r7, #24]
                }

                if (SYNC->timer > periodTimeout) {
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d20d      	bcs.n	8003c1e <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003c10:	2218      	movs	r2, #24
 8003c12:	2101      	movs	r1, #1
 8003c14:	f7fd f81e 	bl	8000c54 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	741a      	strb	r2, [r3, #16]
            }
            else { /* MISRA C 2004 14.10 */ }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <CO_SYNC_process+0xfe>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d010      	beq.n	8003c52 <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d909      	bls.n	8003c52 <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8003c46:	2302      	movs	r3, #2
 8003c48:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	e002      	b.n	8003c58 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	7a1b      	ldrb	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01a      	beq.n	8003c96 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	7a1b      	ldrb	r3, [r3, #8]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	f248 2340 	movw	r3, #33344	; 0x8240
 8003c6e:	2219      	movs	r2, #25
 8003c70:	2101      	movs	r1, #1
 8003c72:	f7fc ffef 	bl	8000c54 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	721a      	strb	r2, [r3, #8]
 8003c7c:	e00b      	b.n	8003c96 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10f      	bne.n	8003cbc <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	7c1b      	ldrb	r3, [r3, #16]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d108      	bne.n	8003cb6 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	2218      	movs	r2, #24
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f7fc ffcf 	bl	8000c54 <CO_error>
        }
        SYNC->timeoutError = 1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8003cd4:	81fb      	strh	r3, [r7, #14]
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <OD_getIndex+0x14>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	e000      	b.n	8003d16 <OD_getIndex+0x16>
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <OD_extension_init>:
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <OD_extension_init+0x14>
 8003d32:	2305      	movs	r3, #5
 8003d34:	e003      	b.n	8003d3e <OD_extension_init+0x1c>
    entry->extension = extension;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <OD_get_u32>:
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af02      	add	r7, sp, #8
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	460b      	mov	r3, r1
 8003d58:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003d5a:	7af9      	ldrb	r1, [r7, #11]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2304      	movs	r3, #4
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7fd ffc7 	bl	8001cf8 <OD_get_value>
 8003d6a:	4603      	mov	r3, r0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	791b      	ldrb	r3, [r3, #4]
 8003d86:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	3305      	adds	r3, #5
 8003d8c:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d108      	bne.n	8003da6 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2206      	movs	r2, #6
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f005 febe 	bl	8009b1c <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2201      	movs	r2, #1
 8003da4:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00c      	beq.n	8003dde <OD_write_1012+0x2e>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	7d1b      	ldrb	r3, [r3, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <OD_write_1012+0x2e>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d102      	bne.n	8003dde <OD_write_1012+0x2e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8003dde:	2309      	movs	r3, #9
 8003de0:	e051      	b.n	8003e86 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8003de8:	68b8      	ldr	r0, [r7, #8]
 8003dea:	f7ff ff7b 	bl	8003ce4 <CO_getUint32>
 8003dee:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df8:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <OD_write_1012+0xe0>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d126      	bne.n	8003e52 <OD_write_1012+0xa2>
 8003e04:	8afb      	ldrh	r3, [r7, #22]
 8003e06:	2b7f      	cmp	r3, #127	; 0x7f
 8003e08:	d923      	bls.n	8003e52 <OD_write_1012+0xa2>
 8003e0a:	8afb      	ldrh	r3, [r7, #22]
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d903      	bls.n	8003e1a <OD_write_1012+0x6a>
 8003e12:	8afb      	ldrh	r3, [r7, #22]
 8003e14:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003e18:	d91b      	bls.n	8003e52 <OD_write_1012+0xa2>
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003e20:	d903      	bls.n	8003e2a <OD_write_1012+0x7a>
 8003e22:	8afb      	ldrh	r3, [r7, #22]
 8003e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e28:	d313      	bcc.n	8003e52 <OD_write_1012+0xa2>
 8003e2a:	8afb      	ldrh	r3, [r7, #22]
 8003e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e30:	d903      	bls.n	8003e3a <OD_write_1012+0x8a>
 8003e32:	8afb      	ldrh	r3, [r7, #22]
 8003e34:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003e38:	d30b      	bcc.n	8003e52 <OD_write_1012+0xa2>
 8003e3a:	8afb      	ldrh	r3, [r7, #22]
 8003e3c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003e40:	d303      	bcc.n	8003e4a <OD_write_1012+0x9a>
 8003e42:	8afb      	ldrh	r3, [r7, #22]
 8003e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e48:	d303      	bcc.n	8003e52 <OD_write_1012+0xa2>
 8003e4a:	8afb      	ldrh	r3, [r7, #22]
 8003e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e50:	d901      	bls.n	8003e56 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8003e52:	230f      	movs	r3, #15
 8003e54:	e017      	b.n	8003e86 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	0fdb      	lsrs	r3, r3, #31
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7fd fd50 	bl	8001924 <OD_writeOriginal>
 8003e84:	4603      	mov	r3, r0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	3ffff800 	.word	0x3ffff800

08003e94 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af04      	add	r7, sp, #16
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <CO_TIME_init+0x20>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <CO_TIME_init+0x20>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	e061      	b.n	8003f7e <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8003eba:	222c      	movs	r2, #44	; 0x2c
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f005 fe54 	bl	8009b6c <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8003ec4:	f107 0214 	add.w	r2, r7, #20
 8003ec8:	2301      	movs	r3, #1
 8003eca:	2100      	movs	r1, #0
 8003ecc:	68b8      	ldr	r0, [r7, #8]
 8003ece:	f7ff ff3c 	bl	8003d4a <OD_get_u32>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8003ed6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <CO_TIME_init+0x64>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp); }
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <CO_TIME_init+0x5e>
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f7ff ff0b 	bl	8003d00 <OD_getIndex>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003ef2:	f06f 030b 	mvn.w	r3, #11
 8003ef6:	e042      	b.n	8003f7e <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <CO_TIME_init+0xf4>)
 8003f02:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <CO_TIME_init+0xf8>)
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	331c      	adds	r3, #28
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f7ff ff06 	bl	8003d22 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1e:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	0fdb      	lsrs	r3, r3, #31
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003f50:	8bba      	ldrh	r2, [r7, #28]
 8003f52:	8879      	ldrh	r1, [r7, #2]
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <CO_TIME_init+0xfc>)
 8003f56:	9302      	str	r3, [sp, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f001 ff77 	bl	8005e58 <CO_CANrxBufferInit>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO) {
 8003f6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <CO_TIME_init+0xe8>
            return ret;
 8003f76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003f7a:	e000      	b.n	8003f7e <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	08001875 	.word	0x08001875
 8003f8c:	08003db1 	.word	0x08003db1
 8003f90:	08003d75 	.word	0x08003d75

08003f94 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d024      	beq.n	8003ff4 <CO_TIME_process+0x60>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fe91 	bl	8003ce4 <CO_getUint32>
 8003fc2:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fe7c 	bl	8003cc6 <CO_getUint16>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8bfa      	ldrh	r2, [r7, #30]
 8003fe0:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8003ff2:	e002      	b.n	8003ffa <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d132      	bne.n	800406a <CO_TIME_process+0xd6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02f      	beq.n	800406a <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	89db      	ldrh	r3, [r3, #14]
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <CO_TIME_process+0xe0>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <CO_TIME_process+0xe0>)
 8004026:	fba3 1302 	umull	r1, r3, r3, r2
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	441a      	add	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <CO_TIME_process+0xe4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d90b      	bls.n	800406a <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <CO_TIME_process+0xe8>)
 8004058:	4413      	add	r3, r2
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	899b      	ldrh	r3, [r3, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800406c:	4618      	mov	r0, r3
 800406e:	3728      	adds	r7, #40	; 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	10624dd3 	.word	0x10624dd3
 8004078:	05265bff 	.word	0x05265bff
 800407c:	fad9a400 	.word	0xfad9a400

08004080 <CO_fifo_init>:
  #error CO_CONFIG_CRC16_ENABLE must be enabled.
 #endif
#endif

/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, uint8_t *buf, size_t bufSize) {
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <CO_fifo_init+0x38>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00f      	beq.n	80040b8 <CO_fifo_init+0x38>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d90c      	bls.n	80040b8 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]

    return;
 80040b6:	e000      	b.n	80040ba <CO_fifo_init+0x3a>
        return;
 80040b8:	bf00      	nop
}
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	e006      	b.n	80040ea <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 80040dc:	220c      	movs	r2, #12
 80040de:	2100      	movs	r1, #0
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f005 fd43 	bl	8009b6c <memset>

    return ret;
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 800411c:	e100      	b.n	8004320 <CO_LEDs_process+0x22c>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	7a5b      	ldrb	r3, [r3, #9]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	613b      	str	r3, [r7, #16]

        tick = true;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800413e:	3b50      	subs	r3, #80	; 0x50
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	791b      	ldrb	r3, [r3, #4]
 8004148:	3301      	adds	r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	711a      	strb	r2, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	791b      	ldrb	r3, [r3, #4]
 8004154:	2b03      	cmp	r3, #3
 8004156:	f240 80cb 	bls.w	80042f0 <CO_LEDs_process+0x1fc>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	77bb      	strb	r3, [r7, #30]
 8004164:	7fbb      	ldrb	r3, [r7, #30]
 8004166:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) { rd |= CO_LED_blink; }
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	7a5b      	ldrb	r3, [r3, #9]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <CO_LEDs_process+0x8a>
 8004174:	7ffb      	ldrb	r3, [r7, #31]
 8004176:	f043 0302 	orr.w	r3, r3, #2
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e003      	b.n	8004186 <CO_LEDs_process+0x92>
            else                                    { gr |= CO_LED_blink; }
 800417e:	7fbb      	ldrb	r3, [r7, #30]
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	795b      	ldrb	r3, [r3, #5]
 800418a:	3301      	adds	r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	715a      	strb	r2, [r3, #5]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	795b      	ldrb	r3, [r3, #5]
 8004196:	2b06      	cmp	r3, #6
 8004198:	d010      	beq.n	80041bc <CO_LEDs_process+0xc8>
 800419a:	2b06      	cmp	r3, #6
 800419c:	dc12      	bgt.n	80041c4 <CO_LEDs_process+0xd0>
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d002      	beq.n	80041a8 <CO_LEDs_process+0xb4>
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d005      	beq.n	80041b2 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 80041a6:	e00d      	b.n	80041c4 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 80041a8:	7ffb      	ldrb	r3, [r7, #31]
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e009      	b.n	80041c6 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 80041b2:	7fbb      	ldrb	r3, [r7, #30]
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	77bb      	strb	r3, [r7, #30]
 80041ba:	e004      	b.n	80041c6 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	715a      	strb	r2, [r3, #5]
 80041c2:	e000      	b.n	80041c6 <CO_LEDs_process+0xd2>
                default: break;
 80041c4:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	799b      	ldrb	r3, [r3, #6]
 80041ca:	3301      	adds	r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	719a      	strb	r2, [r3, #6]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	799b      	ldrb	r3, [r3, #6]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	2b07      	cmp	r3, #7
 80041da:	d821      	bhi.n	8004220 <CO_LEDs_process+0x12c>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <CO_LEDs_process+0xf0>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	08004205 	.word	0x08004205
 80041e8:	0800420f 	.word	0x0800420f
 80041ec:	08004205 	.word	0x08004205
 80041f0:	0800420f 	.word	0x0800420f
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004219 	.word	0x08004219
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8004204:	7ffb      	ldrb	r3, [r7, #31]
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e009      	b.n	8004222 <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 800420e:	7fbb      	ldrb	r3, [r7, #30]
 8004210:	f043 0308 	orr.w	r3, r3, #8
 8004214:	77bb      	strb	r3, [r7, #30]
 8004216:	e004      	b.n	8004222 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	719a      	strb	r2, [r3, #6]
 800421e:	e000      	b.n	8004222 <CO_LEDs_process+0x12e>
                default: break;
 8004220:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	79db      	ldrb	r3, [r3, #7]
 8004226:	3301      	adds	r3, #1
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	71da      	strb	r2, [r3, #7]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	79db      	ldrb	r3, [r3, #7]
 8004232:	3b01      	subs	r3, #1
 8004234:	2b09      	cmp	r3, #9
 8004236:	d825      	bhi.n	8004284 <CO_LEDs_process+0x190>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <CO_LEDs_process+0x14c>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004269 	.word	0x08004269
 8004244:	08004273 	.word	0x08004273
 8004248:	08004269 	.word	0x08004269
 800424c:	08004273 	.word	0x08004273
 8004250:	08004269 	.word	0x08004269
 8004254:	08004273 	.word	0x08004273
 8004258:	08004285 	.word	0x08004285
 800425c:	08004285 	.word	0x08004285
 8004260:	08004285 	.word	0x08004285
 8004264:	0800427d 	.word	0x0800427d
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8004268:	7ffb      	ldrb	r3, [r7, #31]
 800426a:	f043 0310 	orr.w	r3, r3, #16
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e009      	b.n	8004286 <CO_LEDs_process+0x192>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8004272:	7fbb      	ldrb	r3, [r7, #30]
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	77bb      	strb	r3, [r7, #30]
 800427a:	e004      	b.n	8004286 <CO_LEDs_process+0x192>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	71da      	strb	r2, [r3, #7]
 8004282:	e000      	b.n	8004286 <CO_LEDs_process+0x192>
                default: break;
 8004284:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	7a1b      	ldrb	r3, [r3, #8]
 800428a:	3301      	adds	r3, #1
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	721a      	strb	r2, [r3, #8]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	7a1b      	ldrb	r3, [r3, #8]
 8004296:	3b01      	subs	r3, #1
 8004298:	2b0b      	cmp	r3, #11
 800429a:	d834      	bhi.n	8004306 <CO_LEDs_process+0x212>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <CO_LEDs_process+0x1b0>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	080042df 	.word	0x080042df
 80042bc:	080042d5 	.word	0x080042d5
 80042c0:	080042df 	.word	0x080042df
 80042c4:	08004307 	.word	0x08004307
 80042c8:	08004307 	.word	0x08004307
 80042cc:	08004307 	.word	0x08004307
 80042d0:	080042e9 	.word	0x080042e9
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	f043 0320 	orr.w	r3, r3, #32
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e014      	b.n	8004308 <CO_LEDs_process+0x214>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 80042de:	7fbb      	ldrb	r3, [r7, #30]
 80042e0:	f043 0320 	orr.w	r3, r3, #32
 80042e4:	77bb      	strb	r3, [r7, #30]
 80042e6:	e00f      	b.n	8004308 <CO_LEDs_process+0x214>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	721a      	strb	r2, [r3, #8]
 80042ee:	e00b      	b.n	8004308 <CO_LEDs_process+0x214>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	7a5b      	ldrb	r3, [r3, #9]
 80042f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80042f8:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	7a9b      	ldrb	r3, [r3, #10]
 80042fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004302:	77bb      	strb	r3, [r7, #30]
 8004304:	e000      	b.n	8004308 <CO_LEDs_process+0x214>
                default: break;
 8004306:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) { rd |= CO_LED_flicker; }
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <CO_LEDs_process+0x224>
 800430e:	7ffb      	ldrb	r3, [r7, #31]
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e003      	b.n	8004320 <CO_LEDs_process+0x22c>
        else               { gr |= CO_LED_flicker; }
 8004318:	7fbb      	ldrb	r3, [r7, #30]
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004328:	4293      	cmp	r3, r2
 800432a:	f63f aef8 	bhi.w	800411e <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d077      	beq.n	8004424 <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                   { rd_co = 1;}
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <CO_LEDs_process+0x24c>
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
 800433e:	e032      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else if (NMTstate == CO_NMT_INITIALIZING){ rd_co = rd & CO_LED_flicker;}
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <CO_LEDs_process+0x25e>
 8004348:	7ffb      	ldrb	r3, [r7, #31]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
 8004350:	e029      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else if (ErrRpdo)                        { rd_co = rd & CO_LED_flash_4;}
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <CO_LEDs_process+0x26e>
 8004358:	7ffb      	ldrb	r3, [r7, #31]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	75fb      	strb	r3, [r7, #23]
 8004360:	e021      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else if (ErrSync)                        { rd_co = rd & CO_LED_flash_3;}
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <CO_LEDs_process+0x27e>
 8004368:	7ffb      	ldrb	r3, [r7, #31]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	75fb      	strb	r3, [r7, #23]
 8004370:	e019      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else if (ErrHbCons)                      { rd_co = rd & CO_LED_flash_2;}
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <CO_LEDs_process+0x28e>
 8004378:	7ffb      	ldrb	r3, [r7, #31]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	75fb      	strb	r3, [r7, #23]
 8004380:	e011      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else if (ErrCANbusWarn)                  { rd_co = rd & CO_LED_flash_1;}
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <CO_LEDs_process+0x29e>
 8004388:	7ffb      	ldrb	r3, [r7, #31]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	75fb      	strb	r3, [r7, #23]
 8004390:	e009      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else if (ErrOther)                       { rd_co = rd & CO_LED_blink;}
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <CO_LEDs_process+0x2ae>
 8004398:	7ffb      	ldrb	r3, [r7, #31]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	75fb      	strb	r3, [r7, #23]
 80043a0:	e001      	b.n	80043a6 <CO_LEDs_process+0x2b2>
        else                                     { rd_co = 0;}
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         {gr_co = gr & CO_LED_flicker;}
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <CO_LEDs_process+0x2c2>
 80043ac:	7fbb      	ldrb	r3, [r7, #30]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	75bb      	strb	r3, [r7, #22]
 80043b4:	e022      	b.n	80043fc <CO_LEDs_process+0x308>
        else if (firmwareDownload)                  {gr_co = gr & CO_LED_flash_3;}
 80043b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <CO_LEDs_process+0x2d2>
 80043bc:	7fbb      	ldrb	r3, [r7, #30]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	75bb      	strb	r3, [r7, #22]
 80043c4:	e01a      	b.n	80043fc <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_STOPPED)        {gr_co = gr & CO_LED_flash_1;}
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d104      	bne.n	80043d8 <CO_LEDs_process+0x2e4>
 80043ce:	7fbb      	ldrb	r3, [r7, #30]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	75bb      	strb	r3, [r7, #22]
 80043d6:	e011      	b.n	80043fc <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL){gr_co = gr & CO_LED_blink;}
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	2b7f      	cmp	r3, #127	; 0x7f
 80043de:	d104      	bne.n	80043ea <CO_LEDs_process+0x2f6>
 80043e0:	7fbb      	ldrb	r3, [r7, #30]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	75bb      	strb	r3, [r7, #22]
 80043e8:	e008      	b.n	80043fc <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_OPERATIONAL)    {gr_co = 1;}
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d102      	bne.n	80043f8 <CO_LEDs_process+0x304>
 80043f2:	2301      	movs	r3, #1
 80043f4:	75bb      	strb	r3, [r7, #22]
 80043f6:	e001      	b.n	80043fc <CO_LEDs_process+0x308>
        else                                        {gr_co = 0;}
 80043f8:	2300      	movs	r3, #0
 80043fa:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) { rd |= CO_LED_CANopen; }
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <CO_LEDs_process+0x316>
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004408:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) { gr |= CO_LED_CANopen; }
 800440a:	7dbb      	ldrb	r3, [r7, #22]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <CO_LEDs_process+0x324>
 8004410:	7fbb      	ldrb	r3, [r7, #30]
 8004412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004416:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	7ffa      	ldrb	r2, [r7, #31]
 800441c:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	7fba      	ldrb	r2, [r7, #30]
 8004422:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8004424:	bf00      	nop
 8004426:	3724      	adds	r7, #36	; 0x24
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <CO_LSSmaster_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSmaster_receive(void *object, void *msg)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_t *LSSmaster;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	3305      	adds	r3, #5
 8004444:	613b      	str	r3, [r7, #16]

    LSSmaster = (CO_LSSmaster_t*)object;   /* this is the correct pointer type of the first argument */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]

    /* verify message length and message overflow (previous message was not processed yet) */
    if(DLC==8 && !CO_FLAG_READ(LSSmaster->CANrxNew) &&
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d111      	bne.n	8004474 <CO_LSSmaster_receive+0x44>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10d      	bne.n	8004474 <CO_LSSmaster_receive+0x44>
       LSSmaster->command!=CO_LSSmaster_COMMAND_WAITING){
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	795b      	ldrb	r3, [r3, #5]
    if(DLC==8 && !CO_FLAG_READ(LSSmaster->CANrxNew) &&
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <CO_LSSmaster_receive+0x44>

        /* copy data and set 'new message' flag */
        memcpy(LSSmaster->CANrxData, data, sizeof(LSSmaster->CANrxData));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3318      	adds	r3, #24
 8004464:	2208      	movs	r2, #8
 8004466:	6939      	ldr	r1, [r7, #16]
 8004468:	4618      	mov	r0, r3
 800446a:	f005 fb57 	bl	8009b1c <memcpy>

        CO_FLAG_SET(LSSmaster->CANrxNew);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	615a      	str	r2, [r3, #20]
        if(LSSmaster->pFunctSignal != NULL) {
            LSSmaster->pFunctSignal(LSSmaster->functSignalObject);
        }
#endif
    }
}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <CO_LSSmaster_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssSlave,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssMaster)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af04      	add	r7, sp, #16
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSmaster==NULL || CANdevRx==NULL || CANdevTx==NULL){
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <CO_LSSmaster_init+0x2a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <CO_LSSmaster_init+0x2a>
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <CO_LSSmaster_init+0x30>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	e040      	b.n	800452e <CO_LSSmaster_init+0xb2>
    }

    LSSmaster->timeout_us = (uint32_t)timeout_ms * 1000;
 80044ac:	897b      	ldrh	r3, [r7, #10]
 80044ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b2:	fb03 f202 	mul.w	r2, r3, r2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
    LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	711a      	strb	r2, [r3, #4]
    LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	715a      	strb	r2, [r3, #5]
    LSSmaster->timeoutTimer = 0;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	615a      	str	r2, [r3, #20]
    memset(LSSmaster->CANrxData, 0, sizeof(LSSmaster->CANrxData));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3318      	adds	r3, #24
 80044d6:	2208      	movs	r2, #8
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f005 fb46 	bl	8009b6c <memset>
    LSSmaster->pFunctSignal = NULL;
    LSSmaster->functSignalObject = NULL;
#endif

    /* configure LSS CAN Slave response message reception */
    ret = CO_CANrxBufferInit(
 80044e0:	8c3a      	ldrh	r2, [r7, #32]
 80044e2:	8939      	ldrh	r1, [r7, #8]
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <CO_LSSmaster_init+0xbc>)
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f001 fcaf 	bl	8005e58 <CO_CANrxBufferInit>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSmaster,     /* object passed to receive function */
            CO_LSSmaster_receive);/* this function will process received message */

    /* configure LSS CAN Master message transmission */
    LSSmaster->CANdevTx = CANdevTx;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	621a      	str	r2, [r3, #32]
    LSSmaster->TXbuff = CO_CANtxBufferInit(
 8004504:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004506:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004508:	2300      	movs	r3, #0
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	2308      	movs	r3, #8
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004514:	f001 fcfe 	bl	8005f14 <CO_CANtxBufferInit>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
            CANidLssMaster,       /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSmaster->TXbuff == NULL) {
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <CO_LSSmaster_init+0xae>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004526:	23ff      	movs	r3, #255	; 0xff
 8004528:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800452a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	08004431 	.word	0x08004431

0800453c <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b090      	sub	sp, #64	; 0x40
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	791b      	ldrb	r3, [r3, #4]
 800454e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8004552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004556:	2b08      	cmp	r3, #8
 8004558:	f040 814c 	bne.w	80047f4 <CO_LSSslave_receive+0x2b8>
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004560:	2b00      	cmp	r3, #0
 8004562:	f040 8147 	bne.w	80047f4 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8004566:	2300      	movs	r3, #0
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	3305      	adds	r3, #5
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8004578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800457c:	2b04      	cmp	r3, #4
 800457e:	d12c      	bne.n	80045da <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <CO_LSSslave_receive+0x56>
 800458c:	2b01      	cmp	r3, #1
 800458e:	d020      	beq.n	80045d2 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8004590:	e12a      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004594:	7c1b      	ldrb	r3, [r3, #16]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d110      	bne.n	80045bc <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80045a0:	2bff      	cmp	r3, #255	; 0xff
 80045a2:	d10b      	bne.n	80045bc <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	d006      	beq.n	80045bc <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80045b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80045b8:	2301      	movs	r3, #1
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	2200      	movs	r2, #0
 80045c0:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	3314      	adds	r3, #20
 80045c6:	2210      	movs	r2, #16
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f005 face 	bl	8009b6c <memset>
                    break;
 80045d0:	e10a      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	2201      	movs	r2, #1
 80045d6:	741a      	strb	r2, [r3, #16]
                    break;
 80045d8:	e106      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	7c1b      	ldrb	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 80ee 	bne.w	80047c0 <CO_LSSslave_receive+0x284>
            switch (cs) {
 80045e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045e8:	3b40      	subs	r3, #64	; 0x40
 80045ea:	2b11      	cmp	r3, #17
 80045ec:	f200 80f7 	bhi.w	80047de <CO_LSSslave_receive+0x2a2>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <CO_LSSslave_receive+0xbc>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004641 	.word	0x08004641
 80045fc:	08004651 	.word	0x08004651
 8004600:	08004661 	.word	0x08004661
 8004604:	08004671 	.word	0x08004671
 8004608:	080047df 	.word	0x080047df
 800460c:	080047df 	.word	0x080047df
 8004610:	080047df 	.word	0x080047df
 8004614:	080047df 	.word	0x080047df
 8004618:	080047df 	.word	0x080047df
 800461c:	080047df 	.word	0x080047df
 8004620:	080047df 	.word	0x080047df
 8004624:	080047df 	.word	0x080047df
 8004628:	080047df 	.word	0x080047df
 800462c:	080047df 	.word	0x080047df
 8004630:	080047df 	.word	0x080047df
 8004634:	080047df 	.word	0x080047df
 8004638:	080047df 	.word	0x080047df
 800463c:	080046cd 	.word	0x080046cd
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	3301      	adds	r3, #1
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464c:	615a      	str	r2, [r3, #20]
                break;
 800464e:	e0cb      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	3301      	adds	r3, #1
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	619a      	str	r2, [r3, #24]
                break;
 800465e:	e0c3      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	3301      	adds	r3, #1
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	61da      	str	r2, [r3, #28]
                break;
 800466e:	e0bb      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	3301      	adds	r3, #1
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	429a      	cmp	r2, r3
 8004688:	f040 80ab 	bne.w	80047e2 <CO_LSSslave_receive+0x2a6>
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	429a      	cmp	r2, r3
 8004696:	f040 80a4 	bne.w	80047e2 <CO_LSSslave_receive+0x2a6>
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	f040 809d 	bne.w	80047e2 <CO_LSSslave_receive+0x2a6>
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f040 8096 	bne.w	80047e2 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	2201      	movs	r2, #1
 80046ba:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80046c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 80046c6:	2301      	movs	r3, #1
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 80046ca:	e08a      	b.n	80047e2 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2bff      	cmp	r3, #255	; 0xff
 80046d4:	f040 8087 	bne.w	80047e6 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80046de:	2bff      	cmp	r3, #255	; 0xff
 80046e0:	f040 8081 	bne.w	80047e6 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	795b      	ldrb	r3, [r3, #5]
 80046e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	799b      	ldrb	r3, [r3, #6]
 80046f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	79db      	ldrb	r3, [r3, #7]
 80046f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80046fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004700:	2b1f      	cmp	r3, #31
 8004702:	d903      	bls.n	800470c <CO_LSSslave_receive+0x1d0>
 8004704:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d16d      	bne.n	80047e8 <CO_LSSslave_receive+0x2ac>
 800470c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004710:	2b03      	cmp	r3, #3
 8004712:	d869      	bhi.n	80047e8 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8004714:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004718:	2b03      	cmp	r3, #3
 800471a:	d865      	bhi.n	80047e8 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	3301      	adds	r3, #1
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8004728:	2300      	movs	r3, #0
 800472a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800472c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d10d      	bne.n	8004750 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8004734:	2301      	movs	r3, #1
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	2210      	movs	r2, #16
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f005 fa0f 	bl	8009b6c <memset>
 800474e:	e02c      	b.n	80047aa <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004756:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800475a:	429a      	cmp	r2, r3
 800475c:	d125      	bne.n	80047aa <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 800475e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 800476c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	405a      	eors	r2, r3
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 800477e:	2b00      	cmp	r3, #0
 8004780:	d113      	bne.n	80047aa <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8004782:	2301      	movs	r3, #1
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8004786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004788:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8004790:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <CO_LSSslave_receive+0x26e>
 8004798:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800479c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d202      	bcs.n	80047aa <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	2201      	movs	r2, #1
 80047a8:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    else { /* MISRA C 2004 14.10 */ }
                    if (ack) {
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80047b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80047ba:	2301      	movs	r3, #1
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 80047be:	e012      	b.n	80047e6 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	3349      	adds	r3, #73	; 0x49
 80047c4:	2208      	movs	r2, #8
 80047c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c8:	4618      	mov	r0, r3
 80047ca:	f005 f9a7 	bl	8009b1c <memcpy>
            LSSslave->service = cs;
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80047d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 80047d8:	2301      	movs	r3, #1
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047dc:	e004      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
                break;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
                break;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <CO_LSSslave_receive+0x2ac>
                break;
 80047e6:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80047e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	2201      	movs	r2, #1
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 80047f4:	bf00      	nop
 80047f6:	3740      	adds	r7, #64	; 0x40
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af04      	add	r7, sp, #16
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
    //printf("CO_LSSslave_init called with parameters:\n");
       // printf("pendingBitRate: %d\n", *pendingBitRate);
       // printf("pendingNodeID: %d\n", *pendingNodeID);
    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d018      	beq.n	8004846 <CO_LSSslave_init+0x4a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <CO_LSSslave_init+0x4a>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <CO_LSSslave_init+0x4a>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00f      	beq.n	8004846 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b25b      	sxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	da06      	bge.n	800484c <CO_LSSslave_init+0x50>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2bff      	cmp	r3, #255	; 0xff
 8004844:	d002      	beq.n	800484c <CO_LSSslave_init+0x50>

    ) { //printf("CO_LSSslave_init failed: Invalid arguments\n");
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e046      	b.n	80048da <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800484c:	2274      	movs	r2, #116	; 0x74
 800484e:	2100      	movs	r1, #0
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f005 f98b 	bl	8009b6c <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2210      	movs	r2, #16
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f005 f95d 	bl	8009b1c <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 800488c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800488e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004890:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <CO_LSSslave_init+0xe8>)
 8004892:	9302      	str	r3, [sp, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80048a0:	6a38      	ldr	r0, [r7, #32]
 80048a2:	f001 fad9 	bl	8005e58 <CO_CANrxBufferInit>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 80048b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048b2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80048b4:	2300      	movs	r3, #0
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	2308      	movs	r3, #8
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048c0:	f001 fb28 	bl	8005f14 <CO_CANtxBufferInit>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80048d2:	23ff      	movs	r3, #255	; 0xff
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80048d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	0800453d 	.word	0x0800453d

080048e8 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	; 0x30
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8203 	beq.w	8004d04 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	3305      	adds	r3, #5
 8004908:	2208      	movs	r2, #8
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f005 f92d 	bl	8009b6c <memset>

        switch (LSSslave->service) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004918:	3b04      	subs	r3, #4
 800491a:	2b5a      	cmp	r3, #90	; 0x5a
 800491c:	f200 81dd 	bhi.w	8004cda <CO_LSSslave_process+0x3f2>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <CO_LSSslave_process+0x40>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004a95 	.word	0x08004a95
 800492c:	08004cdb 	.word	0x08004cdb
 8004930:	08004cdb 	.word	0x08004cdb
 8004934:	08004cdb 	.word	0x08004cdb
 8004938:	08004cdb 	.word	0x08004cdb
 800493c:	08004cdb 	.word	0x08004cdb
 8004940:	08004cdb 	.word	0x08004cdb
 8004944:	08004cdb 	.word	0x08004cdb
 8004948:	08004cdb 	.word	0x08004cdb
 800494c:	08004cdb 	.word	0x08004cdb
 8004950:	08004cdb 	.word	0x08004cdb
 8004954:	08004cdb 	.word	0x08004cdb
 8004958:	08004cdb 	.word	0x08004cdb
 800495c:	08004aa9 	.word	0x08004aa9
 8004960:	08004cdb 	.word	0x08004cdb
 8004964:	08004af7 	.word	0x08004af7
 8004968:	08004cdb 	.word	0x08004cdb
 800496c:	08004b93 	.word	0x08004b93
 8004970:	08004cdb 	.word	0x08004cdb
 8004974:	08004bd1 	.word	0x08004bd1
 8004978:	08004cdb 	.word	0x08004cdb
 800497c:	08004cdb 	.word	0x08004cdb
 8004980:	08004cdb 	.word	0x08004cdb
 8004984:	08004cdb 	.word	0x08004cdb
 8004988:	08004cdb 	.word	0x08004cdb
 800498c:	08004cdb 	.word	0x08004cdb
 8004990:	08004cdb 	.word	0x08004cdb
 8004994:	08004cdb 	.word	0x08004cdb
 8004998:	08004cdb 	.word	0x08004cdb
 800499c:	08004cdb 	.word	0x08004cdb
 80049a0:	08004cdb 	.word	0x08004cdb
 80049a4:	08004cdb 	.word	0x08004cdb
 80049a8:	08004cdb 	.word	0x08004cdb
 80049ac:	08004cdb 	.word	0x08004cdb
 80049b0:	08004cdb 	.word	0x08004cdb
 80049b4:	08004cdb 	.word	0x08004cdb
 80049b8:	08004cdb 	.word	0x08004cdb
 80049bc:	08004cdb 	.word	0x08004cdb
 80049c0:	08004cdb 	.word	0x08004cdb
 80049c4:	08004cdb 	.word	0x08004cdb
 80049c8:	08004cdb 	.word	0x08004cdb
 80049cc:	08004cdb 	.word	0x08004cdb
 80049d0:	08004cdb 	.word	0x08004cdb
 80049d4:	08004cdb 	.word	0x08004cdb
 80049d8:	08004cdb 	.word	0x08004cdb
 80049dc:	08004cdb 	.word	0x08004cdb
 80049e0:	08004cdb 	.word	0x08004cdb
 80049e4:	08004cdb 	.word	0x08004cdb
 80049e8:	08004cdb 	.word	0x08004cdb
 80049ec:	08004cdb 	.word	0x08004cdb
 80049f0:	08004cdb 	.word	0x08004cdb
 80049f4:	08004cdb 	.word	0x08004cdb
 80049f8:	08004cdb 	.word	0x08004cdb
 80049fc:	08004cdb 	.word	0x08004cdb
 8004a00:	08004cdb 	.word	0x08004cdb
 8004a04:	08004cdb 	.word	0x08004cdb
 8004a08:	08004cdb 	.word	0x08004cdb
 8004a0c:	08004cdb 	.word	0x08004cdb
 8004a10:	08004cdb 	.word	0x08004cdb
 8004a14:	08004cdb 	.word	0x08004cdb
 8004a18:	08004cdb 	.word	0x08004cdb
 8004a1c:	08004cdb 	.word	0x08004cdb
 8004a20:	08004cdb 	.word	0x08004cdb
 8004a24:	08004a9b 	.word	0x08004a9b
 8004a28:	08004cdb 	.word	0x08004cdb
 8004a2c:	08004cdb 	.word	0x08004cdb
 8004a30:	08004cdb 	.word	0x08004cdb
 8004a34:	08004cdb 	.word	0x08004cdb
 8004a38:	08004cdb 	.word	0x08004cdb
 8004a3c:	08004cdb 	.word	0x08004cdb
 8004a40:	08004cdb 	.word	0x08004cdb
 8004a44:	08004cdb 	.word	0x08004cdb
 8004a48:	08004cdb 	.word	0x08004cdb
 8004a4c:	08004cdb 	.word	0x08004cdb
 8004a50:	08004cdb 	.word	0x08004cdb
 8004a54:	08004cdb 	.word	0x08004cdb
 8004a58:	08004cdb 	.word	0x08004cdb
 8004a5c:	08004ccd 	.word	0x08004ccd
 8004a60:	08004cdb 	.word	0x08004cdb
 8004a64:	08004cdb 	.word	0x08004cdb
 8004a68:	08004cdb 	.word	0x08004cdb
 8004a6c:	08004cdb 	.word	0x08004cdb
 8004a70:	08004cdb 	.word	0x08004cdb
 8004a74:	08004cdb 	.word	0x08004cdb
 8004a78:	08004cdb 	.word	0x08004cdb
 8004a7c:	08004cdb 	.word	0x08004cdb
 8004a80:	08004c27 	.word	0x08004c27
 8004a84:	08004c49 	.word	0x08004c49
 8004a88:	08004c6b 	.word	0x08004c6b
 8004a8c:	08004c8d 	.word	0x08004c8d
 8004a90:	08004caf 	.word	0x08004caf
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8004a94:	2301      	movs	r3, #1
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004a98:	e126      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	2244      	movs	r2, #68	; 0x44
 8004aa0:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004aa6:	e11f      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004aae:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <CO_LSSslave_process+0x1dc>
 8004abc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	da02      	bge.n	8004aca <CO_LSSslave_process+0x1e2>
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2bff      	cmp	r3, #255	; 0xff
 8004ac8:	d104      	bne.n	8004ad4 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	7cfa      	ldrb	r2, [r7, #19]
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004ae4:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004aee:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8004af0:	2301      	movs	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004af4:	e0f8      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80ef 	beq.w	8004cde <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004b06:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004b0e:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004b1c:	7f7b      	ldrb	r3, [r7, #29]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d121      	bne.n	8004b66 <CO_LSSslave_process+0x27e>
 8004b22:	7f3b      	ldrb	r3, [r7, #28]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d01e      	beq.n	8004b66 <CO_LSSslave_process+0x27e>
 8004b28:	7f3b      	ldrb	r3, [r7, #28]
 8004b2a:	2b09      	cmp	r3, #9
 8004b2c:	d81b      	bhi.n	8004b66 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8004b2e:	7f3b      	ldrb	r3, [r7, #28]
 8004b30:	4a77      	ldr	r2, [pc, #476]	; (8004d10 <CO_LSSslave_process+0x428>)
 8004b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b36:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b40:	8b79      	ldrh	r1, [r7, #26]
 8004b42:	4610      	mov	r0, r2
 8004b44:	4798      	blx	r3
 8004b46:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d004      	beq.n	8004b58 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	8b7a      	ldrh	r2, [r7, #26]
 8004b54:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004b56:	e009      	b.n	8004b6c <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8004b58:	23ff      	movs	r3, #255	; 0xff
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004b64:	e002      	b.n	8004b6c <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004b76:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004b80:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004b8a:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b90:	e0aa      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a3 	beq.w	8004ce2 <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a0 	beq.w	8004ce6 <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	8bfb      	ldrh	r3, [r7, #30]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004bc8:	8bf9      	ldrh	r1, [r7, #30]
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8004bce:	e08a      	b.n	8004ce6 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be4:	e011      	b.n	8004c0a <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8004bf2:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	4798      	blx	r3
 8004bfc:	6238      	str	r0, [r7, #32]
                if (!result) {
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8004c04:	2302      	movs	r3, #2
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c14:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c1e:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8004c20:	2301      	movs	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c24:	e060      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c30:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	3306      	adds	r3, #6
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8004c42:	2301      	movs	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c46:	e04f      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c52:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	3306      	adds	r3, #6
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8004c64:	2301      	movs	r3, #1
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c68:	e03e      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c74:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	3306      	adds	r3, #6
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8004c86:	2301      	movs	r3, #1
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c8a:	e02d      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004c96:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	3306      	adds	r3, #6
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cac:	e01c      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004cb8:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8004cc4:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cca:	e00d      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	224f      	movs	r2, #79	; 0x4f
 8004cd2:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cd8:	e006      	b.n	8004ce8 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 8004cda:	bf00      	nop
 8004cdc:	e004      	b.n	8004ce8 <CO_LSSslave_process+0x400>
                break;
 8004cde:	bf00      	nop
 8004ce0:	e002      	b.n	8004ce8 <CO_LSSslave_process+0x400>
                break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <CO_LSSslave_process+0x400>
            break;
 8004ce6:	bf00      	nop
        }
        }

        if(CANsend) {
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f001 f95f 	bl	8005fbc <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3730      	adds	r7, #48	; 0x30
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	0800ac04 	.word	0x0800ac04

08004d14 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b09      	cmp	r3, #9
 8004d3e:	d807      	bhi.n	8004d50 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	5cd2      	ldrb	r2, [r2, r3]
 8004d46:	7bbb      	ldrb	r3, [r7, #14]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <CO_isError+0x40>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <CO_isError+0x42>
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <CO_getErrorRegister+0x1e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <CO_getErrorRegister+0x1e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	e000      	b.n	8004d82 <CO_getErrorRegister+0x20>
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <CO_NMT_getInternalState+0x16>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8004da2:	e000      	b.n	8004da6 <CO_NMT_getInternalState+0x18>
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <CO_LSSslave_getState+0x14>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7c1b      	ldrb	r3, [r3, #16]
 8004dc4:	e000      	b.n	8004dc8 <CO_LSSslave_getState+0x16>
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8004dea:	2140      	movs	r1, #64	; 0x40
 8004dec:	2001      	movs	r0, #1
 8004dee:	f004 fc8d 	bl	800970c <calloc>
 8004df2:	4603      	mov	r3, r0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8103 	beq.w	8005004 <CO_new+0x230>
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3340      	adds	r3, #64	; 0x40
 8004e02:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8004e04:	212c      	movs	r1, #44	; 0x2c
 8004e06:	2001      	movs	r0, #1
 8004e08:	f004 fc80 	bl	800970c <calloc>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	611a      	str	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80f5 	beq.w	8005008 <CO_new+0x234>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	332c      	adds	r3, #44	; 0x2c
 8004e22:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8004e24:	2308      	movs	r3, #8
 8004e26:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8004e28:	2128      	movs	r1, #40	; 0x28
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f004 fc6e 	bl	800970c <calloc>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	615a      	str	r2, [r3, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80e5 	beq.w	800500c <CO_new+0x238>
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3328      	adds	r3, #40	; 0x28
 8004e46:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8004e48:	7afb      	ldrb	r3, [r7, #11]
 8004e4a:	211c      	movs	r1, #28
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f004 fc5d 	bl	800970c <calloc>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	619a      	str	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80d6 	beq.w	8005010 <CO_new+0x23c>
 8004e64:	7afa      	ldrb	r2, [r7, #11]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8004e76:	2150      	movs	r1, #80	; 0x50
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f004 fc47 	bl	800970c <calloc>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	61da      	str	r2, [r3, #28]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80c2 	beq.w	8005014 <CO_new+0x240>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3350      	adds	r3, #80	; 0x50
 8004e94:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8004e96:	2311      	movs	r3, #17
 8004e98:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8004e9a:	7abb      	ldrb	r3, [r7, #10]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d912      	bls.n	8004ec6 <CO_new+0xf2>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8004ea0:	7abb      	ldrb	r3, [r7, #10]
 8004ea2:	2108      	movs	r1, #8
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f004 fc31 	bl	800970c <calloc>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80ae 	beq.w	8005018 <CO_new+0x244>
 8004ebc:	7abb      	ldrb	r3, [r7, #10]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8004ec6:	21ac      	movs	r1, #172	; 0xac
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f004 fc1f 	bl	800970c <calloc>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 809e 	beq.w	800501c <CO_new+0x248>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	33ac      	adds	r3, #172	; 0xac
 8004ee4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8004ee6:	217c      	movs	r1, #124	; 0x7c
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f004 fc0f 	bl	800970c <calloc>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8090 	beq.w	8005020 <CO_new+0x24c>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	337c      	adds	r3, #124	; 0x7c
 8004f04:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8004f06:	212c      	movs	r1, #44	; 0x2c
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f004 fbff 	bl	800970c <calloc>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	461a      	mov	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8082 	beq.w	8005024 <CO_new+0x250>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	332c      	adds	r3, #44	; 0x2c
 8004f24:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8004f26:	2160      	movs	r1, #96	; 0x60
 8004f28:	2001      	movs	r0, #1
 8004f2a:	f004 fbef 	bl	800970c <calloc>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461a      	mov	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d074      	beq.n	8005028 <CO_new+0x254>
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	3360      	adds	r3, #96	; 0x60
 8004f42:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8004f44:	210c      	movs	r1, #12
 8004f46:	2001      	movs	r0, #1
 8004f48:	f004 fbe0 	bl	800970c <calloc>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	635a      	str	r2, [r3, #52]	; 0x34
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d067      	beq.n	800502c <CO_new+0x258>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8004f62:	2174      	movs	r1, #116	; 0x74
 8004f64:	2001      	movs	r0, #1
 8004f66:	f004 fbd1 	bl	800970c <calloc>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d05a      	beq.n	8005030 <CO_new+0x25c>
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3374      	adds	r3, #116	; 0x74
 8004f7e:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
        ON_MULTI_OD(uint8_t RX_CNT_LSS_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_MST = 0);
        if (CO_GET_CNT(LSS_MST) == 1) {
            CO_alloc_break_on_fail(co->LSSmaster, CO_GET_CNT(LSS_MST), sizeof(*co->LSSmaster));
 8004f80:	2128      	movs	r1, #40	; 0x28
 8004f82:	2001      	movs	r0, #1
 8004f84:	f004 fbc2 	bl	800970c <calloc>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d04d      	beq.n	8005034 <CO_new+0x260>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	3328      	adds	r3, #40	; 0x28
 8004f9c:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8004f9e:	2138      	movs	r1, #56	; 0x38
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	f004 fbb3 	bl	800970c <calloc>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d040      	beq.n	8005038 <CO_new+0x264>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3338      	adds	r3, #56	; 0x38
 8004fba:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8004fbc:	210c      	movs	r1, #12
 8004fbe:	200f      	movs	r0, #15
 8004fc0:	f004 fba4 	bl	800970c <calloc>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d033      	beq.n	800503c <CO_new+0x268>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	33b4      	adds	r3, #180	; 0xb4
 8004fd8:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8004fda:	2118      	movs	r1, #24
 8004fdc:	2007      	movs	r0, #7
 8004fde:	f004 fb95 	bl	800970c <calloc>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d026      	beq.n	8005040 <CO_new+0x26c>
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	33a8      	adds	r3, #168	; 0xa8
 8004ff6:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e01e      	b.n	8005042 <CO_new+0x26e>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8005004:	bf00      	nop
 8005006:	e01c      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005008:	bf00      	nop
 800500a:	e01a      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 800500c:	bf00      	nop
 800500e:	e018      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8005010:	bf00      	nop
 8005012:	e016      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8005014:	bf00      	nop
 8005016:	e014      	b.n	8005042 <CO_new+0x26e>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005018:	bf00      	nop
 800501a:	e012      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800501c:	bf00      	nop
 800501e:	e010      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8005020:	bf00      	nop
 8005022:	e00e      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8005024:	bf00      	nop
 8005026:	e00c      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005028:	bf00      	nop
 800502a:	e00a      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800502c:	bf00      	nop
 800502e:	e008      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8005030:	bf00      	nop
 8005032:	e006      	b.n	8005042 <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LSSmaster, CO_GET_CNT(LSS_MST), sizeof(*co->LSSmaster));
 8005034:	bf00      	nop
 8005036:	e004      	b.n	8005042 <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8005040:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <CO_new+0x27a>
        CO_delete(co);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f80b 	bl	8005064 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <CO_new+0x286>
        *heapMemoryUsed = mem;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <CO_delete>:

void CO_delete(CO_t *co) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d053      	beq.n	800511a <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fed8 	bl	8005e2c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4618      	mov	r0, r3
 8005082:	f004 fd43 	bl	8009b0c <free>
    CO_free(co->CANrx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fd3e 	bl	8009b0c <free>
    CO_free(co->CANmodule);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fd39 	bl	8009b0c <free>
#if (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII
    CO_free(co->gtwa);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	4618      	mov	r0, r3
 80050a0:	f004 fd34 	bl	8009b0c <free>
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	4618      	mov	r0, r3
 80050aa:	f004 fd2f 	bl	8009b0c <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fd2a 	bl	8009b0c <free>
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	4618      	mov	r0, r3
 80050be:	f004 fd25 	bl	8009b0c <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	4618      	mov	r0, r3
 80050c8:	f004 fd20 	bl	8009b0c <free>
#endif

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 fd1b 	bl	8009b0c <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f004 fd16 	bl	8009b0c <free>

    /* Emergency */
    CO_free(co->em);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f004 fd11 	bl	8009b0c <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f004 fd0c 	bl	8009b0c <free>
#if (CO_CONFIG_NODE_GUARDING) & CO_CONFIG_NODE_GUARDING_MASTER_ENABLE
    CO_free(co->NGmaster);
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f004 fd07 	bl	8009b0c <free>
    CO_free(co->HBcons);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	4618      	mov	r0, r3
 8005104:	f004 fd02 	bl	8009b0c <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	4618      	mov	r0, r3
 800510e:	f004 fcfd 	bl	8009b0c <free>

    /* CANopen object */
    CO_free(co);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f004 fcfa 	bl	8009b0c <free>
 8005118:	e000      	b.n	800511c <CO_delete+0xb8>
        return;
 800511a:	bf00      	nop
}
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8005122:	b580      	push	{r7, lr}
 8005124:	b08a      	sub	sp, #40	; 0x28
 8005126:	af04      	add	r7, sp, #16
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <CO_CANinit+0x1a>
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	e01a      	b.n	8005172 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8005144:	68b8      	ldr	r0, [r7, #8]
 8005146:	f000 fd81 	bl	8005c4c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6858      	ldr	r0, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	9202      	str	r2, [sp, #8]
 800515a:	2207      	movs	r2, #7
 800515c:	9201      	str	r2, [sp, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	230f      	movs	r3, #15
 8005162:	460a      	mov	r2, r1
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	f000 fd99 	bl	8005c9c <CO_CANmodule_init>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 800516e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b08c      	sub	sp, #48	; 0x30
 800517e:	af06      	add	r7, sp, #24
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	e01a      	b.n	80051ca <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6852      	ldr	r2, [r2, #4]
 80051a0:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80051a4:	9105      	str	r1, [sp, #20]
 80051a6:	2105      	movs	r1, #5
 80051a8:	9104      	str	r1, [sp, #16]
 80051aa:	9203      	str	r2, [sp, #12]
 80051ac:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80051b0:	9202      	str	r2, [sp, #8]
 80051b2:	220d      	movs	r2, #13
 80051b4:	9201      	str	r2, [sp, #4]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	f7ff fb1d 	bl	80047fc <CO_LSSslave_init>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 80051c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 80051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d6:	b093      	sub	sp, #76	; 0x4c
 80051d8:	af0a      	add	r7, sp, #40	; 0x28
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	e194      	b.n	8005518 <CO_CANopenInit+0x344>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <CO_CANopenInit+0x26>
        em = co->em;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8005200:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005204:	2bff      	cmp	r3, #255	; 0xff
 8005206:	d103      	bne.n	8005210 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e00a      	b.n	8005226 <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8005210:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <CO_CANopenInit+0x4c>
 8005218:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 800521c:	2b00      	cmp	r3, #0
 800521e:	da02      	bge.n	8005226 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	e178      	b.n	8005518 <CO_CANopenInit+0x344>
    }
    else { /* MISRA C 2004 14.10 */ }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe ff4a 	bl	80040c4 <CO_LEDs_init>
 8005230:	4603      	mov	r3, r0
 8005232:	747b      	strb	r3, [r7, #17]
        if (err) { return err; }
 8005234:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <CO_CANopenInit+0x6e>
 800523c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005240:	e16a      	b.n	8005518 <CO_CANopenInit+0x344>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800524a:	f06f 0312 	mvn.w	r3, #18
 800524e:	e163      	b.n	8005518 <CO_CANopenInit+0x344>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	69d8      	ldr	r0, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8005258:	4b9f      	ldr	r3, [pc, #636]	; (80054d8 <CO_CANopenInit+0x304>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8005266:	4b9c      	ldr	r3, [pc, #624]	; (80054d8 <CO_CANopenInit+0x304>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 800526c:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 800526e:	4a9a      	ldr	r2, [pc, #616]	; (80054d8 <CO_CANopenInit+0x304>)
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8005274:	3218      	adds	r2, #24
 8005276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005278:	9105      	str	r1, [sp, #20]
 800527a:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 800527e:	9104      	str	r1, [sp, #16]
 8005280:	9203      	str	r2, [sp, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	9202      	str	r2, [sp, #8]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	2311      	movs	r3, #17
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	4633      	mov	r3, r6
 800528e:	462a      	mov	r2, r5
 8005290:	4621      	mov	r1, r4
 8005292:	f7fb fab5 	bl	8000800 <CO_EM_init>
 8005296:	4603      	mov	r3, r0
 8005298:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) { return err; }
 800529a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <CO_CANopenInit+0xd4>
 80052a2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80052a6:	e137      	b.n	8005518 <CO_CANopenInit+0x344>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 80052ac:	4b8a      	ldr	r3, [pc, #552]	; (80054d8 <CO_CANopenInit+0x304>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 80052b2:	f103 0590 	add.w	r5, r3, #144	; 0x90
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	6852      	ldr	r2, [r2, #4]
 80052be:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 80052c2:	b289      	uxth	r1, r1
 80052c4:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 80052c8:	b289      	uxth	r1, r1
 80052ca:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 80052ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80052d0:	9008      	str	r0, [sp, #32]
 80052d2:	9107      	str	r1, [sp, #28]
 80052d4:	2104      	movs	r1, #4
 80052d6:	9106      	str	r1, [sp, #24]
 80052d8:	9205      	str	r2, [sp, #20]
 80052da:	2200      	movs	r2, #0
 80052dc:	9204      	str	r2, [sp, #16]
 80052de:	2200      	movs	r2, #0
 80052e0:	9203      	str	r2, [sp, #12]
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	4633      	mov	r3, r6
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4629      	mov	r1, r5
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7fc f911 	bl	800151c <CO_NMT_init>
 80052fa:	4603      	mov	r3, r0
 80052fc:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) { return err; }
 80052fe:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <CO_CANopenInit+0x138>
 8005306:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800530a:	e105      	b.n	8005518 <CO_CANopenInit+0x344>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6958      	ldr	r0, [r3, #20]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8005314:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <CO_CANopenInit+0x304>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 800531a:	3384      	adds	r3, #132	; 0x84
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	6852      	ldr	r2, [r2, #4]
 8005320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005322:	9103      	str	r1, [sp, #12]
 8005324:	2105      	movs	r1, #5
 8005326:	9102      	str	r1, [sp, #8]
 8005328:	9201      	str	r2, [sp, #4]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	2308      	movs	r3, #8
 800532e:	4622      	mov	r2, r4
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	f7fb fd98 	bl	8000e66 <CO_HBconsumer_init>
 8005336:	4603      	mov	r3, r0
 8005338:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) { return err; }
 800533a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <CO_CANopenInit+0x174>
 8005342:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005346:	e0e7      	b.n	8005518 <CO_CANopenInit+0x344>
    if (err) { return err; }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8005348:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <CO_CANopenInit+0x304>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	33b4      	adds	r3, #180	; 0xb4
 8005350:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005352:	2300      	movs	r3, #0
 8005354:	837b      	strh	r3, [r7, #26]
 8005356:	e034      	b.n	80053c2 <CO_CANopenInit+0x1ee>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005360:	21ac      	movs	r1, #172	; 0xac
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	18d6      	adds	r6, r2, r3
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	f102 030c 	add.w	r3, r2, #12
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	8b79      	ldrh	r1, [r7, #26]
 8005376:	3103      	adds	r1, #3
 8005378:	b289      	uxth	r1, r1
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	6840      	ldr	r0, [r0, #4]
 800537e:	8b7c      	ldrh	r4, [r7, #26]
 8005380:	3402      	adds	r4, #2
 8005382:	b2a4      	uxth	r4, r4
 8005384:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 8005388:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800538a:	9505      	str	r5, [sp, #20]
 800538c:	9404      	str	r4, [sp, #16]
 800538e:	9003      	str	r0, [sp, #12]
 8005390:	9102      	str	r1, [sp, #8]
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4663      	mov	r3, ip
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	4630      	mov	r0, r6
 80053a0:	f7fd f8e8 	bl	8002574 <CO_SDOserver_init>
 80053a4:	4603      	mov	r3, r0
 80053a6:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) { return err; }
 80053a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <CO_CANopenInit+0x1e2>
 80053b0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80053b4:	e0b0      	b.n	8005518 <CO_CANopenInit+0x344>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80053b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3301      	adds	r3, #1
 80053be:	b29b      	uxth	r3, r3
 80053c0:	837b      	strh	r3, [r7, #26]
 80053c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	ddc6      	ble.n	8005358 <CO_CANopenInit+0x184>
        }
    }

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    if (CO_GET_CNT(SDO_CLI) > 0) {
        OD_entry_t *SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 80053ca:	4b43      	ldr	r3, [pc, #268]	; (80054d8 <CO_CANopenInit+0x304>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	33c0      	adds	r3, #192	; 0xc0
 80053d2:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 80053d4:	2300      	movs	r3, #0
 80053d6:	827b      	strh	r3, [r7, #18]
 80053d8:	e032      	b.n	8005440 <CO_CANopenInit+0x26c>
            err = CO_SDOclient_init(&co->SDOclient[i],
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80053de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80053e2:	4613      	mov	r3, r2
 80053e4:	015b      	lsls	r3, r3, #5
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	18ce      	adds	r6, r1, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	f102 030c 	add.w	r3, r2, #12
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	8a79      	ldrh	r1, [r7, #18]
 80053fa:	3104      	adds	r1, #4
 80053fc:	b289      	uxth	r1, r1
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	6840      	ldr	r0, [r0, #4]
 8005402:	8a7c      	ldrh	r4, [r7, #18]
 8005404:	3403      	adds	r4, #3
 8005406:	b2a4      	uxth	r4, r4
 8005408:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 800540c:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800540e:	9504      	str	r5, [sp, #16]
 8005410:	9403      	str	r4, [sp, #12]
 8005412:	9002      	str	r0, [sp, #8]
 8005414:	9101      	str	r1, [sp, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	4663      	mov	r3, ip
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	4630      	mov	r0, r6
 800541e:	f7fc fd7c 	bl	8001f1a <CO_SDOclient_init>
 8005422:	4603      	mov	r3, r0
 8005424:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            if (err) { return err; }
 8005426:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <CO_CANopenInit+0x260>
 800542e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005432:	e071      	b.n	8005518 <CO_CANopenInit+0x344>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 8005434:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005438:	b29b      	uxth	r3, r3
 800543a:	3301      	adds	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	827b      	strh	r3, [r7, #18]
 8005440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005444:	2b00      	cmp	r3, #0
 8005446:	ddc8      	ble.n	80053da <CO_CANopenInit+0x206>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <CO_CANopenInit+0x304>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8005452:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2302      	movs	r3, #2
 8005460:	f7fe fd18 	bl	8003e94 <CO_TIME_init>
 8005464:	4603      	mov	r3, r0
 8005466:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) { return err; }
 8005468:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <CO_CANopenInit+0x2a2>
 8005470:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005474:	e050      	b.n	8005518 <CO_CANopenInit+0x344>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b1d      	ldr	r5, [r3, #48]	; 0x30
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <CO_CANopenInit+0x304>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005480:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <CO_CANopenInit+0x304>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800548a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <CO_CANopenInit+0x304>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005494:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005496:	4a10      	ldr	r2, [pc, #64]	; (80054d8 <CO_CANopenInit+0x304>)
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 800549c:	32a8      	adds	r2, #168	; 0xa8
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	6849      	ldr	r1, [r1, #4]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	6840      	ldr	r0, [r0, #4]
 80054a6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80054a8:	9406      	str	r4, [sp, #24]
 80054aa:	2400      	movs	r4, #0
 80054ac:	9405      	str	r4, [sp, #20]
 80054ae:	9004      	str	r0, [sp, #16]
 80054b0:	2001      	movs	r0, #1
 80054b2:	9003      	str	r0, [sp, #12]
 80054b4:	9102      	str	r1, [sp, #8]
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4663      	mov	r3, ip
 80054bc:	4632      	mov	r2, r6
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4628      	mov	r0, r5
 80054c2:	f7fe fa1f 	bl	8003904 <CO_SYNC_init>
 80054c6:	4603      	mov	r3, r0
 80054c8:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) { return err; }
 80054ca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <CO_CANopenInit+0x308>
 80054d2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80054d6:	e01f      	b.n	8005518 <CO_CANopenInit+0x344>
 80054d8:	2000017c 	.word	0x2000017c
    }
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    if (CO_GET_CNT(LSS_MST) == 1) {
        err = CO_LSSmaster_init(co->LSSmaster,
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f240 71e5 	movw	r1, #2021	; 0x7e5
 80054ec:	9103      	str	r1, [sp, #12]
 80054ee:	2106      	movs	r1, #6
 80054f0:	9102      	str	r1, [sp, #8]
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	230e      	movs	r3, #14
 80054fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005500:	f7fe ffbc 	bl	800447c <CO_LSSmaster_init>
 8005504:	4603      	mov	r3, r0
 8005506:	747b      	strb	r3, [r7, #17]
                                CO_GET_CO(RX_IDX_LSS_MST),
                                CO_CAN_ID_LSS_SLV,
                                co->CANmodule,
                                CO_GET_CO(TX_IDX_LSS_MST),
                                CO_CAN_ID_LSS_MST);
        if (err) { return err; }
 8005508:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <CO_CANopenInit+0x342>
 8005510:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005514:	e000      	b.n	8005518 <CO_CANopenInit+0x344>
            if (err) { return err; }
        }
    }
#endif

    return CO_ERROR_NO;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3724      	adds	r7, #36	; 0x24
 800551c:	46bd      	mov	sp, r7
 800551e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005520 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005534:	f04f 33ff 	mov.w	r3, #4294967295
 8005538:	e015      	b.n	8005566 <CO_CANopenInitPDO+0x46>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <CO_CANopenInitPDO+0x30>
 8005540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005544:	2b00      	cmp	r3, #0
 8005546:	db03      	blt.n	8005550 <CO_CANopenInitPDO+0x30>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d009      	beq.n	8005564 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <CO_CANopenInitPDO+0x3e>
 8005558:	f06f 0312 	mvn.w	r3, #18
 800555c:	e003      	b.n	8005566 <CO_CANopenInitPDO+0x46>
 800555e:	f04f 33ff 	mov.w	r3, #4294967295
 8005562:	e000      	b.n	8005566 <CO_CANopenInitPDO+0x46>
            if (err) { return err; }
        }
    }
#endif

    return CO_ERROR_NO;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8005572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005574:	b097      	sub	sp, #92	; 0x5c
 8005576:	af08      	add	r7, sp, #32
 8005578:	61f8      	str	r0, [r7, #28]
 800557a:	61b9      	str	r1, [r7, #24]
 800557c:	617a      	str	r2, [r7, #20]
 800557e:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fbff 	bl	8004d8e <CO_NMT_getInternalState>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8005596:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 800559a:	2b7f      	cmp	r3, #127	; 0x7f
 800559c:	d003      	beq.n	80055a6 <CO_process+0x34>
 800559e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d101      	bne.n	80055aa <CO_process+0x38>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <CO_process+0x3a>
 80055aa:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fdab 	bl	800610e <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff f993 	bl	80048e8 <CO_LSSslave_process>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <CO_process+0x5c>
            reset = CO_RESET_COMM;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	8a5b      	ldrh	r3, [r3, #18]
 80055da:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 80055dc:	2300      	movs	r3, #0
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fbe4 	bl	8004db2 <CO_LSSslave_getState>
 80055ea:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 80055f0:	2301      	movs	r3, #1
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <CO_process+0x92>
 80055fe:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8005602:	e000      	b.n	8005606 <CO_process+0x94>
 8005604:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8005606:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005608:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8005618:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800561a:	f240 3303 	movw	r3, #771	; 0x303
 800561e:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2118      	movs	r1, #24
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fb6b 	bl	8004d14 <CO_isError>
 800563e:	4605      	mov	r5, r0
 8005640:	e000      	b.n	8005644 <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8005642:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d113      	bne.n	8005672 <CO_process+0x100>
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	211b      	movs	r1, #27
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fb5f 	bl	8004d14 <CO_isError>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	211c      	movs	r1, #28
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fb56 	bl	8004d14 <CO_isError>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <CO_process+0x102>
 8005672:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8005674:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fb71 	bl	8004d62 <CO_getErrorRegister>
 8005680:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	9307      	str	r3, [sp, #28]
 8005692:	2300      	movs	r3, #0
 8005694:	9306      	str	r3, [sp, #24]
 8005696:	9205      	str	r2, [sp, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	9503      	str	r5, [sp, #12]
 800569e:	2300      	movs	r3, #0
 80056a0:	9302      	str	r3, [sp, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	4622      	mov	r2, r4
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7fe fd1f 	bl	80040f4 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <CO_process+0x152>
        return reset;
 80056be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056c2:	e047      	b.n	8005754 <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	69d8      	ldr	r0, [r3, #28]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ce:	f7fb f977 	bl	80009c0 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	6918      	ldr	r0, [r3, #16]
 80056d6:	f107 0121 	add.w	r1, r7, #33	; 0x21
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	f7fb ffdb 	bl	8001698 <CO_NMT_process>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80056e8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 80056ec:	2b7f      	cmp	r3, #127	; 0x7f
 80056ee:	d003      	beq.n	80056f8 <CO_process+0x186>
 80056f0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d101      	bne.n	80056fc <CO_process+0x18a>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <CO_process+0x18c>
 80056fc:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005700:	2300      	movs	r3, #0
 8005702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005706:	e011      	b.n	800572c <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005710:	21ac      	movs	r1, #172	; 0xac
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	18d0      	adds	r0, r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571e:	f7fd fa05 	bl	8002b2c <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005726:	3301      	adds	r3, #1
 8005728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800572c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0e9      	beq.n	8005708 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	6958      	ldr	r0, [r3, #20]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573e:	f7fb fcf9 	bl	8001134 <CO_HBconsumer_process>
                                  timerNext_us);
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fc22 	bl	8003f94 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8005750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005754:	4618      	mov	r0, r3
 8005756:	373c      	adds	r7, #60	; 0x3c
 8005758:	46bd      	mov	sp, r7
 800575a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800575c <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d12e      	bne.n	80057d2 <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fb08 	bl	8004d8e <CO_NMT_getInternalState>
 800577e:	4603      	mov	r3, r0
 8005780:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8005782:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005786:	2b7f      	cmp	r3, #127	; 0x7f
 8005788:	d003      	beq.n	8005792 <CO_process_SYNC+0x36>
 800578a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800578e:	2b05      	cmp	r3, #5
 8005790:	d101      	bne.n	8005796 <CO_process_SYNC+0x3a>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <CO_process_SYNC+0x3c>
 8005796:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8005798:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	f7fe f9d6 	bl	8003b54 <CO_SYNC_process>
 80057a8:	4603      	mov	r3, r0
 80057aa:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d009      	beq.n	80057c6 <CO_process_SYNC+0x6a>
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	dc0f      	bgt.n	80057d6 <CO_process_SYNC+0x7a>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <CO_process_SYNC+0x7e>
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d000      	beq.n	80057c0 <CO_process_SYNC+0x64>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
                break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 80057be:	e00a      	b.n	80057d6 <CO_process_SYNC+0x7a>
                syncWas = true;
 80057c0:	2301      	movs	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
                break;
 80057c4:	e00a      	b.n	80057dc <CO_process_SYNC+0x80>
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fc39 	bl	8006042 <CO_CANclearPendingSyncPDOs>
                break;
 80057d0:	e004      	b.n	80057dc <CO_process_SYNC+0x80>
        }
    }
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <CO_process_SYNC+0x80>
                break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <CO_process_SYNC+0x80>
                break;
 80057da:	bf00      	nop

    return syncWas;
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	log_printf("CANopenNodeSTM32 init...\n");
 80057f0:	4815      	ldr	r0, [pc, #84]	; (8005848 <canopen_app_init+0x60>)
 80057f2:	f004 fb3f 	bl	8009e74 <puts>
    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <canopen_app_init+0x64>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8005800:	f107 0308 	add.w	r3, r7, #8
 8005804:	4619      	mov	r1, r3
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fae4 	bl	8004dd4 <CO_new>
 800580c:	4603      	mov	r3, r0
 800580e:	4a10      	ldr	r2, [pc, #64]	; (8005850 <canopen_app_init+0x68>)
 8005810:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <canopen_app_init+0x68>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <canopen_app_init+0x3c>
        log_printf("Error: Can't allocate memory\n");
 800581a:	480e      	ldr	r0, [pc, #56]	; (8005854 <canopen_app_init+0x6c>)
 800581c:	f004 fb2a 	bl	8009e74 <puts>
        return 1;
 8005820:	2301      	movs	r3, #1
 8005822:	e00c      	b.n	800583e <canopen_app_init+0x56>
    } else {
        //log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
    	log_printf("Allocated %lu bytes for CANopen objects\n", (unsigned long)heapMemoryUsed);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4619      	mov	r1, r3
 8005828:	480b      	ldr	r0, [pc, #44]	; (8005858 <canopen_app_init+0x70>)
 800582a:	f004 fa9d 	bl	8009d68 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <canopen_app_init+0x64>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a07      	ldr	r2, [pc, #28]	; (8005850 <canopen_app_init+0x68>)
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8005838:	f000 f810 	bl	800585c <canopen_app_resetCommunication>
    return 0;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	0800a854 	.word	0x0800a854
 800584c:	2000020c 	.word	0x2000020c
 8005850:	20000210 	.word	0x20000210
 8005854:	0800a870 	.word	0x0800a870
 8005858:	0800a890 	.word	0x0800a890

0800585c <canopen_app_resetCommunication>:
int canopen_app_resetCommunication() {
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b08f      	sub	sp, #60	; 0x3c
 8005860:	af08      	add	r7, sp, #32
    log_printf("CANopenNode - Reset communication...\n");
 8005862:	4891      	ldr	r0, [pc, #580]	; (8005aa8 <canopen_app_resetCommunication+0x24c>)
 8005864:	f004 fb06 	bl	8009e74 <puts>

    CO->CANmodule->CANnormal = false;
 8005868:	4b90      	ldr	r3, [pc, #576]	; (8005aac <canopen_app_resetCommunication+0x250>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	615a      	str	r2, [r3, #20]

    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005872:	4b8f      	ldr	r3, [pc, #572]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f9e8 	bl	8005c4c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 800587c:	4b8b      	ldr	r3, [pc, #556]	; (8005aac <canopen_app_resetCommunication+0x250>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fad2 	bl	8005e2c <CO_CANmodule_disable>

    // Добавление отладочных сообщений
    log_printf("Disabling CAN module...\n");
 8005888:	488a      	ldr	r0, [pc, #552]	; (8005ab4 <canopen_app_resetCommunication+0x258>)
 800588a:	f004 faf3 	bl	8009e74 <puts>

    err = CO_CANinit(CO, canopenNodeSTM32, 0);
 800588e:	4b87      	ldr	r3, [pc, #540]	; (8005aac <canopen_app_resetCommunication+0x250>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a87      	ldr	r2, [pc, #540]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	2200      	movs	r2, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fc42 	bl	8005122 <CO_CANinit>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b85      	ldr	r3, [pc, #532]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80058a4:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80058a6:	4b84      	ldr	r3, [pc, #528]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80058a8:	f993 3000 	ldrsb.w	r3, [r3]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <canopen_app_resetCommunication+0x66>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80058b0:	4b81      	ldr	r3, [pc, #516]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80058b2:	f993 3000 	ldrsb.w	r3, [r3]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4880      	ldr	r0, [pc, #512]	; (8005abc <canopen_app_resetCommunication+0x260>)
 80058ba:	f004 fa55 	bl	8009d68 <iprintf>
        return 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	e0ed      	b.n	8005a9e <canopen_app_resetCommunication+0x242>
    }

    log_printf("CANopen CAN module state after init: %d\n", CO->CANmodule->CANnormal);
 80058c2:	4b7a      	ldr	r3, [pc, #488]	; (8005aac <canopen_app_resetCommunication+0x250>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	4619      	mov	r1, r3
 80058cc:	487c      	ldr	r0, [pc, #496]	; (8005ac0 <canopen_app_resetCommunication+0x264>)
 80058ce:	f004 fa4b 	bl	8009d68 <iprintf>

    CO_LSS_address_t lssAddress = {
        .identity = {
            .vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80058d2:	4b7c      	ldr	r3, [pc, #496]	; (8005ac4 <canopen_app_resetCommunication+0x268>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    CO_LSS_address_t lssAddress = {
 80058d6:	60bb      	str	r3, [r7, #8]
            .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80058d8:	4b7a      	ldr	r3, [pc, #488]	; (8005ac4 <canopen_app_resetCommunication+0x268>)
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {
 80058dc:	60fb      	str	r3, [r7, #12]
            .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80058de:	4b79      	ldr	r3, [pc, #484]	; (8005ac4 <canopen_app_resetCommunication+0x268>)
 80058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {
 80058e2:	613b      	str	r3, [r7, #16]
            .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber
 80058e4:	4b77      	ldr	r3, [pc, #476]	; (8005ac4 <canopen_app_resetCommunication+0x268>)
 80058e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {
 80058e8:	617b      	str	r3, [r7, #20]
        }
    };

    log_printf("Initializing LSS with Vendor ID: 0x%lX\n", (unsigned long)lssAddress.identity.vendorID);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4619      	mov	r1, r3
 80058ee:	4876      	ldr	r0, [pc, #472]	; (8005ac8 <canopen_app_resetCommunication+0x26c>)
 80058f0:	f004 fa3a 	bl	8009d68 <iprintf>
    log_printf("Product Code: 0x%lX\n", (unsigned long)lssAddress.identity.productCode);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4874      	ldr	r0, [pc, #464]	; (8005acc <canopen_app_resetCommunication+0x270>)
 80058fa:	f004 fa35 	bl	8009d68 <iprintf>
    log_printf("Revision Number: 0x%lX\n", (unsigned long)lssAddress.identity.revisionNumber);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4619      	mov	r1, r3
 8005902:	4873      	ldr	r0, [pc, #460]	; (8005ad0 <canopen_app_resetCommunication+0x274>)
 8005904:	f004 fa30 	bl	8009d68 <iprintf>
    log_printf("Serial Number: 0x%lX\n", (unsigned long)lssAddress.identity.serialNumber);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4619      	mov	r1, r3
 800590c:	4871      	ldr	r0, [pc, #452]	; (8005ad4 <canopen_app_resetCommunication+0x278>)
 800590e:	f004 fa2b 	bl	8009d68 <iprintf>

    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8005912:	4b66      	ldr	r3, [pc, #408]	; (8005aac <canopen_app_resetCommunication+0x250>)
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	4b66      	ldr	r3, [pc, #408]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	4b64      	ldr	r3, [pc, #400]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3302      	adds	r3, #2
 8005922:	f107 0108 	add.w	r1, r7, #8
 8005926:	f7ff fc28 	bl	800517a <CO_LSSinit>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	4b62      	ldr	r3, [pc, #392]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 8005930:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005932:	4b61      	ldr	r3, [pc, #388]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 8005934:	f993 3000 	ldrsb.w	r3, [r3]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <canopen_app_resetCommunication+0xf2>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 800593c:	4b5e      	ldr	r3, [pc, #376]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 800593e:	f993 3000 	ldrsb.w	r3, [r3]
 8005942:	4619      	mov	r1, r3
 8005944:	4864      	ldr	r0, [pc, #400]	; (8005ad8 <canopen_app_resetCommunication+0x27c>)
 8005946:	f004 fa0f 	bl	8009d68 <iprintf>
        return 2;
 800594a:	2302      	movs	r3, #2
 800594c:	e0a7      	b.n	8005a9e <canopen_app_resetCommunication+0x242>
    }

    log_printf("LSS slave initialized successfully\n");
 800594e:	4863      	ldr	r0, [pc, #396]	; (8005adc <canopen_app_resetCommunication+0x280>)
 8005950:	f004 fa90 	bl	8009e74 <puts>

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8005954:	4b56      	ldr	r3, [pc, #344]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b55      	ldr	r3, [pc, #340]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	7812      	ldrb	r2, [r2, #0]
 800595e:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO, NULL, NULL, OD, OD_STATUS_BITS, NMT_CONTROL, FIRST_HB_TIME, SDO_SRV_TIMEOUT_TIME, SDO_CLI_TIMEOUT_TIME, SDO_CLI_BLOCK, canopenNodeSTM32->activeNodeID, &errInfo);
 8005964:	4b51      	ldr	r3, [pc, #324]	; (8005aac <canopen_app_resetCommunication+0x250>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	4b5d      	ldr	r3, [pc, #372]	; (8005ae0 <canopen_app_resetCommunication+0x284>)
 800596a:	6819      	ldr	r1, [r3, #0]
 800596c:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	1d3a      	adds	r2, r7, #4
 8005974:	9207      	str	r2, [sp, #28]
 8005976:	9306      	str	r3, [sp, #24]
 8005978:	2300      	movs	r3, #0
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800598c:	9302      	str	r3, [sp, #8]
 800598e:	f242 1311 	movw	r3, #8465	; 0x2111
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	2300      	movs	r3, #0
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	460b      	mov	r3, r1
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	f7ff fc19 	bl	80051d4 <CO_CANopenInit>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80059a8:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80059aa:	4b43      	ldr	r3, [pc, #268]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80059ac:	f993 3000 	ldrsb.w	r3, [r3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01a      	beq.n	80059ea <canopen_app_resetCommunication+0x18e>
 80059b4:	4b40      	ldr	r3, [pc, #256]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80059b6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ba:	f113 0f13 	cmn.w	r3, #19
 80059be:	d014      	beq.n	80059ea <canopen_app_resetCommunication+0x18e>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80059c0:	4b3d      	ldr	r3, [pc, #244]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80059c2:	f993 3000 	ldrsb.w	r3, [r3]
 80059c6:	f113 0f0c 	cmn.w	r3, #12
 80059ca:	d105      	bne.n	80059d8 <canopen_app_resetCommunication+0x17c>
            log_printf("Error: Object Dictionary entry 0x%lX\n", (unsigned long)errInfo);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4619      	mov	r1, r3
 80059d0:	4844      	ldr	r0, [pc, #272]	; (8005ae4 <canopen_app_resetCommunication+0x288>)
 80059d2:	f004 f9c9 	bl	8009d68 <iprintf>
 80059d6:	e006      	b.n	80059e6 <canopen_app_resetCommunication+0x18a>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 80059d8:	4b37      	ldr	r3, [pc, #220]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 80059da:	f993 3000 	ldrsb.w	r3, [r3]
 80059de:	4619      	mov	r1, r3
 80059e0:	4841      	ldr	r0, [pc, #260]	; (8005ae8 <canopen_app_resetCommunication+0x28c>)
 80059e2:	f004 f9c1 	bl	8009d68 <iprintf>
        }
        return 3;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e059      	b.n	8005a9e <canopen_app_resetCommunication+0x242>
    }

    log_printf("CANopen initialized successfully\n");
 80059ea:	4840      	ldr	r0, [pc, #256]	; (8005aec <canopen_app_resetCommunication+0x290>)
 80059ec:	f004 fa42 	bl	8009e74 <puts>

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80059f0:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <canopen_app_resetCommunication+0x250>)
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <canopen_app_resetCommunication+0x250>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69d9      	ldr	r1, [r3, #28]
 80059fa:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <canopen_app_resetCommunication+0x284>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	785c      	ldrb	r4, [r3, #1]
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4623      	mov	r3, r4
 8005a0a:	f7ff fd89 	bl	8005520 <CO_CANopenInitPDO>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 8005a14:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 8005a18:	f993 3000 	ldrsb.w	r3, [r3]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d014      	beq.n	8005a4a <canopen_app_resetCommunication+0x1ee>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8005a20:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 8005a22:	f993 3000 	ldrsb.w	r3, [r3]
 8005a26:	f113 0f0c 	cmn.w	r3, #12
 8005a2a:	d105      	bne.n	8005a38 <canopen_app_resetCommunication+0x1dc>
            log_printf("Error: Object Dictionary entry 0x%lX\n", (unsigned long)errInfo);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	482c      	ldr	r0, [pc, #176]	; (8005ae4 <canopen_app_resetCommunication+0x288>)
 8005a32:	f004 f999 	bl	8009d68 <iprintf>
 8005a36:	e006      	b.n	8005a46 <canopen_app_resetCommunication+0x1ea>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <canopen_app_resetCommunication+0x25c>)
 8005a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	482b      	ldr	r0, [pc, #172]	; (8005af0 <canopen_app_resetCommunication+0x294>)
 8005a42:	f004 f991 	bl	8009d68 <iprintf>
        }
        return 4;
 8005a46:	2304      	movs	r3, #4
 8005a48:	e029      	b.n	8005a9e <canopen_app_resetCommunication+0x242>
    }

    log_printf("PDO initialized successfully\n");
 8005a4a:	482a      	ldr	r0, [pc, #168]	; (8005af4 <canopen_app_resetCommunication+0x298>)
 8005a4c:	f004 fa12 	bl	8009e74 <puts>

    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle);
 8005a50:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <canopen_app_resetCommunication+0x254>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f003 f812 	bl	8008a80 <HAL_TIM_Base_Start_IT>

    if (!CO->nodeIdUnconfigured) {
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <canopen_app_resetCommunication+0x250>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <canopen_app_resetCommunication+0x210>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8005a66:	4824      	ldr	r0, [pc, #144]	; (8005af8 <canopen_app_resetCommunication+0x29c>)
 8005a68:	f004 fa04 	bl	8009e74 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <canopen_app_resetCommunication+0x250>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f8fa 	bl	8005c6c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8005a78:	4820      	ldr	r0, [pc, #128]	; (8005afc <canopen_app_resetCommunication+0x2a0>)
 8005a7a:	f004 f9fb 	bl	8009e74 <puts>
    fflush(stdout);
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <canopen_app_resetCommunication+0x2a4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f003 ff11 	bl	80098ac <fflush>
    time_old = time_current = HAL_GetTick();
 8005a8a:	f001 f947 	bl	8006d1c <HAL_GetTick>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <canopen_app_resetCommunication+0x2a8>)
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <canopen_app_resetCommunication+0x2a8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <canopen_app_resetCommunication+0x2ac>)
 8005a9a:	6013      	str	r3, [r2, #0]
    return 0;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	0800a8bc 	.word	0x0800a8bc
 8005aac:	20000210 	.word	0x20000210
 8005ab0:	2000020c 	.word	0x2000020c
 8005ab4:	0800a8e4 	.word	0x0800a8e4
 8005ab8:	2000021c 	.word	0x2000021c
 8005abc:	0800a8fc 	.word	0x0800a8fc
 8005ac0:	0800a924 	.word	0x0800a924
 8005ac4:	20000000 	.word	0x20000000
 8005ac8:	0800a950 	.word	0x0800a950
 8005acc:	0800a978 	.word	0x0800a978
 8005ad0:	0800a990 	.word	0x0800a990
 8005ad4:	0800a9a8 	.word	0x0800a9a8
 8005ad8:	0800a9c0 	.word	0x0800a9c0
 8005adc:	0800a9ec 	.word	0x0800a9ec
 8005ae0:	2000017c 	.word	0x2000017c
 8005ae4:	0800aa10 	.word	0x0800aa10
 8005ae8:	0800aa38 	.word	0x0800aa38
 8005aec:	0800aa64 	.word	0x0800aa64
 8005af0:	0800aa88 	.word	0x0800aa88
 8005af4:	0800aab0 	.word	0x0800aab0
 8005af8:	0800aad0 	.word	0x0800aad0
 8005afc:	0800aaf8 	.word	0x0800aaf8
 8005b00:	2000018c 	.word	0x2000018c
 8005b04:	20000218 	.word	0x20000218
 8005b08:	20000214 	.word	0x20000214

08005b0c <canopen_app_process>:

void
canopen_app_process() {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8005b12:	f001 f903 	bl	8006d1c <HAL_GetTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	4a2c      	ldr	r2, [pc, #176]	; (8005bcc <canopen_app_process+0xc0>)
 8005b1a:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8005b1c:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <canopen_app_process+0xc0>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <canopen_app_process+0xc4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d04c      	beq.n	8005bc2 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8005b28:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <canopen_app_process+0xc0>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <canopen_app_process+0xc4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8005b3c:	4b23      	ldr	r3, [pc, #140]	; (8005bcc <canopen_app_process+0xc0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <canopen_app_process+0xc4>)
 8005b42:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8005b44:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <canopen_app_process+0xc8>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	f7ff fd10 	bl	8005572 <CO_process>
 8005b52:	4603      	mov	r3, r0
 8005b54:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <canopen_app_process+0xc8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	7a5a      	ldrb	r2, [r3, #9]
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	; (8005bd8 <canopen_app_process+0xcc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	09d2      	lsrs	r2, r2, #7
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <canopen_app_process+0xc8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	7a9a      	ldrb	r2, [r3, #10]
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <canopen_app_process+0xcc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	09d2      	lsrs	r2, r2, #7
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d118      	bne.n	8005bb2 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8005b80:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <canopen_app_process+0xcc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f002 ffea 	bl	8008b60 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005b8c:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <canopen_app_process+0xcc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 f85b 	bl	8005c4c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <canopen_app_process+0xc8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fa62 	bl	8005064 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8005ba0:	480e      	ldr	r0, [pc, #56]	; (8005bdc <canopen_app_process+0xd0>)
 8005ba2:	f004 f967 	bl	8009e74 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <canopen_app_process+0xcc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fe1c 	bl	80057e8 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8005bb0:	e007      	b.n	8005bc2 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d104      	bne.n	8005bc2 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8005bb8:	4809      	ldr	r0, [pc, #36]	; (8005be0 <canopen_app_process+0xd4>)
 8005bba:	f004 f95b 	bl	8009e74 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8005bbe:	f002 f8b0 	bl	8007d22 <HAL_NVIC_SystemReset>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000218 	.word	0x20000218
 8005bd0:	20000214 	.word	0x20000214
 8005bd4:	20000210 	.word	0x20000210
 8005bd8:	2000020c 	.word	0x2000020c
 8005bdc:	0800ab14 	.word	0x0800ab14
 8005be0:	0800ab3c 	.word	0x0800ab3c

08005be4 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <canopen_app_interrupt+0x64>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8210 	mrs	r2, PRIMASK
 8005bf4:	607a      	str	r2, [r7, #4]
  return(result);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8005bfa:	b672      	cpsid	i
}
 8005bfc:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8005bfe:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <canopen_app_interrupt+0x64>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d112      	bne.n	8005c2e <canopen_app_interrupt+0x4a>
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <canopen_app_interrupt+0x64>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <canopen_app_interrupt+0x4a>
        bool_t syncWas = false;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8005c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c1c:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <canopen_app_interrupt+0x64>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2200      	movs	r2, #0
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fd98 	bl	800575c <CO_process_SYNC>
 8005c2c:	60f8      	str	r0, [r7, #12]
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <canopen_app_interrupt+0x64>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	bf00      	nop
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000210 	.word	0x20000210

08005c4c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 faac 	bl	80071bc <HAL_CAN_Stop>
#endif
    }
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fa56 	bl	8007134 <HAL_CAN_Start>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	615a      	str	r2, [r3, #20]
        }
    }
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b090      	sub	sp, #64	; 0x40
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <CO_CANmodule_init+0x20>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <CO_CANmodule_init+0x20>
 8005cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc0:	e0ab      	b.n	8005e1a <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8005cc8:	4a56      	ldr	r2, [pc, #344]	; (8005e24 <CO_CANmodule_init+0x188>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	887a      	ldrh	r2, [r7, #2]
 8005cd8:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cde:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005ce6:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8005d12:	2300      	movs	r3, #0
 8005d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d16:	e02b      	b.n	8005d70 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8005d18:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8005d2c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	461a      	mov	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d40:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8005d42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8005d56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d58:	4613      	mov	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8005d6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d70:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d3cf      	bcc.n	8005d18 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8005d78:	2300      	movs	r3, #0
 8005d7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d7c:	e00c      	b.n	8005d98 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8005d7e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	4413      	add	r3, r2
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8005d92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d94:	3301      	adds	r3, #1
 8005d96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d98:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3ed      	bcc.n	8005d7e <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <CO_CANmodule_init+0x18c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d102      	bne.n	8005dbc <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	e001      	b.n	8005dc0 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8005dbc:	230e      	movs	r3, #14
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8005de0:	230e      	movs	r3, #14
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f107 0214 	add.w	r2, r7, #20
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 f8c0 	bl	8006f74 <HAL_CAN_ConfigFilter>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	e00c      	b.n	8005e1a <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2113      	movs	r1, #19
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fc43 	bl	8007692 <HAL_CAN_ActivateNotification>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295
 8005e16:	e000      	b.n	8005e1a <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3740      	adds	r7, #64	; 0x40
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000220 	.word	0x20000220
 8005e28:	40006400 	.word	0x40006400

08005e2c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <CO_CANmodule_disable+0x22>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 f9b7 	bl	80071bc <HAL_CAN_Stop>
#endif
    }
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	817b      	strh	r3, [r7, #10]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	813b      	strh	r3, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d03c      	beq.n	8005ef6 <CO_CANrxBufferInit+0x9e>
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d039      	beq.n	8005ef6 <CO_CANrxBufferInit+0x9e>
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d036      	beq.n	8005ef6 <CO_CANrxBufferInit+0x9e>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	891b      	ldrh	r3, [r3, #8]
 8005e8c:	897a      	ldrh	r2, [r7, #10]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d231      	bcs.n	8005ef6 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6859      	ldr	r1, [r3, #4]
 8005e96:	897a      	ldrh	r2, [r7, #10]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eae:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8005eb0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	d001      	beq.n	8005ec4 <CO_CANrxBufferInit+0x6c>
 8005ec0:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <CO_CANrxBufferInit+0xb8>)
 8005ec2:	e000      	b.n	8005ec6 <CO_CANrxBufferInit+0x6e>
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8005ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed8:	b21b      	sxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b21b      	sxth	r3, r3
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <CO_CANrxBufferInit+0xa4>
            __NOP();
 8005ef2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005ef4:	e002      	b.n	8005efc <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005ef6:	23ff      	movs	r3, #255	; 0xff
 8005ef8:	75fb      	strb	r3, [r7, #23]
 8005efa:	e000      	b.n	8005efe <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005efc:	bf00      	nop
    }

    return ret;
 8005efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	ffff8000 	.word	0xffff8000

08005f14 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	817b      	strh	r3, [r7, #10]
 8005f22:	4613      	mov	r3, r2
 8005f24:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
        //buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
        //buffer->DLC = noOfBytes;
        //buffer->bufferFull = false;
        //buffer->syncFlag = syncFlag;
    }
    return buffer;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fa57 	bl	8007404 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d028      	beq.n	8005fae <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <prv_send_can_message+0x7c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <prv_send_can_message+0x7c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	791b      	ldrb	r3, [r3, #4]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <prv_send_can_message+0x7c>)
 8005f70:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7a:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <prv_send_can_message+0x7c>)
 8005f7c:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	0b9b      	lsrs	r3, r3, #14
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	4a0b      	ldr	r2, [pc, #44]	; (8005fb8 <prv_send_can_message+0x7c>)
 8005f8a:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6898      	ldr	r0, [r3, #8]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	1d5a      	adds	r2, r3, #5
 8005f96:	f107 0308 	add.w	r3, r7, #8
 8005f9a:	4907      	ldr	r1, [pc, #28]	; (8005fb8 <prv_send_can_message+0x7c>)
 8005f9c:	f001 f957 	bl	800724e <HAL_CAN_AddTxMessage>
 8005fa0:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8005fac:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000224 	.word	0x20000224

08005fbc <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]

    CO_ReturnError_t err = CO_ERROR_NO;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8a5b      	ldrh	r3, [r3, #18]
 8005fde:	f043 0308 	orr.w	r3, r3, #8
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8005fe8:	23f7      	movs	r3, #247	; 0xf7
 8005fea:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ff2:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8005ff8:	b672      	cpsid	i
}
 8005ffa:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff ff9c 	bl	8005f3c <prv_send_can_message>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	61da      	str	r2, [r3, #28]
 8006012:	e009      	b.n	8006028 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2201      	movs	r2, #1
 8006018:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800601e:	b29b      	uxth	r3, r3
 8006020:	3301      	adds	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f383 8810 	msr	PRIMASK, r3
}
 8006034:	bf00      	nop

    return err;
 8006036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8006042:	b480      	push	{r7}
 8006044:	b087      	sub	sp, #28
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604e:	f3ef 8310 	mrs	r3, PRIMASK
 8006052:	60fb      	str	r3, [r7, #12]
  return(result);
 8006054:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800605a:	b672      	cpsid	i
}
 800605c:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d032      	beq.n	80060e0 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8a1b      	ldrh	r3, [r3, #16]
 800607e:	827b      	strh	r3, [r7, #18]
 8006080:	e02b      	b.n	80060da <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	8a7a      	ldrh	r2, [r7, #18]
 8006088:	4613      	mov	r3, r2
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4413      	add	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	440b      	add	r3, r1
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01d      	beq.n	80060d4 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68d9      	ldr	r1, [r3, #12]
 800609c:	8a7a      	ldrh	r2, [r7, #18]
 800609e:	4613      	mov	r3, r2
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	4413      	add	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	440b      	add	r3, r1
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68d9      	ldr	r1, [r3, #12]
 80060b2:	8a7a      	ldrh	r2, [r7, #18]
 80060b4:	4613      	mov	r3, r2
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80060d0:	2302      	movs	r3, #2
 80060d2:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80060d4:	8a7b      	ldrh	r3, [r7, #18]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	827b      	strh	r3, [r7, #18]
 80060da:	8a7b      	ldrh	r3, [r7, #18]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1d0      	bne.n	8006082 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f383 8810 	msr	PRIMASK, r3
}
 80060ec:	bf00      	nop
    if (tpdoDeleted) {
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d006      	beq.n	8006102 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8a5b      	ldrh	r3, [r3, #18]
 80060f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	825a      	strh	r2, [r3, #18]
    }
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
//static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;   !!!!!!!!!!!!!!

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d02e      	beq.n	8006192 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8a5b      	ldrh	r3, [r3, #18]
 8006138:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 800614a:	89fb      	ldrh	r3, [r7, #14]
 800614c:	f043 0304 	orr.w	r3, r3, #4
 8006150:	81fb      	strh	r3, [r7, #14]
 8006152:	e01b      	b.n	800618c <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 800616a:	89fb      	ldrh	r3, [r7, #14]
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8006180:	89fb      	ldrh	r3, [r7, #14]
 8006182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	89fa      	ldrh	r2, [r7, #14]
 8006190:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80061ac:	2300      	movs	r3, #0
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80061b6:	f107 0314 	add.w	r3, r7, #20
 80061ba:	3305      	adds	r3, #5
 80061bc:	4a2c      	ldr	r2, [pc, #176]	; (8006270 <prv_read_can_received_msg+0xd0>)
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 f954 	bl	800746e <HAL_CAN_GetRxMessage>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d14c      	bne.n	8006266 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80061cc:	4b28      	ldr	r3, [pc, #160]	; (8006270 <prv_read_can_received_msg+0xd0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a27      	ldr	r2, [pc, #156]	; (8006270 <prv_read_can_received_msg+0xd0>)
 80061d2:	68d2      	ldr	r2, [r2, #12]
 80061d4:	2a02      	cmp	r2, #2
 80061d6:	d102      	bne.n	80061de <prv_read_can_received_msg+0x3e>
 80061d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80061dc:	e000      	b.n	80061e0 <prv_read_can_received_msg+0x40>
 80061de:	2200      	movs	r2, #0
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 80061e4:	4b22      	ldr	r3, [pc, #136]	; (8006270 <prv_read_can_received_msg+0xd0>)
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 80061f0:	4b20      	ldr	r3, [pc, #128]	; (8006274 <prv_read_can_received_msg+0xd4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 80061fa:	be00      	bkpt	0x0000
 80061fc:	e01f      	b.n	800623e <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <prv_read_can_received_msg+0xd4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <prv_read_can_received_msg+0xd4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	891b      	ldrh	r3, [r3, #8]
 800620c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800620e:	e013      	b.n	8006238 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	4053      	eors	r3, r2
 800621a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621c:	8852      	ldrh	r2, [r2, #2]
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 800622a:	e008      	b.n	800623e <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800622c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800622e:	3b01      	subs	r3, #1
 8006230:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	330c      	adds	r3, #12
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e8      	bne.n	8006210 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800623e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <prv_read_can_received_msg+0xc8>
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <prv_read_can_received_msg+0xc8>
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d009      	beq.n	8006268 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800625a:	6852      	ldr	r2, [r2, #4]
 800625c:	f107 0114 	add.w	r1, r7, #20
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	e000      	b.n	8006268 <prv_read_can_received_msg+0xc8>
        return;
 8006266:	bf00      	nop
    }
}
 8006268:	3730      	adds	r7, #48	; 0x30
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	2000023c 	.word	0x2000023c
 8006274:	20000220 	.word	0x20000220

08006278 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ff8b 	bl	80061a0 <prv_read_can_received_msg>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 800629a:	2200      	movs	r2, #0
 800629c:	2101      	movs	r1, #1
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff ff7e 	bl	80061a0 <prv_read_can_received_msg>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d03d      	beq.n	8006348 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d2:	f3ef 8310 	mrs	r3, PRIMASK
 80062d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80062d8:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80062de:	b672      	cpsid	i
}
 80062e0:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8a1b      	ldrh	r3, [r3, #16]
 80062e6:	827b      	strh	r3, [r7, #18]
 80062e8:	e01e      	b.n	8006328 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d014      	beq.n	800631c <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fe21 	bl	8005f3c <prv_send_can_message>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 800631c:	8a7b      	ldrh	r3, [r7, #18]
 800631e:	3b01      	subs	r3, #1
 8006320:	827b      	strh	r3, [r7, #18]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	3318      	adds	r3, #24
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	8a7b      	ldrh	r3, [r7, #18]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1dd      	bne.n	80062ea <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 800632e:	8a7b      	ldrh	r3, [r7, #18]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f383 8810 	msr	PRIMASK, r3
}
 8006346:	bf00      	nop
    }
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006358:	4b04      	ldr	r3, [pc, #16]	; (800636c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff ffa4 	bl	80062ac <CO_CANinterrupt_TX>
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20000220 	.word	0x20000220

08006370 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2101      	movs	r1, #1
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff ff94 	bl	80062ac <CO_CANinterrupt_TX>
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000220 	.word	0x20000220

08006390 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2101      	movs	r1, #1
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff ff84 	bl	80062ac <CO_CANinterrupt_TX>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000220 	.word	0x20000220

080063b0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
    if (htim == &htim14) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a08      	ldr	r2, [pc, #32]	; (80063dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d108      	bne.n	80063d2 <HAL_TIM_PeriodElapsedCallback+0x22>
        canopen_app_interrupt();
 80063c0:	f7ff fc10 	bl	8005be4 <canopen_app_interrupt>
        HAL_UART_Transmit(&huart2, (uint8_t*)"TIM14 interrupt\r\n", strlen("TIM14 interrupt\r\n"), HAL_MAX_DELAY);
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	2211      	movs	r2, #17
 80063ca:	4905      	ldr	r1, [pc, #20]	; (80063e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80063cc:	4805      	ldr	r0, [pc, #20]	; (80063e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80063ce:	f002 fe28 	bl	8009022 <HAL_UART_Transmit>
    }
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000280 	.word	0x20000280
 80063e0:	0800ab58 	.word	0x0800ab58
 80063e4:	200002c8 	.word	0x200002c8

080063e8 <__io_putchar>:

int __io_putchar(int ch) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80063f0:	1d39      	adds	r1, r7, #4
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295
 80063f6:	2201      	movs	r2, #1
 80063f8:	4803      	ldr	r0, [pc, #12]	; (8006408 <__io_putchar+0x20>)
 80063fa:	f002 fe12 	bl	8009022 <HAL_UART_Transmit>
    return ch;
 80063fe:	687b      	ldr	r3, [r7, #4]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	200002c8 	.word	0x200002c8

0800640c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006412:	f000 fc1d 	bl	8006c50 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_UART_Transmit(&huart2, (uint8_t*)"Starting application\r\n", strlen("Starting application\r\n"), HAL_MAX_DELAY);
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	2216      	movs	r2, #22
 800641c:	492a      	ldr	r1, [pc, #168]	; (80064c8 <main+0xbc>)
 800641e:	482b      	ldr	r0, [pc, #172]	; (80064cc <main+0xc0>)
 8006420:	f002 fdff 	bl	8009022 <HAL_UART_Transmit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006424:	f000 f868 	bl	80064f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006428:	f000 f954 	bl	80066d4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800642c:	f000 f8ce 	bl	80065cc <MX_CAN1_Init>
  MX_TIM14_Init();
 8006430:	f000 f902 	bl	8006638 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8006434:	f000 f924 	bl	8006680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  canOpenNodeSTM32.CANHandle = &hcan1;
 8006438:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <main+0xc4>)
 800643a:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <main+0xc8>)
 800643c:	609a      	str	r2, [r3, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 800643e:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <main+0xc4>)
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <main+0xcc>)
 8006442:	60da      	str	r2, [r3, #12]
  canOpenNodeSTM32.timerHandle = &htim14;
 8006444:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <main+0xc4>)
 8006446:	4a25      	ldr	r2, [pc, #148]	; (80064dc <main+0xd0>)
 8006448:	605a      	str	r2, [r3, #4]
  canOpenNodeSTM32.desiredNodeID = 66;
 800644a:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <main+0xc4>)
 800644c:	2242      	movs	r2, #66	; 0x42
 800644e:	701a      	strb	r2, [r3, #0]
  canOpenNodeSTM32.baudrate = 500;
 8006450:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <main+0xc4>)
 8006452:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006456:	805a      	strh	r2, [r3, #2]
  canopen_app_init(&canOpenNodeSTM32);
 8006458:	481d      	ldr	r0, [pc, #116]	; (80064d0 <main+0xc4>)
 800645a:	f7ff f9c5 	bl	80057e8 <canopen_app_init>

  if (CO != NULL) {
 800645e:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <main+0xd4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01a      	beq.n	800649c <main+0x90>
        CO_HBconsumer_init(&HBcons, CO->em, HBconsNodes, 1, OD_ENTRY_H1016, &CO->CANmodule[0], 0, &errInfo);
 8006466:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <main+0xd4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <main+0xd8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	3384      	adds	r3, #132	; 0x84
 8006474:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <main+0xd4>)
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	6852      	ldr	r2, [r2, #4]
 800647a:	481b      	ldr	r0, [pc, #108]	; (80064e8 <main+0xdc>)
 800647c:	9003      	str	r0, [sp, #12]
 800647e:	2000      	movs	r0, #0
 8006480:	9002      	str	r0, [sp, #8]
 8006482:	9201      	str	r2, [sp, #4]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	2301      	movs	r3, #1
 8006488:	4a18      	ldr	r2, [pc, #96]	; (80064ec <main+0xe0>)
 800648a:	4819      	ldr	r0, [pc, #100]	; (80064f0 <main+0xe4>)
 800648c:	f7fa fceb 	bl	8000e66 <CO_HBconsumer_init>
        CO_HBconsumer_initCallbackPre(&HBcons, NULL, NULL); // Убедимся, что функция вызвана правильно
 8006490:	2200      	movs	r2, #0
 8006492:	2100      	movs	r1, #0
 8006494:	4816      	ldr	r0, [pc, #88]	; (80064f0 <main+0xe4>)
 8006496:	f7fa fe1f 	bl	80010d8 <CO_HBconsumer_initCallbackPre>
 800649a:	e006      	b.n	80064aa <main+0x9e>
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"CO not initialized\r\n", strlen("CO not initialized\r\n"), HAL_MAX_DELAY);
 800649c:	f04f 33ff 	mov.w	r3, #4294967295
 80064a0:	2214      	movs	r2, #20
 80064a2:	4914      	ldr	r1, [pc, #80]	; (80064f4 <main+0xe8>)
 80064a4:	4809      	ldr	r0, [pc, #36]	; (80064cc <main+0xc0>)
 80064a6:	f002 fdbc 	bl	8009022 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    canopen_app_process();
 80064aa:	f7ff fb2f 	bl	8005b0c <canopen_app_process>
    CO_HBconsumer_process(&HBcons, true, 1000, NULL);
 80064ae:	2300      	movs	r3, #0
 80064b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064b4:	2101      	movs	r1, #1
 80064b6:	480e      	ldr	r0, [pc, #56]	; (80064f0 <main+0xe4>)
 80064b8:	f7fa fe3c 	bl	8001134 <CO_HBconsumer_process>
    HAL_Delay(1000);  // Увеличил задержку для уменьшения частоты вывода в UART
 80064bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064c0:	f000 fc38 	bl	8006d34 <HAL_Delay>
    canopen_app_process();
 80064c4:	e7f1      	b.n	80064aa <main+0x9e>
 80064c6:	bf00      	nop
 80064c8:	0800ab6c 	.word	0x0800ab6c
 80064cc:	200002c8 	.word	0x200002c8
 80064d0:	2000030c 	.word	0x2000030c
 80064d4:	20000258 	.word	0x20000258
 80064d8:	080065cd 	.word	0x080065cd
 80064dc:	20000280 	.word	0x20000280
 80064e0:	20000210 	.word	0x20000210
 80064e4:	2000017c 	.word	0x2000017c
 80064e8:	20000368 	.word	0x20000368
 80064ec:	2000034c 	.word	0x2000034c
 80064f0:	20000324 	.word	0x20000324
 80064f4:	0800ab84 	.word	0x0800ab84

080064f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b094      	sub	sp, #80	; 0x50
 80064fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064fe:	f107 0320 	add.w	r3, r7, #32
 8006502:	2230      	movs	r2, #48	; 0x30
 8006504:	2100      	movs	r1, #0
 8006506:	4618      	mov	r0, r3
 8006508:	f003 fb30 	bl	8009b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	609a      	str	r2, [r3, #8]
 8006518:	60da      	str	r2, [r3, #12]
 800651a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800651c:	2300      	movs	r3, #0
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	4b28      	ldr	r3, [pc, #160]	; (80065c4 <SystemClock_Config+0xcc>)
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	4a27      	ldr	r2, [pc, #156]	; (80065c4 <SystemClock_Config+0xcc>)
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652a:	6413      	str	r3, [r2, #64]	; 0x40
 800652c:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <SystemClock_Config+0xcc>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006538:	2300      	movs	r3, #0
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	4b22      	ldr	r3, [pc, #136]	; (80065c8 <SystemClock_Config+0xd0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <SystemClock_Config+0xd0>)
 8006542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4b1f      	ldr	r3, [pc, #124]	; (80065c8 <SystemClock_Config+0xd0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006554:	2302      	movs	r3, #2
 8006556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006558:	2301      	movs	r3, #1
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800655c:	2310      	movs	r3, #16
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006560:	2302      	movs	r3, #2
 8006562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006568:	2308      	movs	r3, #8
 800656a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800656c:	23a8      	movs	r3, #168	; 0xa8
 800656e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006570:	2302      	movs	r3, #2
 8006572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006574:	2304      	movs	r3, #4
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006578:	f107 0320 	add.w	r3, r7, #32
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fd97 	bl	80080b0 <HAL_RCC_OscConfig>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006588:	f000 f920 	bl	80067cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800658c:	230f      	movs	r3, #15
 800658e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006590:	2302      	movs	r3, #2
 8006592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800659c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800659e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80065a4:	f107 030c 	add.w	r3, r7, #12
 80065a8:	2105      	movs	r1, #5
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 fff8 	bl	80085a0 <HAL_RCC_ClockConfig>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80065b6:	f000 f909 	bl	80067cc <Error_Handler>
  }
}
 80065ba:	bf00      	nop
 80065bc:	3750      	adds	r7, #80	; 0x50
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	40007000 	.word	0x40007000

080065cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80065d0:	4b17      	ldr	r3, [pc, #92]	; (8006630 <MX_CAN1_Init+0x64>)
 80065d2:	4a18      	ldr	r2, [pc, #96]	; (8006634 <MX_CAN1_Init+0x68>)
 80065d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80065d6:	4b16      	ldr	r3, [pc, #88]	; (8006630 <MX_CAN1_Init+0x64>)
 80065d8:	2215      	movs	r2, #21
 80065da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80065dc:	4b14      	ldr	r3, [pc, #80]	; (8006630 <MX_CAN1_Init+0x64>)
 80065de:	2200      	movs	r2, #0
 80065e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80065e2:	4b13      	ldr	r3, [pc, #76]	; (8006630 <MX_CAN1_Init+0x64>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80065e8:	4b11      	ldr	r3, [pc, #68]	; (8006630 <MX_CAN1_Init+0x64>)
 80065ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <MX_CAN1_Init+0x64>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80065f6:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <MX_CAN1_Init+0x64>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <MX_CAN1_Init+0x64>)
 80065fe:	2200      	movs	r2, #0
 8006600:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <MX_CAN1_Init+0x64>)
 8006604:	2200      	movs	r2, #0
 8006606:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006608:	4b09      	ldr	r3, [pc, #36]	; (8006630 <MX_CAN1_Init+0x64>)
 800660a:	2200      	movs	r2, #0
 800660c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800660e:	4b08      	ldr	r3, [pc, #32]	; (8006630 <MX_CAN1_Init+0x64>)
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <MX_CAN1_Init+0x64>)
 8006616:	2200      	movs	r2, #0
 8006618:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800661a:	4805      	ldr	r0, [pc, #20]	; (8006630 <MX_CAN1_Init+0x64>)
 800661c:	f000 fbae 	bl	8006d7c <HAL_CAN_Init>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8006626:	f000 f8d1 	bl	80067cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800662a:	bf00      	nop
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000258 	.word	0x20000258
 8006634:	40006400 	.word	0x40006400

08006638 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800663c:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <MX_TIM14_Init+0x40>)
 800663e:	4a0f      	ldr	r2, [pc, #60]	; (800667c <MX_TIM14_Init+0x44>)
 8006640:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168-1;
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <MX_TIM14_Init+0x40>)
 8006644:	22a7      	movs	r2, #167	; 0xa7
 8006646:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <MX_TIM14_Init+0x40>)
 800664a:	2200      	movs	r2, #0
 800664c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <MX_TIM14_Init+0x40>)
 8006650:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006654:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <MX_TIM14_Init+0x40>)
 8006658:	2200      	movs	r2, #0
 800665a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <MX_TIM14_Init+0x40>)
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006662:	4805      	ldr	r0, [pc, #20]	; (8006678 <MX_TIM14_Init+0x40>)
 8006664:	f002 f9bc 	bl	80089e0 <HAL_TIM_Base_Init>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800666e:	f000 f8ad 	bl	80067cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8006672:	bf00      	nop
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000280 	.word	0x20000280
 800667c:	40002000 	.word	0x40002000

08006680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006684:	4b11      	ldr	r3, [pc, #68]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 8006686:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <MX_USART2_UART_Init+0x50>)
 8006688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 800668c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 8006694:	2200      	movs	r2, #0
 8006696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 800669a:	2200      	movs	r2, #0
 800669c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 80066a6:	220c      	movs	r2, #12
 80066a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066b6:	4805      	ldr	r0, [pc, #20]	; (80066cc <MX_USART2_UART_Init+0x4c>)
 80066b8:	f002 fc66 	bl	8008f88 <HAL_UART_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80066c2:	f000 f883 	bl	80067cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200002c8 	.word	0x200002c8
 80066d0:	40004400 	.word	0x40004400

080066d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066da:	f107 0314 	add.w	r3, r7, #20
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	609a      	str	r2, [r3, #8]
 80066e6:	60da      	str	r2, [r3, #12]
 80066e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	4b34      	ldr	r3, [pc, #208]	; (80067c0 <MX_GPIO_Init+0xec>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	4a33      	ldr	r2, [pc, #204]	; (80067c0 <MX_GPIO_Init+0xec>)
 80066f4:	f043 0310 	orr.w	r3, r3, #16
 80066f8:	6313      	str	r3, [r2, #48]	; 0x30
 80066fa:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <MX_GPIO_Init+0xec>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4b2d      	ldr	r3, [pc, #180]	; (80067c0 <MX_GPIO_Init+0xec>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	6313      	str	r3, [r2, #48]	; 0x30
 8006716:	4b2a      	ldr	r3, [pc, #168]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	4b26      	ldr	r3, [pc, #152]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <MX_GPIO_Init+0xec>)
 800672c:	f043 0320 	orr.w	r3, r3, #32
 8006730:	6313      	str	r3, [r2, #48]	; 0x30
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	60bb      	str	r3, [r7, #8]
 800673c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	4b1f      	ldr	r3, [pc, #124]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674c:	6313      	str	r3, [r2, #48]	; 0x30
 800674e:	4b1c      	ldr	r3, [pc, #112]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <MX_GPIO_Init+0xec>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	6313      	str	r3, [r2, #48]	; 0x30
 800676a:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <MX_GPIO_Init+0xec>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8006776:	2201      	movs	r2, #1
 8006778:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800677c:	4811      	ldr	r0, [pc, #68]	; (80067c4 <MX_GPIO_Init+0xf0>)
 800677e:	f001 fc7d 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8006782:	2318      	movs	r3, #24
 8006784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006786:	2300      	movs	r3, #0
 8006788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800678e:	f107 0314 	add.w	r3, r7, #20
 8006792:	4619      	mov	r1, r3
 8006794:	480c      	ldr	r0, [pc, #48]	; (80067c8 <MX_GPIO_Init+0xf4>)
 8006796:	f001 fad5 	bl	8007d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800679a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800679e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067a0:	2301      	movs	r3, #1
 80067a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a8:	2300      	movs	r3, #0
 80067aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	4619      	mov	r1, r3
 80067b2:	4804      	ldr	r0, [pc, #16]	; (80067c4 <MX_GPIO_Init+0xf0>)
 80067b4:	f001 fac6 	bl	8007d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80067b8:	bf00      	nop
 80067ba:	3728      	adds	r7, #40	; 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40021400 	.word	0x40021400
 80067c8:	40021000 	.word	0x40021000

080067cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80067d0:	b672      	cpsid	i
}
 80067d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80067d4:	e7fe      	b.n	80067d4 <Error_Handler+0x8>
	...

080067d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067de:	2300      	movs	r3, #0
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <HAL_MspInit+0x4c>)
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <HAL_MspInit+0x4c>)
 80067e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067ec:	6453      	str	r3, [r2, #68]	; 0x44
 80067ee:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <HAL_MspInit+0x4c>)
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <HAL_MspInit+0x4c>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	4a08      	ldr	r2, [pc, #32]	; (8006824 <HAL_MspInit+0x4c>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	; 0x40
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_MspInit+0x4c>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800

08006828 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a29      	ldr	r2, [pc, #164]	; (80068ec <HAL_CAN_MspInit+0xc4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d14c      	bne.n	80068e4 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <HAL_CAN_MspInit+0xc8>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <HAL_CAN_MspInit+0xc8>)
 8006854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006858:	6413      	str	r3, [r2, #64]	; 0x40
 800685a:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <HAL_CAN_MspInit+0xc8>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <HAL_CAN_MspInit+0xc8>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <HAL_CAN_MspInit+0xc8>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	6313      	str	r3, [r2, #48]	; 0x30
 8006876:	4b1e      	ldr	r3, [pc, #120]	; (80068f0 <HAL_CAN_MspInit+0xc8>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006888:	2302      	movs	r3, #2
 800688a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006890:	2303      	movs	r3, #3
 8006892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006894:	2309      	movs	r3, #9
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006898:	f107 0314 	add.w	r3, r7, #20
 800689c:	4619      	mov	r1, r3
 800689e:	4815      	ldr	r0, [pc, #84]	; (80068f4 <HAL_CAN_MspInit+0xcc>)
 80068a0:	f001 fa50 	bl	8007d44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80068a4:	2200      	movs	r2, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	2013      	movs	r0, #19
 80068aa:	f001 fa10 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80068ae:	2013      	movs	r0, #19
 80068b0:	f001 fa29 	bl	8007d06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80068b4:	2200      	movs	r2, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	2014      	movs	r0, #20
 80068ba:	f001 fa08 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80068be:	2014      	movs	r0, #20
 80068c0:	f001 fa21 	bl	8007d06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	2015      	movs	r0, #21
 80068ca:	f001 fa00 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80068ce:	2015      	movs	r0, #21
 80068d0:	f001 fa19 	bl	8007d06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80068d4:	2200      	movs	r2, #0
 80068d6:	2100      	movs	r1, #0
 80068d8:	2016      	movs	r0, #22
 80068da:	f001 f9f8 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80068de:	2016      	movs	r0, #22
 80068e0:	f001 fa11 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80068e4:	bf00      	nop
 80068e6:	3728      	adds	r7, #40	; 0x28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40006400 	.word	0x40006400
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40020000 	.word	0x40020000

080068f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a0e      	ldr	r2, [pc, #56]	; (8006940 <HAL_TIM_Base_MspInit+0x48>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d115      	bne.n	8006936 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_TIM_Base_MspInit+0x4c>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <HAL_TIM_Base_MspInit+0x4c>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	6413      	str	r3, [r2, #64]	; 0x40
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <HAL_TIM_Base_MspInit+0x4c>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006926:	2200      	movs	r2, #0
 8006928:	2100      	movs	r1, #0
 800692a:	202d      	movs	r0, #45	; 0x2d
 800692c:	f001 f9cf 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006930:	202d      	movs	r0, #45	; 0x2d
 8006932:	f001 f9e8 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40002000 	.word	0x40002000
 8006944:	40023800 	.word	0x40023800

08006948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	; 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	609a      	str	r2, [r3, #8]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a19      	ldr	r2, [pc, #100]	; (80069cc <HAL_UART_MspInit+0x84>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d12b      	bne.n	80069c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <HAL_UART_MspInit+0x88>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	4a17      	ldr	r2, [pc, #92]	; (80069d0 <HAL_UART_MspInit+0x88>)
 8006974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006978:	6413      	str	r3, [r2, #64]	; 0x40
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <HAL_UART_MspInit+0x88>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <HAL_UART_MspInit+0x88>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	4a10      	ldr	r2, [pc, #64]	; (80069d0 <HAL_UART_MspInit+0x88>)
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	6313      	str	r3, [r2, #48]	; 0x30
 8006996:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <HAL_UART_MspInit+0x88>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80069a2:	230c      	movs	r3, #12
 80069a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a6:	2302      	movs	r3, #2
 80069a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ae:	2303      	movs	r3, #3
 80069b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069b2:	2307      	movs	r3, #7
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b6:	f107 0314 	add.w	r3, r7, #20
 80069ba:	4619      	mov	r1, r3
 80069bc:	4805      	ldr	r0, [pc, #20]	; (80069d4 <HAL_UART_MspInit+0x8c>)
 80069be:	f001 f9c1 	bl	8007d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80069c2:	bf00      	nop
 80069c4:	3728      	adds	r7, #40	; 0x28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40004400 	.word	0x40004400
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40020000 	.word	0x40020000

080069d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80069dc:	e7fe      	b.n	80069dc <NMI_Handler+0x4>

080069de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069de:	b480      	push	{r7}
 80069e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069e2:	e7fe      	b.n	80069e2 <HardFault_Handler+0x4>

080069e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069e8:	e7fe      	b.n	80069e8 <MemManage_Handler+0x4>

080069ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069ea:	b480      	push	{r7}
 80069ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ee:	e7fe      	b.n	80069ee <BusFault_Handler+0x4>

080069f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069f4:	e7fe      	b.n	80069f4 <UsageFault_Handler+0x4>

080069f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a12:	b480      	push	{r7}
 8006a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a16:	bf00      	nop
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a24:	f000 f966 	bl	8006cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a30:	4802      	ldr	r0, [pc, #8]	; (8006a3c <CAN1_TX_IRQHandler+0x10>)
 8006a32:	f000 fe54 	bl	80076de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000258 	.word	0x20000258

08006a40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a44:	4802      	ldr	r0, [pc, #8]	; (8006a50 <CAN1_RX0_IRQHandler+0x10>)
 8006a46:	f000 fe4a 	bl	80076de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006a4a:	bf00      	nop
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000258 	.word	0x20000258

08006a54 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a58:	4802      	ldr	r0, [pc, #8]	; (8006a64 <CAN1_RX1_IRQHandler+0x10>)
 8006a5a:	f000 fe40 	bl	80076de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006a5e:	bf00      	nop
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000258 	.word	0x20000258

08006a68 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a6c:	4802      	ldr	r0, [pc, #8]	; (8006a78 <CAN1_SCE_IRQHandler+0x10>)
 8006a6e:	f000 fe36 	bl	80076de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006a72:	bf00      	nop
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000258 	.word	0x20000258

08006a7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006a80:	4802      	ldr	r0, [pc, #8]	; (8006a8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8006a82:	f002 f89c 	bl	8008bbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006a86:	bf00      	nop
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000280 	.word	0x20000280

08006a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e00a      	b.n	8006ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006aa2:	f3af 8000 	nop.w
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	60ba      	str	r2, [r7, #8]
 8006aae:	b2ca      	uxtb	r2, r1
 8006ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	dbf0      	blt.n	8006aa2 <_read+0x12>
  }

  return len;
 8006ac0:	687b      	ldr	r3, [r7, #4]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e009      	b.n	8006af0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	60ba      	str	r2, [r7, #8]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fc7f 	bl	80063e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	3301      	adds	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	dbf1      	blt.n	8006adc <_write+0x12>
  }
  return len;
 8006af8:	687b      	ldr	r3, [r7, #4]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_close>:

int _close(int file)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <_isatty>:

int _isatty(int file)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006b42:	2301      	movs	r3, #1
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <_sbrk+0x5c>)
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <_sbrk+0x60>)
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <_sbrk+0x64>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b88:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <_sbrk+0x64>)
 8006b8a:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <_sbrk+0x68>)
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b8e:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <_sbrk+0x64>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d207      	bcs.n	8006bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b9c:	f002 fdbe 	bl	800971c <__errno>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	220c      	movs	r2, #12
 8006ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8006baa:	e009      	b.n	8006bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006bac:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <_sbrk+0x64>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <_sbrk+0x64>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4413      	add	r3, r2
 8006bba:	4a05      	ldr	r2, [pc, #20]	; (8006bd0 <_sbrk+0x64>)
 8006bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20020000 	.word	0x20020000
 8006bcc:	00000400 	.word	0x00000400
 8006bd0:	2000036c 	.word	0x2000036c
 8006bd4:	20000388 	.word	0x20000388

08006bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <SystemInit+0x20>)
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be2:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <SystemInit+0x20>)
 8006be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	e000ed00 	.word	0xe000ed00

08006bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c00:	480d      	ldr	r0, [pc, #52]	; (8006c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006c02:	490e      	ldr	r1, [pc, #56]	; (8006c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006c04:	4a0e      	ldr	r2, [pc, #56]	; (8006c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c08:	e002      	b.n	8006c10 <LoopCopyDataInit>

08006c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c0e:	3304      	adds	r3, #4

08006c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c14:	d3f9      	bcc.n	8006c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c16:	4a0b      	ldr	r2, [pc, #44]	; (8006c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006c18:	4c0b      	ldr	r4, [pc, #44]	; (8006c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c1c:	e001      	b.n	8006c22 <LoopFillZerobss>

08006c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c20:	3204      	adds	r2, #4

08006c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c24:	d3fb      	bcc.n	8006c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006c26:	f7ff ffd7 	bl	8006bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c2a:	f002 ff47 	bl	8009abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c2e:	f7ff fbed 	bl	800640c <main>
  bx  lr    
 8006c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c3c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006c40:	0800ae30 	.word	0x0800ae30
  ldr r2, =_sbss
 8006c44:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8006c48:	20000384 	.word	0x20000384

08006c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c4c:	e7fe      	b.n	8006c4c <ADC_IRQHandler>
	...

08006c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <HAL_Init+0x40>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <HAL_Init+0x40>)
 8006c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <HAL_Init+0x40>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <HAL_Init+0x40>)
 8006c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c6c:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <HAL_Init+0x40>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <HAL_Init+0x40>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c78:	2003      	movs	r0, #3
 8006c7a:	f001 f81d 	bl	8007cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c7e:	200f      	movs	r0, #15
 8006c80:	f000 f808 	bl	8006c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c84:	f7ff fda8 	bl	80067d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40023c00 	.word	0x40023c00

08006c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_InitTick+0x54>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_InitTick+0x58>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 f839 	bl	8007d2a <HAL_SYSTICK_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00e      	b.n	8006ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b0f      	cmp	r3, #15
 8006cc6:	d80a      	bhi.n	8006cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	f000 fffd 	bl	8007cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cd4:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <HAL_InitTick+0x5c>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e000      	b.n	8006ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000180 	.word	0x20000180
 8006cec:	20000188 	.word	0x20000188
 8006cf0:	20000184 	.word	0x20000184

08006cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_IncTick+0x20>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_IncTick+0x24>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_IncTick+0x24>)
 8006d06:	6013      	str	r3, [r2, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000188 	.word	0x20000188
 8006d18:	20000370 	.word	0x20000370

08006d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_GetTick+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000370 	.word	0x20000370

08006d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d3c:	f7ff ffee 	bl	8006d1c <HAL_GetTick>
 8006d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d005      	beq.n	8006d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <HAL_Delay+0x44>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d5a:	bf00      	nop
 8006d5c:	f7ff ffde 	bl	8006d1c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d8f7      	bhi.n	8006d5c <HAL_Delay+0x28>
  {
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000188 	.word	0x20000188

08006d7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e0ed      	b.n	8006f6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d102      	bne.n	8006da0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fd44 	bl	8006828 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006db0:	f7ff ffb4 	bl	8006d1c <HAL_GetTick>
 8006db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006db6:	e012      	b.n	8006dde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006db8:	f7ff ffb0 	bl	8006d1c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b0a      	cmp	r3, #10
 8006dc4:	d90b      	bls.n	8006dde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e0c5      	b.n	8006f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0e5      	beq.n	8006db8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0202 	bic.w	r2, r2, #2
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dfc:	f7ff ff8e 	bl	8006d1c <HAL_GetTick>
 8006e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e02:	e012      	b.n	8006e2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e04:	f7ff ff8a 	bl	8006d1c <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b0a      	cmp	r3, #10
 8006e10:	d90b      	bls.n	8006e2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2205      	movs	r2, #5
 8006e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e09f      	b.n	8006f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7e1b      	ldrb	r3, [r3, #24]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d108      	bne.n	8006e52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e007      	b.n	8006e62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7e5b      	ldrb	r3, [r3, #25]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d108      	bne.n	8006e7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e007      	b.n	8006e8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7e9b      	ldrb	r3, [r3, #26]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d108      	bne.n	8006ea6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0220 	orr.w	r2, r2, #32
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e007      	b.n	8006eb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0220 	bic.w	r2, r2, #32
 8006eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7edb      	ldrb	r3, [r3, #27]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d108      	bne.n	8006ed0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0210 	bic.w	r2, r2, #16
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e007      	b.n	8006ee0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0210 	orr.w	r2, r2, #16
 8006ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7f1b      	ldrb	r3, [r3, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d108      	bne.n	8006efa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0208 	orr.w	r2, r2, #8
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e007      	b.n	8006f0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0208 	bic.w	r2, r2, #8
 8006f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7f5b      	ldrb	r3, [r3, #29]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d108      	bne.n	8006f24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0204 	orr.w	r2, r2, #4
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e007      	b.n	8006f34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0204 	bic.w	r2, r2, #4
 8006f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	ea42 0103 	orr.w	r1, r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	1e5a      	subs	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006f8c:	7cfb      	ldrb	r3, [r7, #19]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d003      	beq.n	8006f9a <HAL_CAN_ConfigFilter+0x26>
 8006f92:	7cfb      	ldrb	r3, [r7, #19]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f040 80be 	bne.w	8007116 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006f9a:	4b65      	ldr	r3, [pc, #404]	; (8007130 <HAL_CAN_ConfigFilter+0x1bc>)
 8006f9c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fa4:	f043 0201 	orr.w	r2, r3, #1
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2201      	movs	r2, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	43db      	mvns	r3, r3
 8006fec:	401a      	ands	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d123      	bne.n	8007044 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800701e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	3248      	adds	r2, #72	; 0x48
 8007024:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007038:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800703a:	6979      	ldr	r1, [r7, #20]
 800703c:	3348      	adds	r3, #72	; 0x48
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	440b      	add	r3, r1
 8007042:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d122      	bne.n	8007092 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	431a      	orrs	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800706c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	3248      	adds	r2, #72	; 0x48
 8007072:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007086:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007088:	6979      	ldr	r1, [r7, #20]
 800708a:	3348      	adds	r3, #72	; 0x48
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	440b      	add	r3, r1
 8007090:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	43db      	mvns	r3, r3
 80070a4:	401a      	ands	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80070ac:	e007      	b.n	80070be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	401a      	ands	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80070d8:	e007      	b.n	80070ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	431a      	orrs	r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d107      	bne.n	8007102 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007108:	f023 0201 	bic.w	r2, r3, #1
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e006      	b.n	8007124 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40006400 	.word	0x40006400

08007134 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	d12e      	bne.n	80071a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007160:	f7ff fddc 	bl	8006d1c <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007166:	e012      	b.n	800718e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007168:	f7ff fdd8 	bl	8006d1c <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b0a      	cmp	r3, #10
 8007174:	d90b      	bls.n	800718e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2205      	movs	r2, #5
 8007186:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e012      	b.n	80071b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e006      	b.n	80071b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d133      	bne.n	8007238 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071e0:	f7ff fd9c 	bl	8006d1c <HAL_GetTick>
 80071e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071e6:	e012      	b.n	800720e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071e8:	f7ff fd98 	bl	8006d1c <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b0a      	cmp	r3, #10
 80071f4:	d90b      	bls.n	800720e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2205      	movs	r2, #5
 8007206:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e01b      	b.n	8007246 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0e5      	beq.n	80071e8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0202 	bic.w	r2, r2, #2
 800722a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e006      	b.n	8007246 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
  }
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800724e:	b480      	push	{r7}
 8007250:	b089      	sub	sp, #36	; 0x24
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
 800725a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007262:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800726c:	7ffb      	ldrb	r3, [r7, #31]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d003      	beq.n	800727a <HAL_CAN_AddTxMessage+0x2c>
 8007272:	7ffb      	ldrb	r3, [r7, #31]
 8007274:	2b02      	cmp	r3, #2
 8007276:	f040 80b8 	bne.w	80073ea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10a      	bne.n	800729a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80a0 	beq.w	80073da <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d907      	bls.n	80072ba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e09e      	b.n	80073f8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072ba:	2201      	movs	r2, #1
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	409a      	lsls	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6809      	ldr	r1, [r1, #0]
 80072da:	431a      	orrs	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3318      	adds	r3, #24
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	440b      	add	r3, r1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e00f      	b.n	8007308 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072f8:	68f9      	ldr	r1, [r7, #12]
 80072fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80072fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3318      	adds	r3, #24
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	440b      	add	r3, r1
 8007306:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6819      	ldr	r1, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	3318      	adds	r3, #24
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	440b      	add	r3, r1
 8007318:	3304      	adds	r3, #4
 800731a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	7d1b      	ldrb	r3, [r3, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d111      	bne.n	8007348 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	3318      	adds	r3, #24
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	6811      	ldr	r1, [r2, #0]
 8007338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	3318      	adds	r3, #24
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	440b      	add	r3, r1
 8007344:	3304      	adds	r3, #4
 8007346:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3307      	adds	r3, #7
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	061a      	lsls	r2, r3, #24
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3306      	adds	r3, #6
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3305      	adds	r3, #5
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	4313      	orrs	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	3204      	adds	r2, #4
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	4610      	mov	r0, r2
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	6811      	ldr	r1, [r2, #0]
 8007370:	ea43 0200 	orr.w	r2, r3, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	440b      	add	r3, r1
 800737a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800737e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3303      	adds	r3, #3
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	061a      	lsls	r2, r3, #24
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3302      	adds	r3, #2
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3301      	adds	r3, #1
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	4313      	orrs	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	4610      	mov	r0, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	ea43 0200 	orr.w	r2, r3, r0
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	440b      	add	r3, r1
 80073b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80073b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	3318      	adds	r3, #24
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	4413      	add	r3, r2
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	6811      	ldr	r1, [r2, #0]
 80073c8:	f043 0201 	orr.w	r2, r3, #1
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	3318      	adds	r3, #24
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	440b      	add	r3, r1
 80073d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e00e      	b.n	80073f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e006      	b.n	80073f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
  }
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3724      	adds	r7, #36	; 0x24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007416:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d002      	beq.n	8007424 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d11d      	bne.n	8007460 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800746e:	b480      	push	{r7}
 8007470:	b087      	sub	sp, #28
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007482:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d003      	beq.n	8007492 <HAL_CAN_GetRxMessage+0x24>
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b02      	cmp	r3, #2
 800748e:	f040 80f3 	bne.w	8007678 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10e      	bne.n	80074b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d116      	bne.n	80074d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e0e7      	b.n	8007686 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0d8      	b.n	8007686 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	331b      	adds	r3, #27
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	4413      	add	r3, r2
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0204 	and.w	r2, r3, #4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10c      	bne.n	800750c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	331b      	adds	r3, #27
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	4413      	add	r3, r2
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	0d5b      	lsrs	r3, r3, #21
 8007502:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e00b      	b.n	8007524 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	331b      	adds	r3, #27
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	4413      	add	r3, r2
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	08db      	lsrs	r3, r3, #3
 800751c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	331b      	adds	r3, #27
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	4413      	add	r3, r2
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0202 	and.w	r2, r3, #2
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	331b      	adds	r3, #27
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	331b      	adds	r3, #27
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	4413      	add	r3, r2
 800755e:	3304      	adds	r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	331b      	adds	r3, #27
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	0c1b      	lsrs	r3, r3, #16
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	4413      	add	r3, r2
 800758c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	b2da      	uxtb	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	0a1a      	lsrs	r2, r3, #8
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	0c1a      	lsrs	r2, r3, #16
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	3302      	adds	r3, #2
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	0e1a      	lsrs	r2, r3, #24
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	3303      	adds	r3, #3
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	3304      	adds	r3, #4
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4413      	add	r3, r2
 8007608:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	0a1a      	lsrs	r2, r3, #8
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3305      	adds	r3, #5
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	4413      	add	r3, r2
 8007622:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	0c1a      	lsrs	r2, r3, #16
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	3306      	adds	r3, #6
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	4413      	add	r3, r2
 800763c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	0e1a      	lsrs	r2, r3, #24
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	3307      	adds	r3, #7
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d108      	bne.n	8007664 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0220 	orr.w	r2, r2, #32
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e007      	b.n	8007674 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0220 	orr.w	r2, r2, #32
 8007672:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e006      	b.n	8007686 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
  }
}
 8007686:	4618      	mov	r0, r3
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d002      	beq.n	80076b0 <HAL_CAN_ActivateNotification+0x1e>
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d109      	bne.n	80076c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6959      	ldr	r1, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e006      	b.n	80076d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b08a      	sub	sp, #40	; 0x28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d07c      	beq.n	800781e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d023      	beq.n	8007776 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2201      	movs	r2, #1
 8007734:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fe fe05 	bl	8006350 <HAL_CAN_TxMailbox0CompleteCallback>
 8007746:	e016      	b.n	8007776 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
 800775a:	e00c      	b.n	8007776 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
 800776e:	e002      	b.n	8007776 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f96b 	bl	8007a4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777c:	2b00      	cmp	r3, #0
 800777e:	d024      	beq.n	80077ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007788:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fe fdeb 	bl	8006370 <HAL_CAN_TxMailbox1CompleteCallback>
 800779a:	e016      	b.n	80077ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	e00c      	b.n	80077ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
 80077c2:	e002      	b.n	80077ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f94b 	bl	8007a60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d024      	beq.n	800781e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fe fdd1 	bl	8006390 <HAL_CAN_TxMailbox2CompleteCallback>
 80077ee:	e016      	b.n	800781e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
 8007802:	e00c      	b.n	800781e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
 8007816:	e002      	b.n	800781e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f92b 	bl	8007a74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007838:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2210      	movs	r2, #16
 8007840:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d006      	beq.n	8007864 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2208      	movs	r2, #8
 800785c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f912 	bl	8007a88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fe fcfb 	bl	8006278 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00c      	beq.n	80078a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b00      	cmp	r3, #0
 8007894:	d007      	beq.n	80078a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800789c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2210      	movs	r2, #16
 80078a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d006      	beq.n	80078c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2208      	movs	r2, #8
 80078c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f8ea 	bl	8007a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fe fcd6 	bl	8006292 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d006      	beq.n	8007908 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2210      	movs	r2, #16
 8007900:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f8d4 	bl	8007ab0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2208      	movs	r2, #8
 8007922:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8cd 	bl	8007ac4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d07b      	beq.n	8007a2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d072      	beq.n	8007a24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	f043 0302 	orr.w	r3, r3, #2
 8007974:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	f043 0304 	orr.w	r3, r3, #4
 8007990:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007998:	2b00      	cmp	r3, #0
 800799a:	d043      	beq.n	8007a24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d03e      	beq.n	8007a24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ac:	2b60      	cmp	r3, #96	; 0x60
 80079ae:	d02b      	beq.n	8007a08 <HAL_CAN_IRQHandler+0x32a>
 80079b0:	2b60      	cmp	r3, #96	; 0x60
 80079b2:	d82e      	bhi.n	8007a12 <HAL_CAN_IRQHandler+0x334>
 80079b4:	2b50      	cmp	r3, #80	; 0x50
 80079b6:	d022      	beq.n	80079fe <HAL_CAN_IRQHandler+0x320>
 80079b8:	2b50      	cmp	r3, #80	; 0x50
 80079ba:	d82a      	bhi.n	8007a12 <HAL_CAN_IRQHandler+0x334>
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d019      	beq.n	80079f4 <HAL_CAN_IRQHandler+0x316>
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d826      	bhi.n	8007a12 <HAL_CAN_IRQHandler+0x334>
 80079c4:	2b30      	cmp	r3, #48	; 0x30
 80079c6:	d010      	beq.n	80079ea <HAL_CAN_IRQHandler+0x30c>
 80079c8:	2b30      	cmp	r3, #48	; 0x30
 80079ca:	d822      	bhi.n	8007a12 <HAL_CAN_IRQHandler+0x334>
 80079cc:	2b10      	cmp	r3, #16
 80079ce:	d002      	beq.n	80079d6 <HAL_CAN_IRQHandler+0x2f8>
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d005      	beq.n	80079e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80079d4:	e01d      	b.n	8007a12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	f043 0308 	orr.w	r3, r3, #8
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079de:	e019      	b.n	8007a14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	f043 0310 	orr.w	r3, r3, #16
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079e8:	e014      	b.n	8007a14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	f043 0320 	orr.w	r3, r3, #32
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079f2:	e00f      	b.n	8007a14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079fc:	e00a      	b.n	8007a14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a06:	e005      	b.n	8007a14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a10:	e000      	b.n	8007a14 <HAL_CAN_IRQHandler+0x336>
            break;
 8007a12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d008      	beq.n	8007a44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f84a 	bl	8007ad8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007a44:	bf00      	nop
 8007a46:	3728      	adds	r7, #40	; 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007afc:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <__NVIC_SetPriorityGrouping+0x44>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b08:	4013      	ands	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <__NVIC_SetPriorityGrouping+0x44>)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	60d3      	str	r3, [r2, #12]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	e000ed00 	.word	0xe000ed00

08007b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <__NVIC_GetPriorityGrouping+0x18>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	f003 0307 	and.w	r3, r3, #7
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	e000ed00 	.word	0xe000ed00

08007b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db0b      	blt.n	8007b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	f003 021f 	and.w	r2, r3, #31
 8007b68:	4907      	ldr	r1, [pc, #28]	; (8007b88 <__NVIC_EnableIRQ+0x38>)
 8007b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	2001      	movs	r0, #1
 8007b72:	fa00 f202 	lsl.w	r2, r0, r2
 8007b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	e000e100 	.word	0xe000e100

08007b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	db0a      	blt.n	8007bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	490c      	ldr	r1, [pc, #48]	; (8007bd8 <__NVIC_SetPriority+0x4c>)
 8007ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007baa:	0112      	lsls	r2, r2, #4
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	440b      	add	r3, r1
 8007bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bb4:	e00a      	b.n	8007bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4908      	ldr	r1, [pc, #32]	; (8007bdc <__NVIC_SetPriority+0x50>)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	3b04      	subs	r3, #4
 8007bc4:	0112      	lsls	r2, r2, #4
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	440b      	add	r3, r1
 8007bca:	761a      	strb	r2, [r3, #24]
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	e000e100 	.word	0xe000e100
 8007bdc:	e000ed00 	.word	0xe000ed00

08007be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b089      	sub	sp, #36	; 0x24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f1c3 0307 	rsb	r3, r3, #7
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	bf28      	it	cs
 8007bfe:	2304      	movcs	r3, #4
 8007c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	3304      	adds	r3, #4
 8007c06:	2b06      	cmp	r3, #6
 8007c08:	d902      	bls.n	8007c10 <NVIC_EncodePriority+0x30>
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3b03      	subs	r3, #3
 8007c0e:	e000      	b.n	8007c12 <NVIC_EncodePriority+0x32>
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43da      	mvns	r2, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	401a      	ands	r2, r3
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c28:	f04f 31ff 	mov.w	r1, #4294967295
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	43d9      	mvns	r1, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c38:	4313      	orrs	r3, r2
         );
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3724      	adds	r7, #36	; 0x24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007c4c:	f3bf 8f4f 	dsb	sy
}
 8007c50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c52:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <__NVIC_SystemReset+0x24>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c5a:	4904      	ldr	r1, [pc, #16]	; (8007c6c <__NVIC_SystemReset+0x24>)
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <__NVIC_SystemReset+0x28>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c62:	f3bf 8f4f 	dsb	sy
}
 8007c66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <__NVIC_SystemReset+0x20>
 8007c6c:	e000ed00 	.word	0xe000ed00
 8007c70:	05fa0004 	.word	0x05fa0004

08007c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c84:	d301      	bcc.n	8007c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c86:	2301      	movs	r3, #1
 8007c88:	e00f      	b.n	8007caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	; (8007cb4 <SysTick_Config+0x40>)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c92:	210f      	movs	r1, #15
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	f7ff ff78 	bl	8007b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <SysTick_Config+0x40>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ca2:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <SysTick_Config+0x40>)
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	e000e010 	.word	0xe000e010

08007cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff ff13 	bl	8007aec <__NVIC_SetPriorityGrouping>
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
 8007cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ce0:	f7ff ff28 	bl	8007b34 <__NVIC_GetPriorityGrouping>
 8007ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	6978      	ldr	r0, [r7, #20]
 8007cec:	f7ff ff78 	bl	8007be0 <NVIC_EncodePriority>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff ff47 	bl	8007b8c <__NVIC_SetPriority>
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff ff1b 	bl	8007b50 <__NVIC_EnableIRQ>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007d26:	f7ff ff8f 	bl	8007c48 <__NVIC_SystemReset>

08007d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff ff9e 	bl	8007c74 <SysTick_Config>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b089      	sub	sp, #36	; 0x24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	e16b      	b.n	8008038 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d60:	2201      	movs	r2, #1
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4013      	ands	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	f040 815a 	bne.w	8008032 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d005      	beq.n	8007d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d130      	bne.n	8007df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	2203      	movs	r2, #3
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007dcc:	2201      	movs	r2, #1
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	091b      	lsrs	r3, r3, #4
 8007de2:	f003 0201 	and.w	r2, r3, #1
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f003 0303 	and.w	r3, r3, #3
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d017      	beq.n	8007e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	2203      	movs	r2, #3
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	43db      	mvns	r3, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d123      	bne.n	8007e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	08da      	lsrs	r2, r3, #3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3208      	adds	r2, #8
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	220f      	movs	r2, #15
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	4013      	ands	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	08da      	lsrs	r2, r3, #3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3208      	adds	r2, #8
 8007e82:	69b9      	ldr	r1, [r7, #24]
 8007e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	2203      	movs	r2, #3
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 0203 	and.w	r2, r3, #3
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80b4 	beq.w	8008032 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	4b60      	ldr	r3, [pc, #384]	; (8008050 <HAL_GPIO_Init+0x30c>)
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	4a5f      	ldr	r2, [pc, #380]	; (8008050 <HAL_GPIO_Init+0x30c>)
 8007ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eda:	4b5d      	ldr	r3, [pc, #372]	; (8008050 <HAL_GPIO_Init+0x30c>)
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ee6:	4a5b      	ldr	r2, [pc, #364]	; (8008054 <HAL_GPIO_Init+0x310>)
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	3302      	adds	r3, #2
 8007eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	220f      	movs	r2, #15
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	43db      	mvns	r3, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	4013      	ands	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a52      	ldr	r2, [pc, #328]	; (8008058 <HAL_GPIO_Init+0x314>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d02b      	beq.n	8007f6a <HAL_GPIO_Init+0x226>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a51      	ldr	r2, [pc, #324]	; (800805c <HAL_GPIO_Init+0x318>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d025      	beq.n	8007f66 <HAL_GPIO_Init+0x222>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a50      	ldr	r2, [pc, #320]	; (8008060 <HAL_GPIO_Init+0x31c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01f      	beq.n	8007f62 <HAL_GPIO_Init+0x21e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a4f      	ldr	r2, [pc, #316]	; (8008064 <HAL_GPIO_Init+0x320>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d019      	beq.n	8007f5e <HAL_GPIO_Init+0x21a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a4e      	ldr	r2, [pc, #312]	; (8008068 <HAL_GPIO_Init+0x324>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d013      	beq.n	8007f5a <HAL_GPIO_Init+0x216>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a4d      	ldr	r2, [pc, #308]	; (800806c <HAL_GPIO_Init+0x328>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00d      	beq.n	8007f56 <HAL_GPIO_Init+0x212>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a4c      	ldr	r2, [pc, #304]	; (8008070 <HAL_GPIO_Init+0x32c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d007      	beq.n	8007f52 <HAL_GPIO_Init+0x20e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a4b      	ldr	r2, [pc, #300]	; (8008074 <HAL_GPIO_Init+0x330>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d101      	bne.n	8007f4e <HAL_GPIO_Init+0x20a>
 8007f4a:	2307      	movs	r3, #7
 8007f4c:	e00e      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f4e:	2308      	movs	r3, #8
 8007f50:	e00c      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f52:	2306      	movs	r3, #6
 8007f54:	e00a      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f56:	2305      	movs	r3, #5
 8007f58:	e008      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	e006      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e004      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f62:	2302      	movs	r3, #2
 8007f64:	e002      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <HAL_GPIO_Init+0x228>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	f002 0203 	and.w	r2, r2, #3
 8007f72:	0092      	lsls	r2, r2, #2
 8007f74:	4093      	lsls	r3, r2
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f7c:	4935      	ldr	r1, [pc, #212]	; (8008054 <HAL_GPIO_Init+0x310>)
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	089b      	lsrs	r3, r3, #2
 8007f82:	3302      	adds	r3, #2
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f8a:	4b3b      	ldr	r3, [pc, #236]	; (8008078 <HAL_GPIO_Init+0x334>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	43db      	mvns	r3, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	4013      	ands	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fae:	4a32      	ldr	r2, [pc, #200]	; (8008078 <HAL_GPIO_Init+0x334>)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fb4:	4b30      	ldr	r3, [pc, #192]	; (8008078 <HAL_GPIO_Init+0x334>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fd8:	4a27      	ldr	r2, [pc, #156]	; (8008078 <HAL_GPIO_Init+0x334>)
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007fde:	4b26      	ldr	r3, [pc, #152]	; (8008078 <HAL_GPIO_Init+0x334>)
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	4013      	ands	r3, r2
 8007fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008002:	4a1d      	ldr	r2, [pc, #116]	; (8008078 <HAL_GPIO_Init+0x334>)
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008008:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <HAL_GPIO_Init+0x334>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	43db      	mvns	r3, r3
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	4013      	ands	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800802c:	4a12      	ldr	r2, [pc, #72]	; (8008078 <HAL_GPIO_Init+0x334>)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	3301      	adds	r3, #1
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	f67f ae90 	bls.w	8007d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	3724      	adds	r7, #36	; 0x24
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40023800 	.word	0x40023800
 8008054:	40013800 	.word	0x40013800
 8008058:	40020000 	.word	0x40020000
 800805c:	40020400 	.word	0x40020400
 8008060:	40020800 	.word	0x40020800
 8008064:	40020c00 	.word	0x40020c00
 8008068:	40021000 	.word	0x40021000
 800806c:	40021400 	.word	0x40021400
 8008070:	40021800 	.word	0x40021800
 8008074:	40021c00 	.word	0x40021c00
 8008078:	40013c00 	.word	0x40013c00

0800807c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	807b      	strh	r3, [r7, #2]
 8008088:	4613      	mov	r3, r2
 800808a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800808c:	787b      	ldrb	r3, [r7, #1]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008092:	887a      	ldrh	r2, [r7, #2]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008098:	e003      	b.n	80080a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800809a:	887b      	ldrh	r3, [r7, #2]
 800809c:	041a      	lsls	r2, r3, #16
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	619a      	str	r2, [r3, #24]
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e267      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d075      	beq.n	80081ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ce:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 030c 	and.w	r3, r3, #12
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d00c      	beq.n	80080f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080da:	4b85      	ldr	r3, [pc, #532]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d112      	bne.n	800810c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080e6:	4b82      	ldr	r3, [pc, #520]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f2:	d10b      	bne.n	800810c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f4:	4b7e      	ldr	r3, [pc, #504]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d05b      	beq.n	80081b8 <HAL_RCC_OscConfig+0x108>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d157      	bne.n	80081b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e242      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008114:	d106      	bne.n	8008124 <HAL_RCC_OscConfig+0x74>
 8008116:	4b76      	ldr	r3, [pc, #472]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a75      	ldr	r2, [pc, #468]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800811c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	e01d      	b.n	8008160 <HAL_RCC_OscConfig+0xb0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800812c:	d10c      	bne.n	8008148 <HAL_RCC_OscConfig+0x98>
 800812e:	4b70      	ldr	r3, [pc, #448]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a6f      	ldr	r2, [pc, #444]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	4b6d      	ldr	r3, [pc, #436]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a6c      	ldr	r2, [pc, #432]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	e00b      	b.n	8008160 <HAL_RCC_OscConfig+0xb0>
 8008148:	4b69      	ldr	r3, [pc, #420]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a68      	ldr	r2, [pc, #416]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800814e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	4b66      	ldr	r3, [pc, #408]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a65      	ldr	r2, [pc, #404]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800815a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800815e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008168:	f7fe fdd8 	bl	8006d1c <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008170:	f7fe fdd4 	bl	8006d1c <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b64      	cmp	r3, #100	; 0x64
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e207      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008182:	4b5b      	ldr	r3, [pc, #364]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0f0      	beq.n	8008170 <HAL_RCC_OscConfig+0xc0>
 800818e:	e014      	b.n	80081ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008190:	f7fe fdc4 	bl	8006d1c <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008198:	f7fe fdc0 	bl	8006d1c <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b64      	cmp	r3, #100	; 0x64
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e1f3      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081aa:	4b51      	ldr	r3, [pc, #324]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f0      	bne.n	8008198 <HAL_RCC_OscConfig+0xe8>
 80081b6:	e000      	b.n	80081ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d063      	beq.n	800828e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081c6:	4b4a      	ldr	r3, [pc, #296]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081d2:	4b47      	ldr	r3, [pc, #284]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081da:	2b08      	cmp	r3, #8
 80081dc:	d11c      	bne.n	8008218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081de:	4b44      	ldr	r3, [pc, #272]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d116      	bne.n	8008218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ea:	4b41      	ldr	r3, [pc, #260]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_RCC_OscConfig+0x152>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d001      	beq.n	8008202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e1c7      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4937      	ldr	r1, [pc, #220]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008216:	e03a      	b.n	800828e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d020      	beq.n	8008262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008220:	4b34      	ldr	r3, [pc, #208]	; (80082f4 <HAL_RCC_OscConfig+0x244>)
 8008222:	2201      	movs	r2, #1
 8008224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008226:	f7fe fd79 	bl	8006d1c <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800822e:	f7fe fd75 	bl	8006d1c <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e1a8      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824c:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4925      	ldr	r1, [pc, #148]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	e015      	b.n	800828e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008262:	4b24      	ldr	r3, [pc, #144]	; (80082f4 <HAL_RCC_OscConfig+0x244>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fe fd58 	bl	8006d1c <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008270:	f7fe fd54 	bl	8006d1c <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e187      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	2b00      	cmp	r3, #0
 8008298:	d036      	beq.n	8008308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <HAL_RCC_OscConfig+0x248>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a8:	f7fe fd38 	bl	8006d1c <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b0:	f7fe fd34 	bl	8006d1c <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e167      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80082c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <HAL_RCC_OscConfig+0x200>
 80082ce:	e01b      	b.n	8008308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <HAL_RCC_OscConfig+0x248>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d6:	f7fe fd21 	bl	8006d1c <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082dc:	e00e      	b.n	80082fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082de:	f7fe fd1d 	bl	8006d1c <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d907      	bls.n	80082fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e150      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
 80082f0:	40023800 	.word	0x40023800
 80082f4:	42470000 	.word	0x42470000
 80082f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082fc:	4b88      	ldr	r3, [pc, #544]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80082fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1ea      	bne.n	80082de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8097 	beq.w	8008444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800831a:	4b81      	ldr	r3, [pc, #516]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10f      	bne.n	8008346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	4b7d      	ldr	r3, [pc, #500]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	4a7c      	ldr	r2, [pc, #496]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008334:	6413      	str	r3, [r2, #64]	; 0x40
 8008336:	4b7a      	ldr	r3, [pc, #488]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008346:	4b77      	ldr	r3, [pc, #476]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d118      	bne.n	8008384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008352:	4b74      	ldr	r3, [pc, #464]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a73      	ldr	r2, [pc, #460]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 8008358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800835e:	f7fe fcdd 	bl	8006d1c <HAL_GetTick>
 8008362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008364:	e008      	b.n	8008378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008366:	f7fe fcd9 	bl	8006d1c <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e10c      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008378:	4b6a      	ldr	r3, [pc, #424]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0f0      	beq.n	8008366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d106      	bne.n	800839a <HAL_RCC_OscConfig+0x2ea>
 800838c:	4b64      	ldr	r3, [pc, #400]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	4a63      	ldr	r2, [pc, #396]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	6713      	str	r3, [r2, #112]	; 0x70
 8008398:	e01c      	b.n	80083d4 <HAL_RCC_OscConfig+0x324>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0x30c>
 80083a2:	4b5f      	ldr	r3, [pc, #380]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	4a5e      	ldr	r2, [pc, #376]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083a8:	f043 0304 	orr.w	r3, r3, #4
 80083ac:	6713      	str	r3, [r2, #112]	; 0x70
 80083ae:	4b5c      	ldr	r3, [pc, #368]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	4a5b      	ldr	r2, [pc, #364]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	6713      	str	r3, [r2, #112]	; 0x70
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0x324>
 80083bc:	4b58      	ldr	r3, [pc, #352]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	4a57      	ldr	r2, [pc, #348]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	6713      	str	r3, [r2, #112]	; 0x70
 80083c8:	4b55      	ldr	r3, [pc, #340]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	4a54      	ldr	r2, [pc, #336]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083ce:	f023 0304 	bic.w	r3, r3, #4
 80083d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d015      	beq.n	8008408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083dc:	f7fe fc9e 	bl	8006d1c <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e2:	e00a      	b.n	80083fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e4:	f7fe fc9a 	bl	8006d1c <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e0cb      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fa:	4b49      	ldr	r3, [pc, #292]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0ee      	beq.n	80083e4 <HAL_RCC_OscConfig+0x334>
 8008406:	e014      	b.n	8008432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008408:	f7fe fc88 	bl	8006d1c <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800840e:	e00a      	b.n	8008426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008410:	f7fe fc84 	bl	8006d1c <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	f241 3288 	movw	r2, #5000	; 0x1388
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e0b5      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008426:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1ee      	bne.n	8008410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d105      	bne.n	8008444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008438:	4b39      	ldr	r3, [pc, #228]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	4a38      	ldr	r2, [pc, #224]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800843e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80a1 	beq.w	8008590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800844e:	4b34      	ldr	r3, [pc, #208]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	2b08      	cmp	r3, #8
 8008458:	d05c      	beq.n	8008514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d141      	bne.n	80084e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <HAL_RCC_OscConfig+0x478>)
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008468:	f7fe fc58 	bl	8006d1c <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008470:	f7fe fc54 	bl	8006d1c <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e087      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008482:	4b27      	ldr	r3, [pc, #156]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69da      	ldr	r2, [r3, #28]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	019b      	lsls	r3, r3, #6
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	3b01      	subs	r3, #1
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	061b      	lsls	r3, r3, #24
 80084b2:	491b      	ldr	r1, [pc, #108]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084b8:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <HAL_RCC_OscConfig+0x478>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084be:	f7fe fc2d 	bl	8006d1c <HAL_GetTick>
 80084c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c4:	e008      	b.n	80084d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c6:	f7fe fc29 	bl	8006d1c <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d901      	bls.n	80084d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e05c      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084d8:	4b11      	ldr	r3, [pc, #68]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0f0      	beq.n	80084c6 <HAL_RCC_OscConfig+0x416>
 80084e4:	e054      	b.n	8008590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e6:	4b10      	ldr	r3, [pc, #64]	; (8008528 <HAL_RCC_OscConfig+0x478>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ec:	f7fe fc16 	bl	8006d1c <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f4:	f7fe fc12 	bl	8006d1c <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e045      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <HAL_RCC_OscConfig+0x444>
 8008512:	e03d      	b.n	8008590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d107      	bne.n	800852c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e038      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
 8008520:	40023800 	.word	0x40023800
 8008524:	40007000 	.word	0x40007000
 8008528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <HAL_RCC_OscConfig+0x4ec>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d028      	beq.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008544:	429a      	cmp	r2, r3
 8008546:	d121      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008552:	429a      	cmp	r2, r3
 8008554:	d11a      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800855c:	4013      	ands	r3, r2
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008564:	4293      	cmp	r3, r2
 8008566:	d111      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	3b01      	subs	r3, #1
 8008576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008578:	429a      	cmp	r2, r3
 800857a:	d107      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008588:	429a      	cmp	r2, r3
 800858a:	d001      	beq.n	8008590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	40023800 	.word	0x40023800

080085a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0cc      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085b4:	4b68      	ldr	r3, [pc, #416]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d90c      	bls.n	80085dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c2:	4b65      	ldr	r3, [pc, #404]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ca:	4b63      	ldr	r3, [pc, #396]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d001      	beq.n	80085dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e0b8      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085f4:	4b59      	ldr	r3, [pc, #356]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	4a58      	ldr	r2, [pc, #352]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800860c:	4b53      	ldr	r3, [pc, #332]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4a52      	ldr	r2, [pc, #328]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008618:	4b50      	ldr	r3, [pc, #320]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	494d      	ldr	r1, [pc, #308]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008626:	4313      	orrs	r3, r2
 8008628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d044      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d107      	bne.n	800864e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800863e:	4b47      	ldr	r3, [pc, #284]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d119      	bne.n	800867e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e07f      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d003      	beq.n	800865e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800865a:	2b03      	cmp	r3, #3
 800865c:	d107      	bne.n	800866e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800865e:	4b3f      	ldr	r3, [pc, #252]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e06f      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	4b3b      	ldr	r3, [pc, #236]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e067      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800867e:	4b37      	ldr	r3, [pc, #220]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f023 0203 	bic.w	r2, r3, #3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4934      	ldr	r1, [pc, #208]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800868c:	4313      	orrs	r3, r2
 800868e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008690:	f7fe fb44 	bl	8006d1c <HAL_GetTick>
 8008694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008696:	e00a      	b.n	80086ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008698:	f7fe fb40 	bl	8006d1c <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e04f      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ae:	4b2b      	ldr	r3, [pc, #172]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 020c 	and.w	r2, r3, #12
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	429a      	cmp	r2, r3
 80086be:	d1eb      	bne.n	8008698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086c0:	4b25      	ldr	r3, [pc, #148]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d20c      	bcs.n	80086e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ce:	4b22      	ldr	r3, [pc, #136]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086d6:	4b20      	ldr	r3, [pc, #128]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d001      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e032      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086f4:	4b19      	ldr	r3, [pc, #100]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4916      	ldr	r1, [pc, #88]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008702:	4313      	orrs	r3, r2
 8008704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008712:	4b12      	ldr	r3, [pc, #72]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	490e      	ldr	r1, [pc, #56]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008722:	4313      	orrs	r3, r2
 8008724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008726:	f000 f821 	bl	800876c <HAL_RCC_GetSysClockFreq>
 800872a:	4602      	mov	r2, r0
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	490a      	ldr	r1, [pc, #40]	; (8008760 <HAL_RCC_ClockConfig+0x1c0>)
 8008738:	5ccb      	ldrb	r3, [r1, r3]
 800873a:	fa22 f303 	lsr.w	r3, r2, r3
 800873e:	4a09      	ldr	r2, [pc, #36]	; (8008764 <HAL_RCC_ClockConfig+0x1c4>)
 8008740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008742:	4b09      	ldr	r3, [pc, #36]	; (8008768 <HAL_RCC_ClockConfig+0x1c8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe faa4 	bl	8006c94 <HAL_InitTick>

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40023c00 	.word	0x40023c00
 800875c:	40023800 	.word	0x40023800
 8008760:	0800ad70 	.word	0x0800ad70
 8008764:	20000180 	.word	0x20000180
 8008768:	20000184 	.word	0x20000184

0800876c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800876c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008770:	b094      	sub	sp, #80	; 0x50
 8008772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	2300      	movs	r3, #0
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877c:	2300      	movs	r3, #0
 800877e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008784:	4b79      	ldr	r3, [pc, #484]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 030c 	and.w	r3, r3, #12
 800878c:	2b08      	cmp	r3, #8
 800878e:	d00d      	beq.n	80087ac <HAL_RCC_GetSysClockFreq+0x40>
 8008790:	2b08      	cmp	r3, #8
 8008792:	f200 80e1 	bhi.w	8008958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_RCC_GetSysClockFreq+0x34>
 800879a:	2b04      	cmp	r3, #4
 800879c:	d003      	beq.n	80087a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800879e:	e0db      	b.n	8008958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087a0:	4b73      	ldr	r3, [pc, #460]	; (8008970 <HAL_RCC_GetSysClockFreq+0x204>)
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80087a4:	e0db      	b.n	800895e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087a6:	4b73      	ldr	r3, [pc, #460]	; (8008974 <HAL_RCC_GetSysClockFreq+0x208>)
 80087a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087aa:	e0d8      	b.n	800895e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087ac:	4b6f      	ldr	r3, [pc, #444]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087b6:	4b6d      	ldr	r3, [pc, #436]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d063      	beq.n	800888a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087c2:	4b6a      	ldr	r3, [pc, #424]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	099b      	lsrs	r3, r3, #6
 80087c8:	2200      	movs	r2, #0
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80087cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	633b      	str	r3, [r7, #48]	; 0x30
 80087d6:	2300      	movs	r3, #0
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
 80087da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80087de:	4622      	mov	r2, r4
 80087e0:	462b      	mov	r3, r5
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	0159      	lsls	r1, r3, #5
 80087ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087f0:	0150      	lsls	r0, r2, #5
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4621      	mov	r1, r4
 80087f8:	1a51      	subs	r1, r2, r1
 80087fa:	6139      	str	r1, [r7, #16]
 80087fc:	4629      	mov	r1, r5
 80087fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008810:	4659      	mov	r1, fp
 8008812:	018b      	lsls	r3, r1, #6
 8008814:	4651      	mov	r1, sl
 8008816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800881a:	4651      	mov	r1, sl
 800881c:	018a      	lsls	r2, r1, #6
 800881e:	4651      	mov	r1, sl
 8008820:	ebb2 0801 	subs.w	r8, r2, r1
 8008824:	4659      	mov	r1, fp
 8008826:	eb63 0901 	sbc.w	r9, r3, r1
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800883a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800883e:	4690      	mov	r8, r2
 8008840:	4699      	mov	r9, r3
 8008842:	4623      	mov	r3, r4
 8008844:	eb18 0303 	adds.w	r3, r8, r3
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	462b      	mov	r3, r5
 800884c:	eb49 0303 	adc.w	r3, r9, r3
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800885e:	4629      	mov	r1, r5
 8008860:	024b      	lsls	r3, r1, #9
 8008862:	4621      	mov	r1, r4
 8008864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008868:	4621      	mov	r1, r4
 800886a:	024a      	lsls	r2, r1, #9
 800886c:	4610      	mov	r0, r2
 800886e:	4619      	mov	r1, r3
 8008870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008872:	2200      	movs	r2, #0
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
 8008876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800887c:	f7f7 fd00 	bl	8000280 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4613      	mov	r3, r2
 8008886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008888:	e058      	b.n	800893c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800888a:	4b38      	ldr	r3, [pc, #224]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	099b      	lsrs	r3, r3, #6
 8008890:	2200      	movs	r2, #0
 8008892:	4618      	mov	r0, r3
 8008894:	4611      	mov	r1, r2
 8008896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	2300      	movs	r3, #0
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
 80088a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	f04f 0000 	mov.w	r0, #0
 80088ac:	f04f 0100 	mov.w	r1, #0
 80088b0:	0159      	lsls	r1, r3, #5
 80088b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088b6:	0150      	lsls	r0, r2, #5
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4641      	mov	r1, r8
 80088be:	ebb2 0a01 	subs.w	sl, r2, r1
 80088c2:	4649      	mov	r1, r9
 80088c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088dc:	ebb2 040a 	subs.w	r4, r2, sl
 80088e0:	eb63 050b 	sbc.w	r5, r3, fp
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	00eb      	lsls	r3, r5, #3
 80088ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088f2:	00e2      	lsls	r2, r4, #3
 80088f4:	4614      	mov	r4, r2
 80088f6:	461d      	mov	r5, r3
 80088f8:	4643      	mov	r3, r8
 80088fa:	18e3      	adds	r3, r4, r3
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	464b      	mov	r3, r9
 8008900:	eb45 0303 	adc.w	r3, r5, r3
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	f04f 0200 	mov.w	r2, #0
 800890a:	f04f 0300 	mov.w	r3, #0
 800890e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008912:	4629      	mov	r1, r5
 8008914:	028b      	lsls	r3, r1, #10
 8008916:	4621      	mov	r1, r4
 8008918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800891c:	4621      	mov	r1, r4
 800891e:	028a      	lsls	r2, r1, #10
 8008920:	4610      	mov	r0, r2
 8008922:	4619      	mov	r1, r3
 8008924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008926:	2200      	movs	r2, #0
 8008928:	61bb      	str	r3, [r7, #24]
 800892a:	61fa      	str	r2, [r7, #28]
 800892c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008930:	f7f7 fca6 	bl	8000280 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4613      	mov	r3, r2
 800893a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	3301      	adds	r3, #1
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800894c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800894e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008950:	fbb2 f3f3 	udiv	r3, r2, r3
 8008954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008956:	e002      	b.n	800895e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_RCC_GetSysClockFreq+0x204>)
 800895a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800895c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008960:	4618      	mov	r0, r3
 8008962:	3750      	adds	r7, #80	; 0x50
 8008964:	46bd      	mov	sp, r7
 8008966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896a:	bf00      	nop
 800896c:	40023800 	.word	0x40023800
 8008970:	00f42400 	.word	0x00f42400
 8008974:	007a1200 	.word	0x007a1200

08008978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <HAL_RCC_GetHCLKFreq+0x14>)
 800897e:	681b      	ldr	r3, [r3, #0]
}
 8008980:	4618      	mov	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000180 	.word	0x20000180

08008990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008994:	f7ff fff0 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8008998:	4602      	mov	r2, r0
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	0a9b      	lsrs	r3, r3, #10
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	4903      	ldr	r1, [pc, #12]	; (80089b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089a6:	5ccb      	ldrb	r3, [r1, r3]
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40023800 	.word	0x40023800
 80089b4:	0800ad80 	.word	0x0800ad80

080089b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089bc:	f7ff ffdc 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 80089c0:	4602      	mov	r2, r0
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	0b5b      	lsrs	r3, r3, #13
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	4903      	ldr	r1, [pc, #12]	; (80089dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ce:	5ccb      	ldrb	r3, [r1, r3]
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40023800 	.word	0x40023800
 80089dc:	0800ad80 	.word	0x0800ad80

080089e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e041      	b.n	8008a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fd ff76 	bl	80068f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f000 f9fe 	bl	8008e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d001      	beq.n	8008a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e04e      	b.n	8008b36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0201 	orr.w	r2, r2, #1
 8008aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a23      	ldr	r2, [pc, #140]	; (8008b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d022      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac2:	d01d      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1f      	ldr	r2, [pc, #124]	; (8008b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d018      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1e      	ldr	r2, [pc, #120]	; (8008b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d013      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1c      	ldr	r2, [pc, #112]	; (8008b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00e      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1b      	ldr	r2, [pc, #108]	; (8008b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d009      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x80>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d111      	bne.n	8008b24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	d010      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b22:	e007      	b.n	8008b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f042 0201 	orr.w	r2, r2, #1
 8008b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	40010000 	.word	0x40010000
 8008b48:	40000400 	.word	0x40000400
 8008b4c:	40000800 	.word	0x40000800
 8008b50:	40000c00 	.word	0x40000c00
 8008b54:	40010400 	.word	0x40010400
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40001800 	.word	0x40001800

08008b60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10f      	bne.n	8008ba8 <HAL_TIM_Base_Stop_IT+0x48>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	f240 4344 	movw	r3, #1092	; 0x444
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d107      	bne.n	8008ba8 <HAL_TIM_Base_Stop_IT+0x48>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d122      	bne.n	8008c1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d11b      	bne.n	8008c1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f06f 0202 	mvn.w	r2, #2
 8008bea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f8ee 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 8008c06:	e005      	b.n	8008c14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f8e0 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8f1 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d122      	bne.n	8008c6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	d11b      	bne.n	8008c6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f06f 0204 	mvn.w	r2, #4
 8008c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f8c4 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 8008c5a:	e005      	b.n	8008c68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f8b6 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f8c7 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d122      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d11b      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0208 	mvn.w	r2, #8
 8008c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2204      	movs	r2, #4
 8008c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f89a 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 8008cae:	e005      	b.n	8008cbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f88c 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f89d 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d122      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0310 	and.w	r3, r3, #16
 8008cda:	2b10      	cmp	r3, #16
 8008cdc:	d11b      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f06f 0210 	mvn.w	r2, #16
 8008ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2208      	movs	r2, #8
 8008cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f870 	bl	8008de2 <HAL_TIM_IC_CaptureCallback>
 8008d02:	e005      	b.n	8008d10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f862 	bl	8008dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f873 	bl	8008df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d10e      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d107      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f06f 0201 	mvn.w	r2, #1
 8008d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7fd fb37 	bl	80063b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4c:	2b80      	cmp	r3, #128	; 0x80
 8008d4e:	d10e      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5a:	2b80      	cmp	r3, #128	; 0x80
 8008d5c:	d107      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f903 	bl	8008f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d10e      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b40      	cmp	r3, #64	; 0x40
 8008d88:	d107      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f838 	bl	8008e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d10e      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d107      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f06f 0220 	mvn.w	r2, #32
 8008dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8cd 	bl	8008f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a40      	ldr	r2, [pc, #256]	; (8008f34 <TIM_Base_SetConfig+0x114>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d013      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3e:	d00f      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a3d      	ldr	r2, [pc, #244]	; (8008f38 <TIM_Base_SetConfig+0x118>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00b      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a3c      	ldr	r2, [pc, #240]	; (8008f3c <TIM_Base_SetConfig+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d007      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a3b      	ldr	r2, [pc, #236]	; (8008f40 <TIM_Base_SetConfig+0x120>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a3a      	ldr	r2, [pc, #232]	; (8008f44 <TIM_Base_SetConfig+0x124>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d108      	bne.n	8008e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a2f      	ldr	r2, [pc, #188]	; (8008f34 <TIM_Base_SetConfig+0x114>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d02b      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e80:	d027      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a2c      	ldr	r2, [pc, #176]	; (8008f38 <TIM_Base_SetConfig+0x118>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d023      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a2b      	ldr	r2, [pc, #172]	; (8008f3c <TIM_Base_SetConfig+0x11c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d01f      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a2a      	ldr	r2, [pc, #168]	; (8008f40 <TIM_Base_SetConfig+0x120>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01b      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <TIM_Base_SetConfig+0x124>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d017      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a28      	ldr	r2, [pc, #160]	; (8008f48 <TIM_Base_SetConfig+0x128>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a27      	ldr	r2, [pc, #156]	; (8008f4c <TIM_Base_SetConfig+0x12c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00f      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a26      	ldr	r2, [pc, #152]	; (8008f50 <TIM_Base_SetConfig+0x130>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00b      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a25      	ldr	r2, [pc, #148]	; (8008f54 <TIM_Base_SetConfig+0x134>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d007      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a24      	ldr	r2, [pc, #144]	; (8008f58 <TIM_Base_SetConfig+0x138>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d003      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a23      	ldr	r2, [pc, #140]	; (8008f5c <TIM_Base_SetConfig+0x13c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d108      	bne.n	8008ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <TIM_Base_SetConfig+0x114>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_Base_SetConfig+0xf8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <TIM_Base_SetConfig+0x124>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d103      	bne.n	8008f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	691a      	ldr	r2, [r3, #16]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	615a      	str	r2, [r3, #20]
}
 8008f26:	bf00      	nop
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40010000 	.word	0x40010000
 8008f38:	40000400 	.word	0x40000400
 8008f3c:	40000800 	.word	0x40000800
 8008f40:	40000c00 	.word	0x40000c00
 8008f44:	40010400 	.word	0x40010400
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800
 8008f54:	40001800 	.word	0x40001800
 8008f58:	40001c00 	.word	0x40001c00
 8008f5c:	40002000 	.word	0x40002000

08008f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e03f      	b.n	800901a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7fd fcca 	bl	8006948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2224      	movs	r2, #36	; 0x24
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f929 	bl	8009224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691a      	ldr	r2, [r3, #16]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b08a      	sub	sp, #40	; 0x28
 8009026:	af02      	add	r7, sp, #8
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	4613      	mov	r3, r2
 8009030:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b20      	cmp	r3, #32
 8009040:	d17c      	bne.n	800913c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <HAL_UART_Transmit+0x2c>
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e075      	b.n	800913e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_UART_Transmit+0x3e>
 800905c:	2302      	movs	r3, #2
 800905e:	e06e      	b.n	800913e <HAL_UART_Transmit+0x11c>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2221      	movs	r2, #33	; 0x21
 8009072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009076:	f7fd fe51 	bl	8006d1c <HAL_GetTick>
 800907a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	88fa      	ldrh	r2, [r7, #6]
 8009086:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009090:	d108      	bne.n	80090a4 <HAL_UART_Transmit+0x82>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d104      	bne.n	80090a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	e003      	b.n	80090ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090a8:	2300      	movs	r3, #0
 80090aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090b4:	e02a      	b.n	800910c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2200      	movs	r2, #0
 80090be:	2180      	movs	r1, #128	; 0x80
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f840 	bl	8009146 <UART_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e036      	b.n	800913e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	3302      	adds	r3, #2
 80090ea:	61bb      	str	r3, [r7, #24]
 80090ec:	e007      	b.n	80090fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	3301      	adds	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009102:	b29b      	uxth	r3, r3
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1cf      	bne.n	80090b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2200      	movs	r2, #0
 800911e:	2140      	movs	r1, #64	; 0x40
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f810 	bl	8009146 <UART_WaitOnFlagUntilTimeout>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e006      	b.n	800913e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b090      	sub	sp, #64	; 0x40
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	4613      	mov	r3, r2
 8009154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009156:	e050      	b.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d04c      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <UART_WaitOnFlagUntilTimeout+0x30>
 8009166:	f7fd fdd9 	bl	8006d1c <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009172:	429a      	cmp	r2, r3
 8009174:	d241      	bcs.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	330c      	adds	r3, #12
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	330c      	adds	r3, #12
 8009194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009196:	637a      	str	r2, [r7, #52]	; 0x34
 8009198:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800919c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3314      	adds	r3, #20
 80091b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f023 0301 	bic.w	r3, r3, #1
 80091c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3314      	adds	r3, #20
 80091c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ca:	623a      	str	r2, [r7, #32]
 80091cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	69f9      	ldr	r1, [r7, #28]
 80091d0:	6a3a      	ldr	r2, [r7, #32]
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e5      	bne.n	80091aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e00f      	b.n	800921a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4013      	ands	r3, r2
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	429a      	cmp	r2, r3
 8009208:	bf0c      	ite	eq
 800920a:	2301      	moveq	r3, #1
 800920c:	2300      	movne	r3, #0
 800920e:	b2db      	uxtb	r3, r3
 8009210:	461a      	mov	r2, r3
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	429a      	cmp	r2, r3
 8009216:	d09f      	beq.n	8009158 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3740      	adds	r7, #64	; 0x40
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009228:	b0c0      	sub	sp, #256	; 0x100
 800922a:	af00      	add	r7, sp, #0
 800922c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009240:	68d9      	ldr	r1, [r3, #12]
 8009242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	ea40 0301 	orr.w	r3, r0, r1
 800924c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	431a      	orrs	r2, r3
 800925c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	431a      	orrs	r2, r3
 8009264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800927c:	f021 010c 	bic.w	r1, r1, #12
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800928a:	430b      	orrs	r3, r1
 800928c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800928e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800929a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929e:	6999      	ldr	r1, [r3, #24]
 80092a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	ea40 0301 	orr.w	r3, r0, r1
 80092aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b8f      	ldr	r3, [pc, #572]	; (80094f0 <UART_SetConfig+0x2cc>)
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d005      	beq.n	80092c4 <UART_SetConfig+0xa0>
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b8d      	ldr	r3, [pc, #564]	; (80094f4 <UART_SetConfig+0x2d0>)
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d104      	bne.n	80092ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092c4:	f7ff fb78 	bl	80089b8 <HAL_RCC_GetPCLK2Freq>
 80092c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092cc:	e003      	b.n	80092d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092ce:	f7ff fb5f 	bl	8008990 <HAL_RCC_GetPCLK1Freq>
 80092d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092e0:	f040 810c 	bne.w	80094fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092f6:	4622      	mov	r2, r4
 80092f8:	462b      	mov	r3, r5
 80092fa:	1891      	adds	r1, r2, r2
 80092fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80092fe:	415b      	adcs	r3, r3
 8009300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009306:	4621      	mov	r1, r4
 8009308:	eb12 0801 	adds.w	r8, r2, r1
 800930c:	4629      	mov	r1, r5
 800930e:	eb43 0901 	adc.w	r9, r3, r1
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	f04f 0300 	mov.w	r3, #0
 800931a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800931e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009326:	4690      	mov	r8, r2
 8009328:	4699      	mov	r9, r3
 800932a:	4623      	mov	r3, r4
 800932c:	eb18 0303 	adds.w	r3, r8, r3
 8009330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009334:	462b      	mov	r3, r5
 8009336:	eb49 0303 	adc.w	r3, r9, r3
 800933a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800934a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800934e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009352:	460b      	mov	r3, r1
 8009354:	18db      	adds	r3, r3, r3
 8009356:	653b      	str	r3, [r7, #80]	; 0x50
 8009358:	4613      	mov	r3, r2
 800935a:	eb42 0303 	adc.w	r3, r2, r3
 800935e:	657b      	str	r3, [r7, #84]	; 0x54
 8009360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009368:	f7f6 ff8a 	bl	8000280 <__aeabi_uldivmod>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4b61      	ldr	r3, [pc, #388]	; (80094f8 <UART_SetConfig+0x2d4>)
 8009372:	fba3 2302 	umull	r2, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	011c      	lsls	r4, r3, #4
 800937a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800937e:	2200      	movs	r2, #0
 8009380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800938c:	4642      	mov	r2, r8
 800938e:	464b      	mov	r3, r9
 8009390:	1891      	adds	r1, r2, r2
 8009392:	64b9      	str	r1, [r7, #72]	; 0x48
 8009394:	415b      	adcs	r3, r3
 8009396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800939c:	4641      	mov	r1, r8
 800939e:	eb12 0a01 	adds.w	sl, r2, r1
 80093a2:	4649      	mov	r1, r9
 80093a4:	eb43 0b01 	adc.w	fp, r3, r1
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093bc:	4692      	mov	sl, r2
 80093be:	469b      	mov	fp, r3
 80093c0:	4643      	mov	r3, r8
 80093c2:	eb1a 0303 	adds.w	r3, sl, r3
 80093c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093ca:	464b      	mov	r3, r9
 80093cc:	eb4b 0303 	adc.w	r3, fp, r3
 80093d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093e8:	460b      	mov	r3, r1
 80093ea:	18db      	adds	r3, r3, r3
 80093ec:	643b      	str	r3, [r7, #64]	; 0x40
 80093ee:	4613      	mov	r3, r2
 80093f0:	eb42 0303 	adc.w	r3, r2, r3
 80093f4:	647b      	str	r3, [r7, #68]	; 0x44
 80093f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093fe:	f7f6 ff3f 	bl	8000280 <__aeabi_uldivmod>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4611      	mov	r1, r2
 8009408:	4b3b      	ldr	r3, [pc, #236]	; (80094f8 <UART_SetConfig+0x2d4>)
 800940a:	fba3 2301 	umull	r2, r3, r3, r1
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	2264      	movs	r2, #100	; 0x64
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	1acb      	subs	r3, r1, r3
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800941e:	4b36      	ldr	r3, [pc, #216]	; (80094f8 <UART_SetConfig+0x2d4>)
 8009420:	fba3 2302 	umull	r2, r3, r3, r2
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800942c:	441c      	add	r4, r3
 800942e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009432:	2200      	movs	r2, #0
 8009434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800943c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	1891      	adds	r1, r2, r2
 8009446:	63b9      	str	r1, [r7, #56]	; 0x38
 8009448:	415b      	adcs	r3, r3
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009450:	4641      	mov	r1, r8
 8009452:	1851      	adds	r1, r2, r1
 8009454:	6339      	str	r1, [r7, #48]	; 0x30
 8009456:	4649      	mov	r1, r9
 8009458:	414b      	adcs	r3, r1
 800945a:	637b      	str	r3, [r7, #52]	; 0x34
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009468:	4659      	mov	r1, fp
 800946a:	00cb      	lsls	r3, r1, #3
 800946c:	4651      	mov	r1, sl
 800946e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009472:	4651      	mov	r1, sl
 8009474:	00ca      	lsls	r2, r1, #3
 8009476:	4610      	mov	r0, r2
 8009478:	4619      	mov	r1, r3
 800947a:	4603      	mov	r3, r0
 800947c:	4642      	mov	r2, r8
 800947e:	189b      	adds	r3, r3, r2
 8009480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009484:	464b      	mov	r3, r9
 8009486:	460a      	mov	r2, r1
 8009488:	eb42 0303 	adc.w	r3, r2, r3
 800948c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800949c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80094a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80094a4:	460b      	mov	r3, r1
 80094a6:	18db      	adds	r3, r3, r3
 80094a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094aa:	4613      	mov	r3, r2
 80094ac:	eb42 0303 	adc.w	r3, r2, r3
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80094ba:	f7f6 fee1 	bl	8000280 <__aeabi_uldivmod>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <UART_SetConfig+0x2d4>)
 80094c4:	fba3 1302 	umull	r1, r3, r3, r2
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	2164      	movs	r1, #100	; 0x64
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	3332      	adds	r3, #50	; 0x32
 80094d6:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <UART_SetConfig+0x2d4>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	f003 0207 	and.w	r2, r3, #7
 80094e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4422      	add	r2, r4
 80094ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094ec:	e105      	b.n	80096fa <UART_SetConfig+0x4d6>
 80094ee:	bf00      	nop
 80094f0:	40011000 	.word	0x40011000
 80094f4:	40011400 	.word	0x40011400
 80094f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009500:	2200      	movs	r2, #0
 8009502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800950a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800950e:	4642      	mov	r2, r8
 8009510:	464b      	mov	r3, r9
 8009512:	1891      	adds	r1, r2, r2
 8009514:	6239      	str	r1, [r7, #32]
 8009516:	415b      	adcs	r3, r3
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
 800951a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800951e:	4641      	mov	r1, r8
 8009520:	1854      	adds	r4, r2, r1
 8009522:	4649      	mov	r1, r9
 8009524:	eb43 0501 	adc.w	r5, r3, r1
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	00eb      	lsls	r3, r5, #3
 8009532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009536:	00e2      	lsls	r2, r4, #3
 8009538:	4614      	mov	r4, r2
 800953a:	461d      	mov	r5, r3
 800953c:	4643      	mov	r3, r8
 800953e:	18e3      	adds	r3, r4, r3
 8009540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009544:	464b      	mov	r3, r9
 8009546:	eb45 0303 	adc.w	r3, r5, r3
 800954a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800954e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800955a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800956a:	4629      	mov	r1, r5
 800956c:	008b      	lsls	r3, r1, #2
 800956e:	4621      	mov	r1, r4
 8009570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009574:	4621      	mov	r1, r4
 8009576:	008a      	lsls	r2, r1, #2
 8009578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800957c:	f7f6 fe80 	bl	8000280 <__aeabi_uldivmod>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4b60      	ldr	r3, [pc, #384]	; (8009708 <UART_SetConfig+0x4e4>)
 8009586:	fba3 2302 	umull	r2, r3, r3, r2
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	011c      	lsls	r4, r3, #4
 800958e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009592:	2200      	movs	r2, #0
 8009594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800959c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80095a0:	4642      	mov	r2, r8
 80095a2:	464b      	mov	r3, r9
 80095a4:	1891      	adds	r1, r2, r2
 80095a6:	61b9      	str	r1, [r7, #24]
 80095a8:	415b      	adcs	r3, r3
 80095aa:	61fb      	str	r3, [r7, #28]
 80095ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095b0:	4641      	mov	r1, r8
 80095b2:	1851      	adds	r1, r2, r1
 80095b4:	6139      	str	r1, [r7, #16]
 80095b6:	4649      	mov	r1, r9
 80095b8:	414b      	adcs	r3, r1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095c8:	4659      	mov	r1, fp
 80095ca:	00cb      	lsls	r3, r1, #3
 80095cc:	4651      	mov	r1, sl
 80095ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095d2:	4651      	mov	r1, sl
 80095d4:	00ca      	lsls	r2, r1, #3
 80095d6:	4610      	mov	r0, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	4603      	mov	r3, r0
 80095dc:	4642      	mov	r2, r8
 80095de:	189b      	adds	r3, r3, r2
 80095e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095e4:	464b      	mov	r3, r9
 80095e6:	460a      	mov	r2, r1
 80095e8:	eb42 0303 	adc.w	r3, r2, r3
 80095ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80095fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009608:	4649      	mov	r1, r9
 800960a:	008b      	lsls	r3, r1, #2
 800960c:	4641      	mov	r1, r8
 800960e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009612:	4641      	mov	r1, r8
 8009614:	008a      	lsls	r2, r1, #2
 8009616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800961a:	f7f6 fe31 	bl	8000280 <__aeabi_uldivmod>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4b39      	ldr	r3, [pc, #228]	; (8009708 <UART_SetConfig+0x4e4>)
 8009624:	fba3 1302 	umull	r1, r3, r3, r2
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	2164      	movs	r1, #100	; 0x64
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	011b      	lsls	r3, r3, #4
 8009634:	3332      	adds	r3, #50	; 0x32
 8009636:	4a34      	ldr	r2, [pc, #208]	; (8009708 <UART_SetConfig+0x4e4>)
 8009638:	fba2 2303 	umull	r2, r3, r2, r3
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009642:	441c      	add	r4, r3
 8009644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009648:	2200      	movs	r2, #0
 800964a:	673b      	str	r3, [r7, #112]	; 0x70
 800964c:	677a      	str	r2, [r7, #116]	; 0x74
 800964e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009652:	4642      	mov	r2, r8
 8009654:	464b      	mov	r3, r9
 8009656:	1891      	adds	r1, r2, r2
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	415b      	adcs	r3, r3
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009662:	4641      	mov	r1, r8
 8009664:	1851      	adds	r1, r2, r1
 8009666:	6039      	str	r1, [r7, #0]
 8009668:	4649      	mov	r1, r9
 800966a:	414b      	adcs	r3, r1
 800966c:	607b      	str	r3, [r7, #4]
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	f04f 0300 	mov.w	r3, #0
 8009676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800967a:	4659      	mov	r1, fp
 800967c:	00cb      	lsls	r3, r1, #3
 800967e:	4651      	mov	r1, sl
 8009680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009684:	4651      	mov	r1, sl
 8009686:	00ca      	lsls	r2, r1, #3
 8009688:	4610      	mov	r0, r2
 800968a:	4619      	mov	r1, r3
 800968c:	4603      	mov	r3, r0
 800968e:	4642      	mov	r2, r8
 8009690:	189b      	adds	r3, r3, r2
 8009692:	66bb      	str	r3, [r7, #104]	; 0x68
 8009694:	464b      	mov	r3, r9
 8009696:	460a      	mov	r2, r1
 8009698:	eb42 0303 	adc.w	r3, r2, r3
 800969c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800969e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	663b      	str	r3, [r7, #96]	; 0x60
 80096a8:	667a      	str	r2, [r7, #100]	; 0x64
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80096b6:	4649      	mov	r1, r9
 80096b8:	008b      	lsls	r3, r1, #2
 80096ba:	4641      	mov	r1, r8
 80096bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096c0:	4641      	mov	r1, r8
 80096c2:	008a      	lsls	r2, r1, #2
 80096c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096c8:	f7f6 fdda 	bl	8000280 <__aeabi_uldivmod>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <UART_SetConfig+0x4e4>)
 80096d2:	fba3 1302 	umull	r1, r3, r3, r2
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	2164      	movs	r1, #100	; 0x64
 80096da:	fb01 f303 	mul.w	r3, r1, r3
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	3332      	adds	r3, #50	; 0x32
 80096e4:	4a08      	ldr	r2, [pc, #32]	; (8009708 <UART_SetConfig+0x4e4>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4422      	add	r2, r4
 80096f8:	609a      	str	r2, [r3, #8]
}
 80096fa:	bf00      	nop
 80096fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009700:	46bd      	mov	sp, r7
 8009702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009706:	bf00      	nop
 8009708:	51eb851f 	.word	0x51eb851f

0800970c <calloc>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <calloc+0xc>)
 800970e:	460a      	mov	r2, r1
 8009710:	4601      	mov	r1, r0
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	f000 ba32 	b.w	8009b7c <_calloc_r>
 8009718:	2000018c 	.word	0x2000018c

0800971c <__errno>:
 800971c:	4b01      	ldr	r3, [pc, #4]	; (8009724 <__errno+0x8>)
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2000018c 	.word	0x2000018c

08009728 <__sflush_r>:
 8009728:	898a      	ldrh	r2, [r1, #12]
 800972a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972e:	4605      	mov	r5, r0
 8009730:	0710      	lsls	r0, r2, #28
 8009732:	460c      	mov	r4, r1
 8009734:	d458      	bmi.n	80097e8 <__sflush_r+0xc0>
 8009736:	684b      	ldr	r3, [r1, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	dc05      	bgt.n	8009748 <__sflush_r+0x20>
 800973c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	dc02      	bgt.n	8009748 <__sflush_r+0x20>
 8009742:	2000      	movs	r0, #0
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800974a:	2e00      	cmp	r6, #0
 800974c:	d0f9      	beq.n	8009742 <__sflush_r+0x1a>
 800974e:	2300      	movs	r3, #0
 8009750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009754:	682f      	ldr	r7, [r5, #0]
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	d032      	beq.n	80097c0 <__sflush_r+0x98>
 800975a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	075a      	lsls	r2, r3, #29
 8009760:	d505      	bpl.n	800976e <__sflush_r+0x46>
 8009762:	6863      	ldr	r3, [r4, #4]
 8009764:	1ac0      	subs	r0, r0, r3
 8009766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009768:	b10b      	cbz	r3, 800976e <__sflush_r+0x46>
 800976a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800976c:	1ac0      	subs	r0, r0, r3
 800976e:	2300      	movs	r3, #0
 8009770:	4602      	mov	r2, r0
 8009772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009774:	6a21      	ldr	r1, [r4, #32]
 8009776:	4628      	mov	r0, r5
 8009778:	47b0      	blx	r6
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	d106      	bne.n	800978e <__sflush_r+0x66>
 8009780:	6829      	ldr	r1, [r5, #0]
 8009782:	291d      	cmp	r1, #29
 8009784:	d82c      	bhi.n	80097e0 <__sflush_r+0xb8>
 8009786:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <__sflush_r+0x108>)
 8009788:	40ca      	lsrs	r2, r1
 800978a:	07d6      	lsls	r6, r2, #31
 800978c:	d528      	bpl.n	80097e0 <__sflush_r+0xb8>
 800978e:	2200      	movs	r2, #0
 8009790:	6062      	str	r2, [r4, #4]
 8009792:	04d9      	lsls	r1, r3, #19
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	d504      	bpl.n	80097a4 <__sflush_r+0x7c>
 800979a:	1c42      	adds	r2, r0, #1
 800979c:	d101      	bne.n	80097a2 <__sflush_r+0x7a>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b903      	cbnz	r3, 80097a4 <__sflush_r+0x7c>
 80097a2:	6560      	str	r0, [r4, #84]	; 0x54
 80097a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097a6:	602f      	str	r7, [r5, #0]
 80097a8:	2900      	cmp	r1, #0
 80097aa:	d0ca      	beq.n	8009742 <__sflush_r+0x1a>
 80097ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b0:	4299      	cmp	r1, r3
 80097b2:	d002      	beq.n	80097ba <__sflush_r+0x92>
 80097b4:	4628      	mov	r0, r5
 80097b6:	f000 f9f7 	bl	8009ba8 <_free_r>
 80097ba:	2000      	movs	r0, #0
 80097bc:	6360      	str	r0, [r4, #52]	; 0x34
 80097be:	e7c1      	b.n	8009744 <__sflush_r+0x1c>
 80097c0:	6a21      	ldr	r1, [r4, #32]
 80097c2:	2301      	movs	r3, #1
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b0      	blx	r6
 80097c8:	1c41      	adds	r1, r0, #1
 80097ca:	d1c7      	bne.n	800975c <__sflush_r+0x34>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0c4      	beq.n	800975c <__sflush_r+0x34>
 80097d2:	2b1d      	cmp	r3, #29
 80097d4:	d001      	beq.n	80097da <__sflush_r+0xb2>
 80097d6:	2b16      	cmp	r3, #22
 80097d8:	d101      	bne.n	80097de <__sflush_r+0xb6>
 80097da:	602f      	str	r7, [r5, #0]
 80097dc:	e7b1      	b.n	8009742 <__sflush_r+0x1a>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	e7ad      	b.n	8009744 <__sflush_r+0x1c>
 80097e8:	690f      	ldr	r7, [r1, #16]
 80097ea:	2f00      	cmp	r7, #0
 80097ec:	d0a9      	beq.n	8009742 <__sflush_r+0x1a>
 80097ee:	0793      	lsls	r3, r2, #30
 80097f0:	680e      	ldr	r6, [r1, #0]
 80097f2:	bf08      	it	eq
 80097f4:	694b      	ldreq	r3, [r1, #20]
 80097f6:	600f      	str	r7, [r1, #0]
 80097f8:	bf18      	it	ne
 80097fa:	2300      	movne	r3, #0
 80097fc:	eba6 0807 	sub.w	r8, r6, r7
 8009800:	608b      	str	r3, [r1, #8]
 8009802:	f1b8 0f00 	cmp.w	r8, #0
 8009806:	dd9c      	ble.n	8009742 <__sflush_r+0x1a>
 8009808:	6a21      	ldr	r1, [r4, #32]
 800980a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800980c:	4643      	mov	r3, r8
 800980e:	463a      	mov	r2, r7
 8009810:	4628      	mov	r0, r5
 8009812:	47b0      	blx	r6
 8009814:	2800      	cmp	r0, #0
 8009816:	dc06      	bgt.n	8009826 <__sflush_r+0xfe>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	f04f 30ff 	mov.w	r0, #4294967295
 8009824:	e78e      	b.n	8009744 <__sflush_r+0x1c>
 8009826:	4407      	add	r7, r0
 8009828:	eba8 0800 	sub.w	r8, r8, r0
 800982c:	e7e9      	b.n	8009802 <__sflush_r+0xda>
 800982e:	bf00      	nop
 8009830:	20400001 	.word	0x20400001

08009834 <_fflush_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	690b      	ldr	r3, [r1, #16]
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b913      	cbnz	r3, 8009844 <_fflush_r+0x10>
 800983e:	2500      	movs	r5, #0
 8009840:	4628      	mov	r0, r5
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	b118      	cbz	r0, 800984e <_fflush_r+0x1a>
 8009846:	6983      	ldr	r3, [r0, #24]
 8009848:	b90b      	cbnz	r3, 800984e <_fflush_r+0x1a>
 800984a:	f000 f899 	bl	8009980 <__sinit>
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <_fflush_r+0x6c>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d11b      	bne.n	800988c <_fflush_r+0x58>
 8009854:	686c      	ldr	r4, [r5, #4]
 8009856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0ef      	beq.n	800983e <_fflush_r+0xa>
 800985e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009860:	07d0      	lsls	r0, r2, #31
 8009862:	d404      	bmi.n	800986e <_fflush_r+0x3a>
 8009864:	0599      	lsls	r1, r3, #22
 8009866:	d402      	bmi.n	800986e <_fflush_r+0x3a>
 8009868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986a:	f000 f94c 	bl	8009b06 <__retarget_lock_acquire_recursive>
 800986e:	4628      	mov	r0, r5
 8009870:	4621      	mov	r1, r4
 8009872:	f7ff ff59 	bl	8009728 <__sflush_r>
 8009876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009878:	07da      	lsls	r2, r3, #31
 800987a:	4605      	mov	r5, r0
 800987c:	d4e0      	bmi.n	8009840 <_fflush_r+0xc>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	059b      	lsls	r3, r3, #22
 8009882:	d4dd      	bmi.n	8009840 <_fflush_r+0xc>
 8009884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009886:	f000 f93f 	bl	8009b08 <__retarget_lock_release_recursive>
 800988a:	e7d9      	b.n	8009840 <_fflush_r+0xc>
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <_fflush_r+0x70>)
 800988e:	429c      	cmp	r4, r3
 8009890:	d101      	bne.n	8009896 <_fflush_r+0x62>
 8009892:	68ac      	ldr	r4, [r5, #8]
 8009894:	e7df      	b.n	8009856 <_fflush_r+0x22>
 8009896:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <_fflush_r+0x74>)
 8009898:	429c      	cmp	r4, r3
 800989a:	bf08      	it	eq
 800989c:	68ec      	ldreq	r4, [r5, #12]
 800989e:	e7da      	b.n	8009856 <_fflush_r+0x22>
 80098a0:	0800ada8 	.word	0x0800ada8
 80098a4:	0800adc8 	.word	0x0800adc8
 80098a8:	0800ad88 	.word	0x0800ad88

080098ac <fflush>:
 80098ac:	4601      	mov	r1, r0
 80098ae:	b920      	cbnz	r0, 80098ba <fflush+0xe>
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <fflush+0x18>)
 80098b2:	4905      	ldr	r1, [pc, #20]	; (80098c8 <fflush+0x1c>)
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f000 b8e1 	b.w	8009a7c <_fwalk_reent>
 80098ba:	4b04      	ldr	r3, [pc, #16]	; (80098cc <fflush+0x20>)
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	f7ff bfb9 	b.w	8009834 <_fflush_r>
 80098c2:	bf00      	nop
 80098c4:	0800ade8 	.word	0x0800ade8
 80098c8:	08009835 	.word	0x08009835
 80098cc:	2000018c 	.word	0x2000018c

080098d0 <std>:
 80098d0:	2300      	movs	r3, #0
 80098d2:	b510      	push	{r4, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	e9c0 3300 	strd	r3, r3, [r0]
 80098da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098de:	6083      	str	r3, [r0, #8]
 80098e0:	8181      	strh	r1, [r0, #12]
 80098e2:	6643      	str	r3, [r0, #100]	; 0x64
 80098e4:	81c2      	strh	r2, [r0, #14]
 80098e6:	6183      	str	r3, [r0, #24]
 80098e8:	4619      	mov	r1, r3
 80098ea:	2208      	movs	r2, #8
 80098ec:	305c      	adds	r0, #92	; 0x5c
 80098ee:	f000 f93d 	bl	8009b6c <memset>
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <std+0x38>)
 80098f4:	6263      	str	r3, [r4, #36]	; 0x24
 80098f6:	4b05      	ldr	r3, [pc, #20]	; (800990c <std+0x3c>)
 80098f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <std+0x40>)
 80098fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <std+0x44>)
 8009900:	6224      	str	r4, [r4, #32]
 8009902:	6323      	str	r3, [r4, #48]	; 0x30
 8009904:	bd10      	pop	{r4, pc}
 8009906:	bf00      	nop
 8009908:	08009ea5 	.word	0x08009ea5
 800990c:	08009ec7 	.word	0x08009ec7
 8009910:	08009eff 	.word	0x08009eff
 8009914:	08009f23 	.word	0x08009f23

08009918 <_cleanup_r>:
 8009918:	4901      	ldr	r1, [pc, #4]	; (8009920 <_cleanup_r+0x8>)
 800991a:	f000 b8af 	b.w	8009a7c <_fwalk_reent>
 800991e:	bf00      	nop
 8009920:	08009835 	.word	0x08009835

08009924 <__sfmoreglue>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	2268      	movs	r2, #104	; 0x68
 8009928:	1e4d      	subs	r5, r1, #1
 800992a:	4355      	muls	r5, r2
 800992c:	460e      	mov	r6, r1
 800992e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009932:	f000 f9a5 	bl	8009c80 <_malloc_r>
 8009936:	4604      	mov	r4, r0
 8009938:	b140      	cbz	r0, 800994c <__sfmoreglue+0x28>
 800993a:	2100      	movs	r1, #0
 800993c:	e9c0 1600 	strd	r1, r6, [r0]
 8009940:	300c      	adds	r0, #12
 8009942:	60a0      	str	r0, [r4, #8]
 8009944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009948:	f000 f910 	bl	8009b6c <memset>
 800994c:	4620      	mov	r0, r4
 800994e:	bd70      	pop	{r4, r5, r6, pc}

08009950 <__sfp_lock_acquire>:
 8009950:	4801      	ldr	r0, [pc, #4]	; (8009958 <__sfp_lock_acquire+0x8>)
 8009952:	f000 b8d8 	b.w	8009b06 <__retarget_lock_acquire_recursive>
 8009956:	bf00      	nop
 8009958:	20000375 	.word	0x20000375

0800995c <__sfp_lock_release>:
 800995c:	4801      	ldr	r0, [pc, #4]	; (8009964 <__sfp_lock_release+0x8>)
 800995e:	f000 b8d3 	b.w	8009b08 <__retarget_lock_release_recursive>
 8009962:	bf00      	nop
 8009964:	20000375 	.word	0x20000375

08009968 <__sinit_lock_acquire>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__sinit_lock_acquire+0x8>)
 800996a:	f000 b8cc 	b.w	8009b06 <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	20000376 	.word	0x20000376

08009974 <__sinit_lock_release>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__sinit_lock_release+0x8>)
 8009976:	f000 b8c7 	b.w	8009b08 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	20000376 	.word	0x20000376

08009980 <__sinit>:
 8009980:	b510      	push	{r4, lr}
 8009982:	4604      	mov	r4, r0
 8009984:	f7ff fff0 	bl	8009968 <__sinit_lock_acquire>
 8009988:	69a3      	ldr	r3, [r4, #24]
 800998a:	b11b      	cbz	r3, 8009994 <__sinit+0x14>
 800998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009990:	f7ff bff0 	b.w	8009974 <__sinit_lock_release>
 8009994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009998:	6523      	str	r3, [r4, #80]	; 0x50
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <__sinit+0x68>)
 800999c:	4a13      	ldr	r2, [pc, #76]	; (80099ec <__sinit+0x6c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	bf04      	itt	eq
 80099a6:	2301      	moveq	r3, #1
 80099a8:	61a3      	streq	r3, [r4, #24]
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 f820 	bl	80099f0 <__sfp>
 80099b0:	6060      	str	r0, [r4, #4]
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 f81c 	bl	80099f0 <__sfp>
 80099b8:	60a0      	str	r0, [r4, #8]
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 f818 	bl	80099f0 <__sfp>
 80099c0:	2200      	movs	r2, #0
 80099c2:	60e0      	str	r0, [r4, #12]
 80099c4:	2104      	movs	r1, #4
 80099c6:	6860      	ldr	r0, [r4, #4]
 80099c8:	f7ff ff82 	bl	80098d0 <std>
 80099cc:	68a0      	ldr	r0, [r4, #8]
 80099ce:	2201      	movs	r2, #1
 80099d0:	2109      	movs	r1, #9
 80099d2:	f7ff ff7d 	bl	80098d0 <std>
 80099d6:	68e0      	ldr	r0, [r4, #12]
 80099d8:	2202      	movs	r2, #2
 80099da:	2112      	movs	r1, #18
 80099dc:	f7ff ff78 	bl	80098d0 <std>
 80099e0:	2301      	movs	r3, #1
 80099e2:	61a3      	str	r3, [r4, #24]
 80099e4:	e7d2      	b.n	800998c <__sinit+0xc>
 80099e6:	bf00      	nop
 80099e8:	0800ade8 	.word	0x0800ade8
 80099ec:	08009919 	.word	0x08009919

080099f0 <__sfp>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	4607      	mov	r7, r0
 80099f4:	f7ff ffac 	bl	8009950 <__sfp_lock_acquire>
 80099f8:	4b1e      	ldr	r3, [pc, #120]	; (8009a74 <__sfp+0x84>)
 80099fa:	681e      	ldr	r6, [r3, #0]
 80099fc:	69b3      	ldr	r3, [r6, #24]
 80099fe:	b913      	cbnz	r3, 8009a06 <__sfp+0x16>
 8009a00:	4630      	mov	r0, r6
 8009a02:	f7ff ffbd 	bl	8009980 <__sinit>
 8009a06:	3648      	adds	r6, #72	; 0x48
 8009a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	d503      	bpl.n	8009a18 <__sfp+0x28>
 8009a10:	6833      	ldr	r3, [r6, #0]
 8009a12:	b30b      	cbz	r3, 8009a58 <__sfp+0x68>
 8009a14:	6836      	ldr	r6, [r6, #0]
 8009a16:	e7f7      	b.n	8009a08 <__sfp+0x18>
 8009a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a1c:	b9d5      	cbnz	r5, 8009a54 <__sfp+0x64>
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <__sfp+0x88>)
 8009a20:	60e3      	str	r3, [r4, #12]
 8009a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a26:	6665      	str	r5, [r4, #100]	; 0x64
 8009a28:	f000 f86c 	bl	8009b04 <__retarget_lock_init_recursive>
 8009a2c:	f7ff ff96 	bl	800995c <__sfp_lock_release>
 8009a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a38:	6025      	str	r5, [r4, #0]
 8009a3a:	61a5      	str	r5, [r4, #24]
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	4629      	mov	r1, r5
 8009a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a44:	f000 f892 	bl	8009b6c <memset>
 8009a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a50:	4620      	mov	r0, r4
 8009a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a54:	3468      	adds	r4, #104	; 0x68
 8009a56:	e7d9      	b.n	8009a0c <__sfp+0x1c>
 8009a58:	2104      	movs	r1, #4
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7ff ff62 	bl	8009924 <__sfmoreglue>
 8009a60:	4604      	mov	r4, r0
 8009a62:	6030      	str	r0, [r6, #0]
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1d5      	bne.n	8009a14 <__sfp+0x24>
 8009a68:	f7ff ff78 	bl	800995c <__sfp_lock_release>
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	e7ee      	b.n	8009a50 <__sfp+0x60>
 8009a72:	bf00      	nop
 8009a74:	0800ade8 	.word	0x0800ade8
 8009a78:	ffff0001 	.word	0xffff0001

08009a7c <_fwalk_reent>:
 8009a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a80:	4606      	mov	r6, r0
 8009a82:	4688      	mov	r8, r1
 8009a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a88:	2700      	movs	r7, #0
 8009a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8009a92:	d505      	bpl.n	8009aa0 <_fwalk_reent+0x24>
 8009a94:	6824      	ldr	r4, [r4, #0]
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	d1f7      	bne.n	8009a8a <_fwalk_reent+0xe>
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa0:	89ab      	ldrh	r3, [r5, #12]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d907      	bls.n	8009ab6 <_fwalk_reent+0x3a>
 8009aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	d003      	beq.n	8009ab6 <_fwalk_reent+0x3a>
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	47c0      	blx	r8
 8009ab4:	4307      	orrs	r7, r0
 8009ab6:	3568      	adds	r5, #104	; 0x68
 8009ab8:	e7e9      	b.n	8009a8e <_fwalk_reent+0x12>
	...

08009abc <__libc_init_array>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	4d0d      	ldr	r5, [pc, #52]	; (8009af4 <__libc_init_array+0x38>)
 8009ac0:	4c0d      	ldr	r4, [pc, #52]	; (8009af8 <__libc_init_array+0x3c>)
 8009ac2:	1b64      	subs	r4, r4, r5
 8009ac4:	10a4      	asrs	r4, r4, #2
 8009ac6:	2600      	movs	r6, #0
 8009ac8:	42a6      	cmp	r6, r4
 8009aca:	d109      	bne.n	8009ae0 <__libc_init_array+0x24>
 8009acc:	4d0b      	ldr	r5, [pc, #44]	; (8009afc <__libc_init_array+0x40>)
 8009ace:	4c0c      	ldr	r4, [pc, #48]	; (8009b00 <__libc_init_array+0x44>)
 8009ad0:	f000 feb4 	bl	800a83c <_init>
 8009ad4:	1b64      	subs	r4, r4, r5
 8009ad6:	10a4      	asrs	r4, r4, #2
 8009ad8:	2600      	movs	r6, #0
 8009ada:	42a6      	cmp	r6, r4
 8009adc:	d105      	bne.n	8009aea <__libc_init_array+0x2e>
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae4:	4798      	blx	r3
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	e7ee      	b.n	8009ac8 <__libc_init_array+0xc>
 8009aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aee:	4798      	blx	r3
 8009af0:	3601      	adds	r6, #1
 8009af2:	e7f2      	b.n	8009ada <__libc_init_array+0x1e>
 8009af4:	0800ae28 	.word	0x0800ae28
 8009af8:	0800ae28 	.word	0x0800ae28
 8009afc:	0800ae28 	.word	0x0800ae28
 8009b00:	0800ae2c 	.word	0x0800ae2c

08009b04 <__retarget_lock_init_recursive>:
 8009b04:	4770      	bx	lr

08009b06 <__retarget_lock_acquire_recursive>:
 8009b06:	4770      	bx	lr

08009b08 <__retarget_lock_release_recursive>:
 8009b08:	4770      	bx	lr
	...

08009b0c <free>:
 8009b0c:	4b02      	ldr	r3, [pc, #8]	; (8009b18 <free+0xc>)
 8009b0e:	4601      	mov	r1, r0
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	f000 b849 	b.w	8009ba8 <_free_r>
 8009b16:	bf00      	nop
 8009b18:	2000018c 	.word	0x2000018c

08009b1c <memcpy>:
 8009b1c:	440a      	add	r2, r1
 8009b1e:	4291      	cmp	r1, r2
 8009b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b24:	d100      	bne.n	8009b28 <memcpy+0xc>
 8009b26:	4770      	bx	lr
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b32:	4291      	cmp	r1, r2
 8009b34:	d1f9      	bne.n	8009b2a <memcpy+0xe>
 8009b36:	bd10      	pop	{r4, pc}

08009b38 <memmove>:
 8009b38:	4288      	cmp	r0, r1
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	eb01 0402 	add.w	r4, r1, r2
 8009b40:	d902      	bls.n	8009b48 <memmove+0x10>
 8009b42:	4284      	cmp	r4, r0
 8009b44:	4623      	mov	r3, r4
 8009b46:	d807      	bhi.n	8009b58 <memmove+0x20>
 8009b48:	1e43      	subs	r3, r0, #1
 8009b4a:	42a1      	cmp	r1, r4
 8009b4c:	d008      	beq.n	8009b60 <memmove+0x28>
 8009b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b56:	e7f8      	b.n	8009b4a <memmove+0x12>
 8009b58:	4402      	add	r2, r0
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	428a      	cmp	r2, r1
 8009b5e:	d100      	bne.n	8009b62 <memmove+0x2a>
 8009b60:	bd10      	pop	{r4, pc}
 8009b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b6a:	e7f7      	b.n	8009b5c <memmove+0x24>

08009b6c <memset>:
 8009b6c:	4402      	add	r2, r0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d100      	bne.n	8009b76 <memset+0xa>
 8009b74:	4770      	bx	lr
 8009b76:	f803 1b01 	strb.w	r1, [r3], #1
 8009b7a:	e7f9      	b.n	8009b70 <memset+0x4>

08009b7c <_calloc_r>:
 8009b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b7e:	fba1 2402 	umull	r2, r4, r1, r2
 8009b82:	b94c      	cbnz	r4, 8009b98 <_calloc_r+0x1c>
 8009b84:	4611      	mov	r1, r2
 8009b86:	9201      	str	r2, [sp, #4]
 8009b88:	f000 f87a 	bl	8009c80 <_malloc_r>
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	4605      	mov	r5, r0
 8009b90:	b930      	cbnz	r0, 8009ba0 <_calloc_r+0x24>
 8009b92:	4628      	mov	r0, r5
 8009b94:	b003      	add	sp, #12
 8009b96:	bd30      	pop	{r4, r5, pc}
 8009b98:	220c      	movs	r2, #12
 8009b9a:	6002      	str	r2, [r0, #0]
 8009b9c:	2500      	movs	r5, #0
 8009b9e:	e7f8      	b.n	8009b92 <_calloc_r+0x16>
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	f7ff ffe3 	bl	8009b6c <memset>
 8009ba6:	e7f4      	b.n	8009b92 <_calloc_r+0x16>

08009ba8 <_free_r>:
 8009ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009baa:	2900      	cmp	r1, #0
 8009bac:	d044      	beq.n	8009c38 <_free_r+0x90>
 8009bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb2:	9001      	str	r0, [sp, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8009bba:	bfb8      	it	lt
 8009bbc:	18e4      	addlt	r4, r4, r3
 8009bbe:	f000 fb0f 	bl	800a1e0 <__malloc_lock>
 8009bc2:	4a1e      	ldr	r2, [pc, #120]	; (8009c3c <_free_r+0x94>)
 8009bc4:	9801      	ldr	r0, [sp, #4]
 8009bc6:	6813      	ldr	r3, [r2, #0]
 8009bc8:	b933      	cbnz	r3, 8009bd8 <_free_r+0x30>
 8009bca:	6063      	str	r3, [r4, #4]
 8009bcc:	6014      	str	r4, [r2, #0]
 8009bce:	b003      	add	sp, #12
 8009bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bd4:	f000 bb0a 	b.w	800a1ec <__malloc_unlock>
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	d908      	bls.n	8009bee <_free_r+0x46>
 8009bdc:	6825      	ldr	r5, [r4, #0]
 8009bde:	1961      	adds	r1, r4, r5
 8009be0:	428b      	cmp	r3, r1
 8009be2:	bf01      	itttt	eq
 8009be4:	6819      	ldreq	r1, [r3, #0]
 8009be6:	685b      	ldreq	r3, [r3, #4]
 8009be8:	1949      	addeq	r1, r1, r5
 8009bea:	6021      	streq	r1, [r4, #0]
 8009bec:	e7ed      	b.n	8009bca <_free_r+0x22>
 8009bee:	461a      	mov	r2, r3
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	b10b      	cbz	r3, 8009bf8 <_free_r+0x50>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d9fa      	bls.n	8009bee <_free_r+0x46>
 8009bf8:	6811      	ldr	r1, [r2, #0]
 8009bfa:	1855      	adds	r5, r2, r1
 8009bfc:	42a5      	cmp	r5, r4
 8009bfe:	d10b      	bne.n	8009c18 <_free_r+0x70>
 8009c00:	6824      	ldr	r4, [r4, #0]
 8009c02:	4421      	add	r1, r4
 8009c04:	1854      	adds	r4, r2, r1
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	6011      	str	r1, [r2, #0]
 8009c0a:	d1e0      	bne.n	8009bce <_free_r+0x26>
 8009c0c:	681c      	ldr	r4, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	6053      	str	r3, [r2, #4]
 8009c12:	4421      	add	r1, r4
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	e7da      	b.n	8009bce <_free_r+0x26>
 8009c18:	d902      	bls.n	8009c20 <_free_r+0x78>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	e7d6      	b.n	8009bce <_free_r+0x26>
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	1961      	adds	r1, r4, r5
 8009c24:	428b      	cmp	r3, r1
 8009c26:	bf04      	itt	eq
 8009c28:	6819      	ldreq	r1, [r3, #0]
 8009c2a:	685b      	ldreq	r3, [r3, #4]
 8009c2c:	6063      	str	r3, [r4, #4]
 8009c2e:	bf04      	itt	eq
 8009c30:	1949      	addeq	r1, r1, r5
 8009c32:	6021      	streq	r1, [r4, #0]
 8009c34:	6054      	str	r4, [r2, #4]
 8009c36:	e7ca      	b.n	8009bce <_free_r+0x26>
 8009c38:	b003      	add	sp, #12
 8009c3a:	bd30      	pop	{r4, r5, pc}
 8009c3c:	20000378 	.word	0x20000378

08009c40 <sbrk_aligned>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	4e0e      	ldr	r6, [pc, #56]	; (8009c7c <sbrk_aligned+0x3c>)
 8009c44:	460c      	mov	r4, r1
 8009c46:	6831      	ldr	r1, [r6, #0]
 8009c48:	4605      	mov	r5, r0
 8009c4a:	b911      	cbnz	r1, 8009c52 <sbrk_aligned+0x12>
 8009c4c:	f000 f91a 	bl	8009e84 <_sbrk_r>
 8009c50:	6030      	str	r0, [r6, #0]
 8009c52:	4621      	mov	r1, r4
 8009c54:	4628      	mov	r0, r5
 8009c56:	f000 f915 	bl	8009e84 <_sbrk_r>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d00a      	beq.n	8009c74 <sbrk_aligned+0x34>
 8009c5e:	1cc4      	adds	r4, r0, #3
 8009c60:	f024 0403 	bic.w	r4, r4, #3
 8009c64:	42a0      	cmp	r0, r4
 8009c66:	d007      	beq.n	8009c78 <sbrk_aligned+0x38>
 8009c68:	1a21      	subs	r1, r4, r0
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f90a 	bl	8009e84 <_sbrk_r>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d101      	bne.n	8009c78 <sbrk_aligned+0x38>
 8009c74:	f04f 34ff 	mov.w	r4, #4294967295
 8009c78:	4620      	mov	r0, r4
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	2000037c 	.word	0x2000037c

08009c80 <_malloc_r>:
 8009c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c84:	1ccd      	adds	r5, r1, #3
 8009c86:	f025 0503 	bic.w	r5, r5, #3
 8009c8a:	3508      	adds	r5, #8
 8009c8c:	2d0c      	cmp	r5, #12
 8009c8e:	bf38      	it	cc
 8009c90:	250c      	movcc	r5, #12
 8009c92:	2d00      	cmp	r5, #0
 8009c94:	4607      	mov	r7, r0
 8009c96:	db01      	blt.n	8009c9c <_malloc_r+0x1c>
 8009c98:	42a9      	cmp	r1, r5
 8009c9a:	d905      	bls.n	8009ca8 <_malloc_r+0x28>
 8009c9c:	230c      	movs	r3, #12
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	2600      	movs	r6, #0
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca8:	4e2e      	ldr	r6, [pc, #184]	; (8009d64 <_malloc_r+0xe4>)
 8009caa:	f000 fa99 	bl	800a1e0 <__malloc_lock>
 8009cae:	6833      	ldr	r3, [r6, #0]
 8009cb0:	461c      	mov	r4, r3
 8009cb2:	bb34      	cbnz	r4, 8009d02 <_malloc_r+0x82>
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f7ff ffc2 	bl	8009c40 <sbrk_aligned>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	d14d      	bne.n	8009d5e <_malloc_r+0xde>
 8009cc2:	6834      	ldr	r4, [r6, #0]
 8009cc4:	4626      	mov	r6, r4
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d140      	bne.n	8009d4c <_malloc_r+0xcc>
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4638      	mov	r0, r7
 8009cd0:	eb04 0803 	add.w	r8, r4, r3
 8009cd4:	f000 f8d6 	bl	8009e84 <_sbrk_r>
 8009cd8:	4580      	cmp	r8, r0
 8009cda:	d13a      	bne.n	8009d52 <_malloc_r+0xd2>
 8009cdc:	6821      	ldr	r1, [r4, #0]
 8009cde:	3503      	adds	r5, #3
 8009ce0:	1a6d      	subs	r5, r5, r1
 8009ce2:	f025 0503 	bic.w	r5, r5, #3
 8009ce6:	3508      	adds	r5, #8
 8009ce8:	2d0c      	cmp	r5, #12
 8009cea:	bf38      	it	cc
 8009cec:	250c      	movcc	r5, #12
 8009cee:	4629      	mov	r1, r5
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff ffa5 	bl	8009c40 <sbrk_aligned>
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d02b      	beq.n	8009d52 <_malloc_r+0xd2>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	442b      	add	r3, r5
 8009cfe:	6023      	str	r3, [r4, #0]
 8009d00:	e00e      	b.n	8009d20 <_malloc_r+0xa0>
 8009d02:	6822      	ldr	r2, [r4, #0]
 8009d04:	1b52      	subs	r2, r2, r5
 8009d06:	d41e      	bmi.n	8009d46 <_malloc_r+0xc6>
 8009d08:	2a0b      	cmp	r2, #11
 8009d0a:	d916      	bls.n	8009d3a <_malloc_r+0xba>
 8009d0c:	1961      	adds	r1, r4, r5
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	6025      	str	r5, [r4, #0]
 8009d12:	bf18      	it	ne
 8009d14:	6059      	strne	r1, [r3, #4]
 8009d16:	6863      	ldr	r3, [r4, #4]
 8009d18:	bf08      	it	eq
 8009d1a:	6031      	streq	r1, [r6, #0]
 8009d1c:	5162      	str	r2, [r4, r5]
 8009d1e:	604b      	str	r3, [r1, #4]
 8009d20:	4638      	mov	r0, r7
 8009d22:	f104 060b 	add.w	r6, r4, #11
 8009d26:	f000 fa61 	bl	800a1ec <__malloc_unlock>
 8009d2a:	f026 0607 	bic.w	r6, r6, #7
 8009d2e:	1d23      	adds	r3, r4, #4
 8009d30:	1af2      	subs	r2, r6, r3
 8009d32:	d0b6      	beq.n	8009ca2 <_malloc_r+0x22>
 8009d34:	1b9b      	subs	r3, r3, r6
 8009d36:	50a3      	str	r3, [r4, r2]
 8009d38:	e7b3      	b.n	8009ca2 <_malloc_r+0x22>
 8009d3a:	6862      	ldr	r2, [r4, #4]
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	bf0c      	ite	eq
 8009d40:	6032      	streq	r2, [r6, #0]
 8009d42:	605a      	strne	r2, [r3, #4]
 8009d44:	e7ec      	b.n	8009d20 <_malloc_r+0xa0>
 8009d46:	4623      	mov	r3, r4
 8009d48:	6864      	ldr	r4, [r4, #4]
 8009d4a:	e7b2      	b.n	8009cb2 <_malloc_r+0x32>
 8009d4c:	4634      	mov	r4, r6
 8009d4e:	6876      	ldr	r6, [r6, #4]
 8009d50:	e7b9      	b.n	8009cc6 <_malloc_r+0x46>
 8009d52:	230c      	movs	r3, #12
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	4638      	mov	r0, r7
 8009d58:	f000 fa48 	bl	800a1ec <__malloc_unlock>
 8009d5c:	e7a1      	b.n	8009ca2 <_malloc_r+0x22>
 8009d5e:	6025      	str	r5, [r4, #0]
 8009d60:	e7de      	b.n	8009d20 <_malloc_r+0xa0>
 8009d62:	bf00      	nop
 8009d64:	20000378 	.word	0x20000378

08009d68 <iprintf>:
 8009d68:	b40f      	push	{r0, r1, r2, r3}
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <iprintf+0x2c>)
 8009d6c:	b513      	push	{r0, r1, r4, lr}
 8009d6e:	681c      	ldr	r4, [r3, #0]
 8009d70:	b124      	cbz	r4, 8009d7c <iprintf+0x14>
 8009d72:	69a3      	ldr	r3, [r4, #24]
 8009d74:	b913      	cbnz	r3, 8009d7c <iprintf+0x14>
 8009d76:	4620      	mov	r0, r4
 8009d78:	f7ff fe02 	bl	8009980 <__sinit>
 8009d7c:	ab05      	add	r3, sp, #20
 8009d7e:	9a04      	ldr	r2, [sp, #16]
 8009d80:	68a1      	ldr	r1, [r4, #8]
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 fa61 	bl	800a24c <_vfiprintf_r>
 8009d8a:	b002      	add	sp, #8
 8009d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d90:	b004      	add	sp, #16
 8009d92:	4770      	bx	lr
 8009d94:	2000018c 	.word	0x2000018c

08009d98 <_puts_r>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	460e      	mov	r6, r1
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	b118      	cbz	r0, 8009da8 <_puts_r+0x10>
 8009da0:	6983      	ldr	r3, [r0, #24]
 8009da2:	b90b      	cbnz	r3, 8009da8 <_puts_r+0x10>
 8009da4:	f7ff fdec 	bl	8009980 <__sinit>
 8009da8:	69ab      	ldr	r3, [r5, #24]
 8009daa:	68ac      	ldr	r4, [r5, #8]
 8009dac:	b913      	cbnz	r3, 8009db4 <_puts_r+0x1c>
 8009dae:	4628      	mov	r0, r5
 8009db0:	f7ff fde6 	bl	8009980 <__sinit>
 8009db4:	4b2c      	ldr	r3, [pc, #176]	; (8009e68 <_puts_r+0xd0>)
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d120      	bne.n	8009dfc <_puts_r+0x64>
 8009dba:	686c      	ldr	r4, [r5, #4]
 8009dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dbe:	07db      	lsls	r3, r3, #31
 8009dc0:	d405      	bmi.n	8009dce <_puts_r+0x36>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	0598      	lsls	r0, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_puts_r+0x36>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dca:	f7ff fe9c 	bl	8009b06 <__retarget_lock_acquire_recursive>
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	0719      	lsls	r1, r3, #28
 8009dd2:	d51d      	bpl.n	8009e10 <_puts_r+0x78>
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	b1db      	cbz	r3, 8009e10 <_puts_r+0x78>
 8009dd8:	3e01      	subs	r6, #1
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009de0:	3b01      	subs	r3, #1
 8009de2:	60a3      	str	r3, [r4, #8]
 8009de4:	bb39      	cbnz	r1, 8009e36 <_puts_r+0x9e>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	da38      	bge.n	8009e5c <_puts_r+0xc4>
 8009dea:	4622      	mov	r2, r4
 8009dec:	210a      	movs	r1, #10
 8009dee:	4628      	mov	r0, r5
 8009df0:	f000 f89c 	bl	8009f2c <__swbuf_r>
 8009df4:	3001      	adds	r0, #1
 8009df6:	d011      	beq.n	8009e1c <_puts_r+0x84>
 8009df8:	250a      	movs	r5, #10
 8009dfa:	e011      	b.n	8009e20 <_puts_r+0x88>
 8009dfc:	4b1b      	ldr	r3, [pc, #108]	; (8009e6c <_puts_r+0xd4>)
 8009dfe:	429c      	cmp	r4, r3
 8009e00:	d101      	bne.n	8009e06 <_puts_r+0x6e>
 8009e02:	68ac      	ldr	r4, [r5, #8]
 8009e04:	e7da      	b.n	8009dbc <_puts_r+0x24>
 8009e06:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <_puts_r+0xd8>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	bf08      	it	eq
 8009e0c:	68ec      	ldreq	r4, [r5, #12]
 8009e0e:	e7d5      	b.n	8009dbc <_puts_r+0x24>
 8009e10:	4621      	mov	r1, r4
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f8ee 	bl	8009ff4 <__swsetup_r>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d0dd      	beq.n	8009dd8 <_puts_r+0x40>
 8009e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8009e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e22:	07da      	lsls	r2, r3, #31
 8009e24:	d405      	bmi.n	8009e32 <_puts_r+0x9a>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	059b      	lsls	r3, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_puts_r+0x9a>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e2e:	f7ff fe6b 	bl	8009b08 <__retarget_lock_release_recursive>
 8009e32:	4628      	mov	r0, r5
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da04      	bge.n	8009e44 <_puts_r+0xac>
 8009e3a:	69a2      	ldr	r2, [r4, #24]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	dc06      	bgt.n	8009e4e <_puts_r+0xb6>
 8009e40:	290a      	cmp	r1, #10
 8009e42:	d004      	beq.n	8009e4e <_puts_r+0xb6>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	6022      	str	r2, [r4, #0]
 8009e4a:	7019      	strb	r1, [r3, #0]
 8009e4c:	e7c5      	b.n	8009dda <_puts_r+0x42>
 8009e4e:	4622      	mov	r2, r4
 8009e50:	4628      	mov	r0, r5
 8009e52:	f000 f86b 	bl	8009f2c <__swbuf_r>
 8009e56:	3001      	adds	r0, #1
 8009e58:	d1bf      	bne.n	8009dda <_puts_r+0x42>
 8009e5a:	e7df      	b.n	8009e1c <_puts_r+0x84>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	250a      	movs	r5, #10
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	701d      	strb	r5, [r3, #0]
 8009e66:	e7db      	b.n	8009e20 <_puts_r+0x88>
 8009e68:	0800ada8 	.word	0x0800ada8
 8009e6c:	0800adc8 	.word	0x0800adc8
 8009e70:	0800ad88 	.word	0x0800ad88

08009e74 <puts>:
 8009e74:	4b02      	ldr	r3, [pc, #8]	; (8009e80 <puts+0xc>)
 8009e76:	4601      	mov	r1, r0
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f7ff bf8d 	b.w	8009d98 <_puts_r>
 8009e7e:	bf00      	nop
 8009e80:	2000018c 	.word	0x2000018c

08009e84 <_sbrk_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_sbrk_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7fc fe6c 	bl	8006b6c <_sbrk>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_sbrk_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_sbrk_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	20000380 	.word	0x20000380

08009ea4 <__sread>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eac:	f000 fc92 	bl	800a7d4 <_read_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	bfab      	itete	ge
 8009eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8009eb8:	181b      	addge	r3, r3, r0
 8009eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ebe:	bfac      	ite	ge
 8009ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ec2:	81a3      	strhlt	r3, [r4, #12]
 8009ec4:	bd10      	pop	{r4, pc}

08009ec6 <__swrite>:
 8009ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	461f      	mov	r7, r3
 8009ecc:	898b      	ldrh	r3, [r1, #12]
 8009ece:	05db      	lsls	r3, r3, #23
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	d505      	bpl.n	8009ee4 <__swrite+0x1e>
 8009ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009edc:	2302      	movs	r3, #2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f000 f906 	bl	800a0f0 <_lseek_r>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009efa:	f000 b869 	b.w	8009fd0 <_write_r>

08009efe <__sseek>:
 8009efe:	b510      	push	{r4, lr}
 8009f00:	460c      	mov	r4, r1
 8009f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f06:	f000 f8f3 	bl	800a0f0 <_lseek_r>
 8009f0a:	1c43      	adds	r3, r0, #1
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	bf15      	itete	ne
 8009f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f1a:	81a3      	strheq	r3, [r4, #12]
 8009f1c:	bf18      	it	ne
 8009f1e:	81a3      	strhne	r3, [r4, #12]
 8009f20:	bd10      	pop	{r4, pc}

08009f22 <__sclose>:
 8009f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f26:	f000 b8d3 	b.w	800a0d0 <_close_r>
	...

08009f2c <__swbuf_r>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	460e      	mov	r6, r1
 8009f30:	4614      	mov	r4, r2
 8009f32:	4605      	mov	r5, r0
 8009f34:	b118      	cbz	r0, 8009f3e <__swbuf_r+0x12>
 8009f36:	6983      	ldr	r3, [r0, #24]
 8009f38:	b90b      	cbnz	r3, 8009f3e <__swbuf_r+0x12>
 8009f3a:	f7ff fd21 	bl	8009980 <__sinit>
 8009f3e:	4b21      	ldr	r3, [pc, #132]	; (8009fc4 <__swbuf_r+0x98>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	d12b      	bne.n	8009f9c <__swbuf_r+0x70>
 8009f44:	686c      	ldr	r4, [r5, #4]
 8009f46:	69a3      	ldr	r3, [r4, #24]
 8009f48:	60a3      	str	r3, [r4, #8]
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	071a      	lsls	r2, r3, #28
 8009f4e:	d52f      	bpl.n	8009fb0 <__swbuf_r+0x84>
 8009f50:	6923      	ldr	r3, [r4, #16]
 8009f52:	b36b      	cbz	r3, 8009fb0 <__swbuf_r+0x84>
 8009f54:	6923      	ldr	r3, [r4, #16]
 8009f56:	6820      	ldr	r0, [r4, #0]
 8009f58:	1ac0      	subs	r0, r0, r3
 8009f5a:	6963      	ldr	r3, [r4, #20]
 8009f5c:	b2f6      	uxtb	r6, r6
 8009f5e:	4283      	cmp	r3, r0
 8009f60:	4637      	mov	r7, r6
 8009f62:	dc04      	bgt.n	8009f6e <__swbuf_r+0x42>
 8009f64:	4621      	mov	r1, r4
 8009f66:	4628      	mov	r0, r5
 8009f68:	f7ff fc64 	bl	8009834 <_fflush_r>
 8009f6c:	bb30      	cbnz	r0, 8009fbc <__swbuf_r+0x90>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	60a3      	str	r3, [r4, #8]
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	1c5a      	adds	r2, r3, #1
 8009f78:	6022      	str	r2, [r4, #0]
 8009f7a:	701e      	strb	r6, [r3, #0]
 8009f7c:	6963      	ldr	r3, [r4, #20]
 8009f7e:	3001      	adds	r0, #1
 8009f80:	4283      	cmp	r3, r0
 8009f82:	d004      	beq.n	8009f8e <__swbuf_r+0x62>
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	07db      	lsls	r3, r3, #31
 8009f88:	d506      	bpl.n	8009f98 <__swbuf_r+0x6c>
 8009f8a:	2e0a      	cmp	r6, #10
 8009f8c:	d104      	bne.n	8009f98 <__swbuf_r+0x6c>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	f7ff fc4f 	bl	8009834 <_fflush_r>
 8009f96:	b988      	cbnz	r0, 8009fbc <__swbuf_r+0x90>
 8009f98:	4638      	mov	r0, r7
 8009f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <__swbuf_r+0x9c>)
 8009f9e:	429c      	cmp	r4, r3
 8009fa0:	d101      	bne.n	8009fa6 <__swbuf_r+0x7a>
 8009fa2:	68ac      	ldr	r4, [r5, #8]
 8009fa4:	e7cf      	b.n	8009f46 <__swbuf_r+0x1a>
 8009fa6:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <__swbuf_r+0xa0>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	bf08      	it	eq
 8009fac:	68ec      	ldreq	r4, [r5, #12]
 8009fae:	e7ca      	b.n	8009f46 <__swbuf_r+0x1a>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 f81e 	bl	8009ff4 <__swsetup_r>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0cb      	beq.n	8009f54 <__swbuf_r+0x28>
 8009fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8009fc0:	e7ea      	b.n	8009f98 <__swbuf_r+0x6c>
 8009fc2:	bf00      	nop
 8009fc4:	0800ada8 	.word	0x0800ada8
 8009fc8:	0800adc8 	.word	0x0800adc8
 8009fcc:	0800ad88 	.word	0x0800ad88

08009fd0 <_write_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d07      	ldr	r5, [pc, #28]	; (8009ff0 <_write_r+0x20>)
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	4611      	mov	r1, r2
 8009fda:	2200      	movs	r2, #0
 8009fdc:	602a      	str	r2, [r5, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f7fc fd73 	bl	8006aca <_write>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_write_r+0x1e>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_write_r+0x1e>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20000380 	.word	0x20000380

08009ff4 <__swsetup_r>:
 8009ff4:	4b32      	ldr	r3, [pc, #200]	; (800a0c0 <__swsetup_r+0xcc>)
 8009ff6:	b570      	push	{r4, r5, r6, lr}
 8009ff8:	681d      	ldr	r5, [r3, #0]
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	b125      	cbz	r5, 800a00a <__swsetup_r+0x16>
 800a000:	69ab      	ldr	r3, [r5, #24]
 800a002:	b913      	cbnz	r3, 800a00a <__swsetup_r+0x16>
 800a004:	4628      	mov	r0, r5
 800a006:	f7ff fcbb 	bl	8009980 <__sinit>
 800a00a:	4b2e      	ldr	r3, [pc, #184]	; (800a0c4 <__swsetup_r+0xd0>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d10f      	bne.n	800a030 <__swsetup_r+0x3c>
 800a010:	686c      	ldr	r4, [r5, #4]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a018:	0719      	lsls	r1, r3, #28
 800a01a:	d42c      	bmi.n	800a076 <__swsetup_r+0x82>
 800a01c:	06dd      	lsls	r5, r3, #27
 800a01e:	d411      	bmi.n	800a044 <__swsetup_r+0x50>
 800a020:	2309      	movs	r3, #9
 800a022:	6033      	str	r3, [r6, #0]
 800a024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a028:	81a3      	strh	r3, [r4, #12]
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	e03e      	b.n	800a0ae <__swsetup_r+0xba>
 800a030:	4b25      	ldr	r3, [pc, #148]	; (800a0c8 <__swsetup_r+0xd4>)
 800a032:	429c      	cmp	r4, r3
 800a034:	d101      	bne.n	800a03a <__swsetup_r+0x46>
 800a036:	68ac      	ldr	r4, [r5, #8]
 800a038:	e7eb      	b.n	800a012 <__swsetup_r+0x1e>
 800a03a:	4b24      	ldr	r3, [pc, #144]	; (800a0cc <__swsetup_r+0xd8>)
 800a03c:	429c      	cmp	r4, r3
 800a03e:	bf08      	it	eq
 800a040:	68ec      	ldreq	r4, [r5, #12]
 800a042:	e7e6      	b.n	800a012 <__swsetup_r+0x1e>
 800a044:	0758      	lsls	r0, r3, #29
 800a046:	d512      	bpl.n	800a06e <__swsetup_r+0x7a>
 800a048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a04a:	b141      	cbz	r1, 800a05e <__swsetup_r+0x6a>
 800a04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a050:	4299      	cmp	r1, r3
 800a052:	d002      	beq.n	800a05a <__swsetup_r+0x66>
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff fda7 	bl	8009ba8 <_free_r>
 800a05a:	2300      	movs	r3, #0
 800a05c:	6363      	str	r3, [r4, #52]	; 0x34
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a064:	81a3      	strh	r3, [r4, #12]
 800a066:	2300      	movs	r3, #0
 800a068:	6063      	str	r3, [r4, #4]
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	f043 0308 	orr.w	r3, r3, #8
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	b94b      	cbnz	r3, 800a08e <__swsetup_r+0x9a>
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a084:	d003      	beq.n	800a08e <__swsetup_r+0x9a>
 800a086:	4621      	mov	r1, r4
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f869 	bl	800a160 <__smakebuf_r>
 800a08e:	89a0      	ldrh	r0, [r4, #12]
 800a090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a094:	f010 0301 	ands.w	r3, r0, #1
 800a098:	d00a      	beq.n	800a0b0 <__swsetup_r+0xbc>
 800a09a:	2300      	movs	r3, #0
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	6963      	ldr	r3, [r4, #20]
 800a0a0:	425b      	negs	r3, r3
 800a0a2:	61a3      	str	r3, [r4, #24]
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	b943      	cbnz	r3, 800a0ba <__swsetup_r+0xc6>
 800a0a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0ac:	d1ba      	bne.n	800a024 <__swsetup_r+0x30>
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	0781      	lsls	r1, r0, #30
 800a0b2:	bf58      	it	pl
 800a0b4:	6963      	ldrpl	r3, [r4, #20]
 800a0b6:	60a3      	str	r3, [r4, #8]
 800a0b8:	e7f4      	b.n	800a0a4 <__swsetup_r+0xb0>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	e7f7      	b.n	800a0ae <__swsetup_r+0xba>
 800a0be:	bf00      	nop
 800a0c0:	2000018c 	.word	0x2000018c
 800a0c4:	0800ada8 	.word	0x0800ada8
 800a0c8:	0800adc8 	.word	0x0800adc8
 800a0cc:	0800ad88 	.word	0x0800ad88

0800a0d0 <_close_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d06      	ldr	r5, [pc, #24]	; (800a0ec <_close_r+0x1c>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7fc fd11 	bl	8006b02 <_close>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_close_r+0x1a>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_close_r+0x1a>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20000380 	.word	0x20000380

0800a0f0 <_lseek_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_lseek_r+0x20>)
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7fc fd26 	bl	8006b50 <_lseek>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_lseek_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_lseek_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20000380 	.word	0x20000380

0800a114 <__swhatbuf_r>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	460e      	mov	r6, r1
 800a118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	b096      	sub	sp, #88	; 0x58
 800a120:	4614      	mov	r4, r2
 800a122:	461d      	mov	r5, r3
 800a124:	da08      	bge.n	800a138 <__swhatbuf_r+0x24>
 800a126:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	602a      	str	r2, [r5, #0]
 800a12e:	061a      	lsls	r2, r3, #24
 800a130:	d410      	bmi.n	800a154 <__swhatbuf_r+0x40>
 800a132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a136:	e00e      	b.n	800a156 <__swhatbuf_r+0x42>
 800a138:	466a      	mov	r2, sp
 800a13a:	f000 fb5d 	bl	800a7f8 <_fstat_r>
 800a13e:	2800      	cmp	r0, #0
 800a140:	dbf1      	blt.n	800a126 <__swhatbuf_r+0x12>
 800a142:	9a01      	ldr	r2, [sp, #4]
 800a144:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a148:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a14c:	425a      	negs	r2, r3
 800a14e:	415a      	adcs	r2, r3
 800a150:	602a      	str	r2, [r5, #0]
 800a152:	e7ee      	b.n	800a132 <__swhatbuf_r+0x1e>
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	2000      	movs	r0, #0
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	b016      	add	sp, #88	; 0x58
 800a15c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a160 <__smakebuf_r>:
 800a160:	898b      	ldrh	r3, [r1, #12]
 800a162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a164:	079d      	lsls	r5, r3, #30
 800a166:	4606      	mov	r6, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	d507      	bpl.n	800a17c <__smakebuf_r+0x1c>
 800a16c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	2301      	movs	r3, #1
 800a176:	6163      	str	r3, [r4, #20]
 800a178:	b002      	add	sp, #8
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	ab01      	add	r3, sp, #4
 800a17e:	466a      	mov	r2, sp
 800a180:	f7ff ffc8 	bl	800a114 <__swhatbuf_r>
 800a184:	9900      	ldr	r1, [sp, #0]
 800a186:	4605      	mov	r5, r0
 800a188:	4630      	mov	r0, r6
 800a18a:	f7ff fd79 	bl	8009c80 <_malloc_r>
 800a18e:	b948      	cbnz	r0, 800a1a4 <__smakebuf_r+0x44>
 800a190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a194:	059a      	lsls	r2, r3, #22
 800a196:	d4ef      	bmi.n	800a178 <__smakebuf_r+0x18>
 800a198:	f023 0303 	bic.w	r3, r3, #3
 800a19c:	f043 0302 	orr.w	r3, r3, #2
 800a1a0:	81a3      	strh	r3, [r4, #12]
 800a1a2:	e7e3      	b.n	800a16c <__smakebuf_r+0xc>
 800a1a4:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <__smakebuf_r+0x7c>)
 800a1a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	6020      	str	r0, [r4, #0]
 800a1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	6163      	str	r3, [r4, #20]
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	6120      	str	r0, [r4, #16]
 800a1ba:	b15b      	cbz	r3, 800a1d4 <__smakebuf_r+0x74>
 800a1bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f000 fb2b 	bl	800a81c <_isatty_r>
 800a1c6:	b128      	cbz	r0, 800a1d4 <__smakebuf_r+0x74>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f023 0303 	bic.w	r3, r3, #3
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	89a0      	ldrh	r0, [r4, #12]
 800a1d6:	4305      	orrs	r5, r0
 800a1d8:	81a5      	strh	r5, [r4, #12]
 800a1da:	e7cd      	b.n	800a178 <__smakebuf_r+0x18>
 800a1dc:	08009919 	.word	0x08009919

0800a1e0 <__malloc_lock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__malloc_lock+0x8>)
 800a1e2:	f7ff bc90 	b.w	8009b06 <__retarget_lock_acquire_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	20000374 	.word	0x20000374

0800a1ec <__malloc_unlock>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	; (800a1f4 <__malloc_unlock+0x8>)
 800a1ee:	f7ff bc8b 	b.w	8009b08 <__retarget_lock_release_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	20000374 	.word	0x20000374

0800a1f8 <__sfputc_r>:
 800a1f8:	6893      	ldr	r3, [r2, #8]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	b410      	push	{r4}
 800a200:	6093      	str	r3, [r2, #8]
 800a202:	da08      	bge.n	800a216 <__sfputc_r+0x1e>
 800a204:	6994      	ldr	r4, [r2, #24]
 800a206:	42a3      	cmp	r3, r4
 800a208:	db01      	blt.n	800a20e <__sfputc_r+0x16>
 800a20a:	290a      	cmp	r1, #10
 800a20c:	d103      	bne.n	800a216 <__sfputc_r+0x1e>
 800a20e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a212:	f7ff be8b 	b.w	8009f2c <__swbuf_r>
 800a216:	6813      	ldr	r3, [r2, #0]
 800a218:	1c58      	adds	r0, r3, #1
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	7019      	strb	r1, [r3, #0]
 800a21e:	4608      	mov	r0, r1
 800a220:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <__sfputs_r>:
 800a226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a228:	4606      	mov	r6, r0
 800a22a:	460f      	mov	r7, r1
 800a22c:	4614      	mov	r4, r2
 800a22e:	18d5      	adds	r5, r2, r3
 800a230:	42ac      	cmp	r4, r5
 800a232:	d101      	bne.n	800a238 <__sfputs_r+0x12>
 800a234:	2000      	movs	r0, #0
 800a236:	e007      	b.n	800a248 <__sfputs_r+0x22>
 800a238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23c:	463a      	mov	r2, r7
 800a23e:	4630      	mov	r0, r6
 800a240:	f7ff ffda 	bl	800a1f8 <__sfputc_r>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d1f3      	bne.n	800a230 <__sfputs_r+0xa>
 800a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a24c <_vfiprintf_r>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	460d      	mov	r5, r1
 800a252:	b09d      	sub	sp, #116	; 0x74
 800a254:	4614      	mov	r4, r2
 800a256:	4698      	mov	r8, r3
 800a258:	4606      	mov	r6, r0
 800a25a:	b118      	cbz	r0, 800a264 <_vfiprintf_r+0x18>
 800a25c:	6983      	ldr	r3, [r0, #24]
 800a25e:	b90b      	cbnz	r3, 800a264 <_vfiprintf_r+0x18>
 800a260:	f7ff fb8e 	bl	8009980 <__sinit>
 800a264:	4b89      	ldr	r3, [pc, #548]	; (800a48c <_vfiprintf_r+0x240>)
 800a266:	429d      	cmp	r5, r3
 800a268:	d11b      	bne.n	800a2a2 <_vfiprintf_r+0x56>
 800a26a:	6875      	ldr	r5, [r6, #4]
 800a26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a26e:	07d9      	lsls	r1, r3, #31
 800a270:	d405      	bmi.n	800a27e <_vfiprintf_r+0x32>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	059a      	lsls	r2, r3, #22
 800a276:	d402      	bmi.n	800a27e <_vfiprintf_r+0x32>
 800a278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27a:	f7ff fc44 	bl	8009b06 <__retarget_lock_acquire_recursive>
 800a27e:	89ab      	ldrh	r3, [r5, #12]
 800a280:	071b      	lsls	r3, r3, #28
 800a282:	d501      	bpl.n	800a288 <_vfiprintf_r+0x3c>
 800a284:	692b      	ldr	r3, [r5, #16]
 800a286:	b9eb      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x78>
 800a288:	4629      	mov	r1, r5
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff feb2 	bl	8009ff4 <__swsetup_r>
 800a290:	b1c0      	cbz	r0, 800a2c4 <_vfiprintf_r+0x78>
 800a292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a294:	07dc      	lsls	r4, r3, #31
 800a296:	d50e      	bpl.n	800a2b6 <_vfiprintf_r+0x6a>
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	b01d      	add	sp, #116	; 0x74
 800a29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a2:	4b7b      	ldr	r3, [pc, #492]	; (800a490 <_vfiprintf_r+0x244>)
 800a2a4:	429d      	cmp	r5, r3
 800a2a6:	d101      	bne.n	800a2ac <_vfiprintf_r+0x60>
 800a2a8:	68b5      	ldr	r5, [r6, #8]
 800a2aa:	e7df      	b.n	800a26c <_vfiprintf_r+0x20>
 800a2ac:	4b79      	ldr	r3, [pc, #484]	; (800a494 <_vfiprintf_r+0x248>)
 800a2ae:	429d      	cmp	r5, r3
 800a2b0:	bf08      	it	eq
 800a2b2:	68f5      	ldreq	r5, [r6, #12]
 800a2b4:	e7da      	b.n	800a26c <_vfiprintf_r+0x20>
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	0598      	lsls	r0, r3, #22
 800a2ba:	d4ed      	bmi.n	800a298 <_vfiprintf_r+0x4c>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2be:	f7ff fc23 	bl	8009b08 <__retarget_lock_release_recursive>
 800a2c2:	e7e9      	b.n	800a298 <_vfiprintf_r+0x4c>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d2:	2330      	movs	r3, #48	; 0x30
 800a2d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a498 <_vfiprintf_r+0x24c>
 800a2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2dc:	f04f 0901 	mov.w	r9, #1
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	469a      	mov	sl, r3
 800a2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_vfiprintf_r+0xa2>
 800a2ea:	2a25      	cmp	r2, #37	; 0x25
 800a2ec:	d1f9      	bne.n	800a2e2 <_vfiprintf_r+0x96>
 800a2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f2:	d00b      	beq.n	800a30c <_vfiprintf_r+0xc0>
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ff93 	bl	800a226 <__sfputs_r>
 800a300:	3001      	adds	r0, #1
 800a302:	f000 80aa 	beq.w	800a45a <_vfiprintf_r+0x20e>
 800a306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a308:	445a      	add	r2, fp
 800a30a:	9209      	str	r2, [sp, #36]	; 0x24
 800a30c:	f89a 3000 	ldrb.w	r3, [sl]
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80a2 	beq.w	800a45a <_vfiprintf_r+0x20e>
 800a316:	2300      	movs	r3, #0
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a320:	f10a 0a01 	add.w	sl, sl, #1
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32c:	931a      	str	r3, [sp, #104]	; 0x68
 800a32e:	4654      	mov	r4, sl
 800a330:	2205      	movs	r2, #5
 800a332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a336:	4858      	ldr	r0, [pc, #352]	; (800a498 <_vfiprintf_r+0x24c>)
 800a338:	f7f5 ff52 	bl	80001e0 <memchr>
 800a33c:	9a04      	ldr	r2, [sp, #16]
 800a33e:	b9d8      	cbnz	r0, 800a378 <_vfiprintf_r+0x12c>
 800a340:	06d1      	lsls	r1, r2, #27
 800a342:	bf44      	itt	mi
 800a344:	2320      	movmi	r3, #32
 800a346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34a:	0713      	lsls	r3, r2, #28
 800a34c:	bf44      	itt	mi
 800a34e:	232b      	movmi	r3, #43	; 0x2b
 800a350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a354:	f89a 3000 	ldrb.w	r3, [sl]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d015      	beq.n	800a388 <_vfiprintf_r+0x13c>
 800a35c:	9a07      	ldr	r2, [sp, #28]
 800a35e:	4654      	mov	r4, sl
 800a360:	2000      	movs	r0, #0
 800a362:	f04f 0c0a 	mov.w	ip, #10
 800a366:	4621      	mov	r1, r4
 800a368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36c:	3b30      	subs	r3, #48	; 0x30
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d94e      	bls.n	800a410 <_vfiprintf_r+0x1c4>
 800a372:	b1b0      	cbz	r0, 800a3a2 <_vfiprintf_r+0x156>
 800a374:	9207      	str	r2, [sp, #28]
 800a376:	e014      	b.n	800a3a2 <_vfiprintf_r+0x156>
 800a378:	eba0 0308 	sub.w	r3, r0, r8
 800a37c:	fa09 f303 	lsl.w	r3, r9, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	46a2      	mov	sl, r4
 800a386:	e7d2      	b.n	800a32e <_vfiprintf_r+0xe2>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d19      	adds	r1, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9103      	str	r1, [sp, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbb      	ittet	lt
 800a394:	425b      	neglt	r3, r3
 800a396:	f042 0202 	orrlt.w	r2, r2, #2
 800a39a:	9307      	strge	r3, [sp, #28]
 800a39c:	9307      	strlt	r3, [sp, #28]
 800a39e:	bfb8      	it	lt
 800a3a0:	9204      	strlt	r2, [sp, #16]
 800a3a2:	7823      	ldrb	r3, [r4, #0]
 800a3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a6:	d10c      	bne.n	800a3c2 <_vfiprintf_r+0x176>
 800a3a8:	7863      	ldrb	r3, [r4, #1]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d135      	bne.n	800a41a <_vfiprintf_r+0x1ce>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	1d1a      	adds	r2, r3, #4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	9203      	str	r2, [sp, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfb8      	it	lt
 800a3ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3be:	3402      	adds	r4, #2
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4a8 <_vfiprintf_r+0x25c>
 800a3c6:	7821      	ldrb	r1, [r4, #0]
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	f7f5 ff08 	bl	80001e0 <memchr>
 800a3d0:	b140      	cbz	r0, 800a3e4 <_vfiprintf_r+0x198>
 800a3d2:	2340      	movs	r3, #64	; 0x40
 800a3d4:	eba0 000a 	sub.w	r0, r0, sl
 800a3d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3dc:	9b04      	ldr	r3, [sp, #16]
 800a3de:	4303      	orrs	r3, r0
 800a3e0:	3401      	adds	r4, #1
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e8:	482c      	ldr	r0, [pc, #176]	; (800a49c <_vfiprintf_r+0x250>)
 800a3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ee:	2206      	movs	r2, #6
 800a3f0:	f7f5 fef6 	bl	80001e0 <memchr>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d03f      	beq.n	800a478 <_vfiprintf_r+0x22c>
 800a3f8:	4b29      	ldr	r3, [pc, #164]	; (800a4a0 <_vfiprintf_r+0x254>)
 800a3fa:	bb1b      	cbnz	r3, 800a444 <_vfiprintf_r+0x1f8>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	3307      	adds	r3, #7
 800a400:	f023 0307 	bic.w	r3, r3, #7
 800a404:	3308      	adds	r3, #8
 800a406:	9303      	str	r3, [sp, #12]
 800a408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40a:	443b      	add	r3, r7
 800a40c:	9309      	str	r3, [sp, #36]	; 0x24
 800a40e:	e767      	b.n	800a2e0 <_vfiprintf_r+0x94>
 800a410:	fb0c 3202 	mla	r2, ip, r2, r3
 800a414:	460c      	mov	r4, r1
 800a416:	2001      	movs	r0, #1
 800a418:	e7a5      	b.n	800a366 <_vfiprintf_r+0x11a>
 800a41a:	2300      	movs	r3, #0
 800a41c:	3401      	adds	r4, #1
 800a41e:	9305      	str	r3, [sp, #20]
 800a420:	4619      	mov	r1, r3
 800a422:	f04f 0c0a 	mov.w	ip, #10
 800a426:	4620      	mov	r0, r4
 800a428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42c:	3a30      	subs	r2, #48	; 0x30
 800a42e:	2a09      	cmp	r2, #9
 800a430:	d903      	bls.n	800a43a <_vfiprintf_r+0x1ee>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0c5      	beq.n	800a3c2 <_vfiprintf_r+0x176>
 800a436:	9105      	str	r1, [sp, #20]
 800a438:	e7c3      	b.n	800a3c2 <_vfiprintf_r+0x176>
 800a43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a43e:	4604      	mov	r4, r0
 800a440:	2301      	movs	r3, #1
 800a442:	e7f0      	b.n	800a426 <_vfiprintf_r+0x1da>
 800a444:	ab03      	add	r3, sp, #12
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	462a      	mov	r2, r5
 800a44a:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <_vfiprintf_r+0x258>)
 800a44c:	a904      	add	r1, sp, #16
 800a44e:	4630      	mov	r0, r6
 800a450:	f3af 8000 	nop.w
 800a454:	4607      	mov	r7, r0
 800a456:	1c78      	adds	r0, r7, #1
 800a458:	d1d6      	bne.n	800a408 <_vfiprintf_r+0x1bc>
 800a45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45c:	07d9      	lsls	r1, r3, #31
 800a45e:	d405      	bmi.n	800a46c <_vfiprintf_r+0x220>
 800a460:	89ab      	ldrh	r3, [r5, #12]
 800a462:	059a      	lsls	r2, r3, #22
 800a464:	d402      	bmi.n	800a46c <_vfiprintf_r+0x220>
 800a466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a468:	f7ff fb4e 	bl	8009b08 <__retarget_lock_release_recursive>
 800a46c:	89ab      	ldrh	r3, [r5, #12]
 800a46e:	065b      	lsls	r3, r3, #25
 800a470:	f53f af12 	bmi.w	800a298 <_vfiprintf_r+0x4c>
 800a474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a476:	e711      	b.n	800a29c <_vfiprintf_r+0x50>
 800a478:	ab03      	add	r3, sp, #12
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	462a      	mov	r2, r5
 800a47e:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <_vfiprintf_r+0x258>)
 800a480:	a904      	add	r1, sp, #16
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f880 	bl	800a588 <_printf_i>
 800a488:	e7e4      	b.n	800a454 <_vfiprintf_r+0x208>
 800a48a:	bf00      	nop
 800a48c:	0800ada8 	.word	0x0800ada8
 800a490:	0800adc8 	.word	0x0800adc8
 800a494:	0800ad88 	.word	0x0800ad88
 800a498:	0800adec 	.word	0x0800adec
 800a49c:	0800adf6 	.word	0x0800adf6
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	0800a227 	.word	0x0800a227
 800a4a8:	0800adf2 	.word	0x0800adf2

0800a4ac <_printf_common>:
 800a4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	4699      	mov	r9, r3
 800a4b4:	688a      	ldr	r2, [r1, #8]
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	bfb8      	it	lt
 800a4c0:	4613      	movlt	r3, r2
 800a4c2:	6033      	str	r3, [r6, #0]
 800a4c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	b10a      	cbz	r2, 800a4d2 <_printf_common+0x26>
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	0699      	lsls	r1, r3, #26
 800a4d6:	bf42      	ittt	mi
 800a4d8:	6833      	ldrmi	r3, [r6, #0]
 800a4da:	3302      	addmi	r3, #2
 800a4dc:	6033      	strmi	r3, [r6, #0]
 800a4de:	6825      	ldr	r5, [r4, #0]
 800a4e0:	f015 0506 	ands.w	r5, r5, #6
 800a4e4:	d106      	bne.n	800a4f4 <_printf_common+0x48>
 800a4e6:	f104 0a19 	add.w	sl, r4, #25
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	6832      	ldr	r2, [r6, #0]
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	dc26      	bgt.n	800a542 <_printf_common+0x96>
 800a4f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4f8:	1e13      	subs	r3, r2, #0
 800a4fa:	6822      	ldr	r2, [r4, #0]
 800a4fc:	bf18      	it	ne
 800a4fe:	2301      	movne	r3, #1
 800a500:	0692      	lsls	r2, r2, #26
 800a502:	d42b      	bmi.n	800a55c <_printf_common+0xb0>
 800a504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a508:	4649      	mov	r1, r9
 800a50a:	4638      	mov	r0, r7
 800a50c:	47c0      	blx	r8
 800a50e:	3001      	adds	r0, #1
 800a510:	d01e      	beq.n	800a550 <_printf_common+0xa4>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	68e5      	ldr	r5, [r4, #12]
 800a516:	6832      	ldr	r2, [r6, #0]
 800a518:	f003 0306 	and.w	r3, r3, #6
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	bf08      	it	eq
 800a520:	1aad      	subeq	r5, r5, r2
 800a522:	68a3      	ldr	r3, [r4, #8]
 800a524:	6922      	ldr	r2, [r4, #16]
 800a526:	bf0c      	ite	eq
 800a528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a52c:	2500      	movne	r5, #0
 800a52e:	4293      	cmp	r3, r2
 800a530:	bfc4      	itt	gt
 800a532:	1a9b      	subgt	r3, r3, r2
 800a534:	18ed      	addgt	r5, r5, r3
 800a536:	2600      	movs	r6, #0
 800a538:	341a      	adds	r4, #26
 800a53a:	42b5      	cmp	r5, r6
 800a53c:	d11a      	bne.n	800a574 <_printf_common+0xc8>
 800a53e:	2000      	movs	r0, #0
 800a540:	e008      	b.n	800a554 <_printf_common+0xa8>
 800a542:	2301      	movs	r3, #1
 800a544:	4652      	mov	r2, sl
 800a546:	4649      	mov	r1, r9
 800a548:	4638      	mov	r0, r7
 800a54a:	47c0      	blx	r8
 800a54c:	3001      	adds	r0, #1
 800a54e:	d103      	bne.n	800a558 <_printf_common+0xac>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a558:	3501      	adds	r5, #1
 800a55a:	e7c6      	b.n	800a4ea <_printf_common+0x3e>
 800a55c:	18e1      	adds	r1, r4, r3
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	2030      	movs	r0, #48	; 0x30
 800a562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a566:	4422      	add	r2, r4
 800a568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a56c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a570:	3302      	adds	r3, #2
 800a572:	e7c7      	b.n	800a504 <_printf_common+0x58>
 800a574:	2301      	movs	r3, #1
 800a576:	4622      	mov	r2, r4
 800a578:	4649      	mov	r1, r9
 800a57a:	4638      	mov	r0, r7
 800a57c:	47c0      	blx	r8
 800a57e:	3001      	adds	r0, #1
 800a580:	d0e6      	beq.n	800a550 <_printf_common+0xa4>
 800a582:	3601      	adds	r6, #1
 800a584:	e7d9      	b.n	800a53a <_printf_common+0x8e>
	...

0800a588 <_printf_i>:
 800a588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	7e0f      	ldrb	r7, [r1, #24]
 800a58e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a590:	2f78      	cmp	r7, #120	; 0x78
 800a592:	4691      	mov	r9, r2
 800a594:	4680      	mov	r8, r0
 800a596:	460c      	mov	r4, r1
 800a598:	469a      	mov	sl, r3
 800a59a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a59e:	d807      	bhi.n	800a5b0 <_printf_i+0x28>
 800a5a0:	2f62      	cmp	r7, #98	; 0x62
 800a5a2:	d80a      	bhi.n	800a5ba <_printf_i+0x32>
 800a5a4:	2f00      	cmp	r7, #0
 800a5a6:	f000 80d8 	beq.w	800a75a <_printf_i+0x1d2>
 800a5aa:	2f58      	cmp	r7, #88	; 0x58
 800a5ac:	f000 80a3 	beq.w	800a6f6 <_printf_i+0x16e>
 800a5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5b8:	e03a      	b.n	800a630 <_printf_i+0xa8>
 800a5ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5be:	2b15      	cmp	r3, #21
 800a5c0:	d8f6      	bhi.n	800a5b0 <_printf_i+0x28>
 800a5c2:	a101      	add	r1, pc, #4	; (adr r1, 800a5c8 <_printf_i+0x40>)
 800a5c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5c8:	0800a621 	.word	0x0800a621
 800a5cc:	0800a635 	.word	0x0800a635
 800a5d0:	0800a5b1 	.word	0x0800a5b1
 800a5d4:	0800a5b1 	.word	0x0800a5b1
 800a5d8:	0800a5b1 	.word	0x0800a5b1
 800a5dc:	0800a5b1 	.word	0x0800a5b1
 800a5e0:	0800a635 	.word	0x0800a635
 800a5e4:	0800a5b1 	.word	0x0800a5b1
 800a5e8:	0800a5b1 	.word	0x0800a5b1
 800a5ec:	0800a5b1 	.word	0x0800a5b1
 800a5f0:	0800a5b1 	.word	0x0800a5b1
 800a5f4:	0800a741 	.word	0x0800a741
 800a5f8:	0800a665 	.word	0x0800a665
 800a5fc:	0800a723 	.word	0x0800a723
 800a600:	0800a5b1 	.word	0x0800a5b1
 800a604:	0800a5b1 	.word	0x0800a5b1
 800a608:	0800a763 	.word	0x0800a763
 800a60c:	0800a5b1 	.word	0x0800a5b1
 800a610:	0800a665 	.word	0x0800a665
 800a614:	0800a5b1 	.word	0x0800a5b1
 800a618:	0800a5b1 	.word	0x0800a5b1
 800a61c:	0800a72b 	.word	0x0800a72b
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	1d1a      	adds	r2, r3, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	602a      	str	r2, [r5, #0]
 800a628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a62c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a630:	2301      	movs	r3, #1
 800a632:	e0a3      	b.n	800a77c <_printf_i+0x1f4>
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	6829      	ldr	r1, [r5, #0]
 800a638:	0606      	lsls	r6, r0, #24
 800a63a:	f101 0304 	add.w	r3, r1, #4
 800a63e:	d50a      	bpl.n	800a656 <_printf_i+0xce>
 800a640:	680e      	ldr	r6, [r1, #0]
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	2e00      	cmp	r6, #0
 800a646:	da03      	bge.n	800a650 <_printf_i+0xc8>
 800a648:	232d      	movs	r3, #45	; 0x2d
 800a64a:	4276      	negs	r6, r6
 800a64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a650:	485e      	ldr	r0, [pc, #376]	; (800a7cc <_printf_i+0x244>)
 800a652:	230a      	movs	r3, #10
 800a654:	e019      	b.n	800a68a <_printf_i+0x102>
 800a656:	680e      	ldr	r6, [r1, #0]
 800a658:	602b      	str	r3, [r5, #0]
 800a65a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a65e:	bf18      	it	ne
 800a660:	b236      	sxthne	r6, r6
 800a662:	e7ef      	b.n	800a644 <_printf_i+0xbc>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	1d19      	adds	r1, r3, #4
 800a66a:	6029      	str	r1, [r5, #0]
 800a66c:	0601      	lsls	r1, r0, #24
 800a66e:	d501      	bpl.n	800a674 <_printf_i+0xec>
 800a670:	681e      	ldr	r6, [r3, #0]
 800a672:	e002      	b.n	800a67a <_printf_i+0xf2>
 800a674:	0646      	lsls	r6, r0, #25
 800a676:	d5fb      	bpl.n	800a670 <_printf_i+0xe8>
 800a678:	881e      	ldrh	r6, [r3, #0]
 800a67a:	4854      	ldr	r0, [pc, #336]	; (800a7cc <_printf_i+0x244>)
 800a67c:	2f6f      	cmp	r7, #111	; 0x6f
 800a67e:	bf0c      	ite	eq
 800a680:	2308      	moveq	r3, #8
 800a682:	230a      	movne	r3, #10
 800a684:	2100      	movs	r1, #0
 800a686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a68a:	6865      	ldr	r5, [r4, #4]
 800a68c:	60a5      	str	r5, [r4, #8]
 800a68e:	2d00      	cmp	r5, #0
 800a690:	bfa2      	ittt	ge
 800a692:	6821      	ldrge	r1, [r4, #0]
 800a694:	f021 0104 	bicge.w	r1, r1, #4
 800a698:	6021      	strge	r1, [r4, #0]
 800a69a:	b90e      	cbnz	r6, 800a6a0 <_printf_i+0x118>
 800a69c:	2d00      	cmp	r5, #0
 800a69e:	d04d      	beq.n	800a73c <_printf_i+0x1b4>
 800a6a0:	4615      	mov	r5, r2
 800a6a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6a6:	fb03 6711 	mls	r7, r3, r1, r6
 800a6aa:	5dc7      	ldrb	r7, [r0, r7]
 800a6ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6b0:	4637      	mov	r7, r6
 800a6b2:	42bb      	cmp	r3, r7
 800a6b4:	460e      	mov	r6, r1
 800a6b6:	d9f4      	bls.n	800a6a2 <_printf_i+0x11a>
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d10b      	bne.n	800a6d4 <_printf_i+0x14c>
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	07de      	lsls	r6, r3, #31
 800a6c0:	d508      	bpl.n	800a6d4 <_printf_i+0x14c>
 800a6c2:	6923      	ldr	r3, [r4, #16]
 800a6c4:	6861      	ldr	r1, [r4, #4]
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	bfde      	ittt	le
 800a6ca:	2330      	movle	r3, #48	; 0x30
 800a6cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6d4:	1b52      	subs	r2, r2, r5
 800a6d6:	6122      	str	r2, [r4, #16]
 800a6d8:	f8cd a000 	str.w	sl, [sp]
 800a6dc:	464b      	mov	r3, r9
 800a6de:	aa03      	add	r2, sp, #12
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	f7ff fee2 	bl	800a4ac <_printf_common>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d14c      	bne.n	800a786 <_printf_i+0x1fe>
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	b004      	add	sp, #16
 800a6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f6:	4835      	ldr	r0, [pc, #212]	; (800a7cc <_printf_i+0x244>)
 800a6f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6fc:	6829      	ldr	r1, [r5, #0]
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	f851 6b04 	ldr.w	r6, [r1], #4
 800a704:	6029      	str	r1, [r5, #0]
 800a706:	061d      	lsls	r5, r3, #24
 800a708:	d514      	bpl.n	800a734 <_printf_i+0x1ac>
 800a70a:	07df      	lsls	r7, r3, #31
 800a70c:	bf44      	itt	mi
 800a70e:	f043 0320 	orrmi.w	r3, r3, #32
 800a712:	6023      	strmi	r3, [r4, #0]
 800a714:	b91e      	cbnz	r6, 800a71e <_printf_i+0x196>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	f023 0320 	bic.w	r3, r3, #32
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	2310      	movs	r3, #16
 800a720:	e7b0      	b.n	800a684 <_printf_i+0xfc>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	f043 0320 	orr.w	r3, r3, #32
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	2378      	movs	r3, #120	; 0x78
 800a72c:	4828      	ldr	r0, [pc, #160]	; (800a7d0 <_printf_i+0x248>)
 800a72e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a732:	e7e3      	b.n	800a6fc <_printf_i+0x174>
 800a734:	0659      	lsls	r1, r3, #25
 800a736:	bf48      	it	mi
 800a738:	b2b6      	uxthmi	r6, r6
 800a73a:	e7e6      	b.n	800a70a <_printf_i+0x182>
 800a73c:	4615      	mov	r5, r2
 800a73e:	e7bb      	b.n	800a6b8 <_printf_i+0x130>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	6826      	ldr	r6, [r4, #0]
 800a744:	6961      	ldr	r1, [r4, #20]
 800a746:	1d18      	adds	r0, r3, #4
 800a748:	6028      	str	r0, [r5, #0]
 800a74a:	0635      	lsls	r5, r6, #24
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	d501      	bpl.n	800a754 <_printf_i+0x1cc>
 800a750:	6019      	str	r1, [r3, #0]
 800a752:	e002      	b.n	800a75a <_printf_i+0x1d2>
 800a754:	0670      	lsls	r0, r6, #25
 800a756:	d5fb      	bpl.n	800a750 <_printf_i+0x1c8>
 800a758:	8019      	strh	r1, [r3, #0]
 800a75a:	2300      	movs	r3, #0
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	4615      	mov	r5, r2
 800a760:	e7ba      	b.n	800a6d8 <_printf_i+0x150>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	1d1a      	adds	r2, r3, #4
 800a766:	602a      	str	r2, [r5, #0]
 800a768:	681d      	ldr	r5, [r3, #0]
 800a76a:	6862      	ldr	r2, [r4, #4]
 800a76c:	2100      	movs	r1, #0
 800a76e:	4628      	mov	r0, r5
 800a770:	f7f5 fd36 	bl	80001e0 <memchr>
 800a774:	b108      	cbz	r0, 800a77a <_printf_i+0x1f2>
 800a776:	1b40      	subs	r0, r0, r5
 800a778:	6060      	str	r0, [r4, #4]
 800a77a:	6863      	ldr	r3, [r4, #4]
 800a77c:	6123      	str	r3, [r4, #16]
 800a77e:	2300      	movs	r3, #0
 800a780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a784:	e7a8      	b.n	800a6d8 <_printf_i+0x150>
 800a786:	6923      	ldr	r3, [r4, #16]
 800a788:	462a      	mov	r2, r5
 800a78a:	4649      	mov	r1, r9
 800a78c:	4640      	mov	r0, r8
 800a78e:	47d0      	blx	sl
 800a790:	3001      	adds	r0, #1
 800a792:	d0ab      	beq.n	800a6ec <_printf_i+0x164>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	079b      	lsls	r3, r3, #30
 800a798:	d413      	bmi.n	800a7c2 <_printf_i+0x23a>
 800a79a:	68e0      	ldr	r0, [r4, #12]
 800a79c:	9b03      	ldr	r3, [sp, #12]
 800a79e:	4298      	cmp	r0, r3
 800a7a0:	bfb8      	it	lt
 800a7a2:	4618      	movlt	r0, r3
 800a7a4:	e7a4      	b.n	800a6f0 <_printf_i+0x168>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	47d0      	blx	sl
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d09b      	beq.n	800a6ec <_printf_i+0x164>
 800a7b4:	3501      	adds	r5, #1
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	9903      	ldr	r1, [sp, #12]
 800a7ba:	1a5b      	subs	r3, r3, r1
 800a7bc:	42ab      	cmp	r3, r5
 800a7be:	dcf2      	bgt.n	800a7a6 <_printf_i+0x21e>
 800a7c0:	e7eb      	b.n	800a79a <_printf_i+0x212>
 800a7c2:	2500      	movs	r5, #0
 800a7c4:	f104 0619 	add.w	r6, r4, #25
 800a7c8:	e7f5      	b.n	800a7b6 <_printf_i+0x22e>
 800a7ca:	bf00      	nop
 800a7cc:	0800adfd 	.word	0x0800adfd
 800a7d0:	0800ae0e 	.word	0x0800ae0e

0800a7d4 <_read_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_read_r+0x20>)
 800a7d8:	4604      	mov	r4, r0
 800a7da:	4608      	mov	r0, r1
 800a7dc:	4611      	mov	r1, r2
 800a7de:	2200      	movs	r2, #0
 800a7e0:	602a      	str	r2, [r5, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f7fc f954 	bl	8006a90 <_read>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_read_r+0x1e>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_read_r+0x1e>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20000380 	.word	0x20000380

0800a7f8 <_fstat_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d07      	ldr	r5, [pc, #28]	; (800a818 <_fstat_r+0x20>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	4611      	mov	r1, r2
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f7fc f988 	bl	8006b1a <_fstat>
 800a80a:	1c43      	adds	r3, r0, #1
 800a80c:	d102      	bne.n	800a814 <_fstat_r+0x1c>
 800a80e:	682b      	ldr	r3, [r5, #0]
 800a810:	b103      	cbz	r3, 800a814 <_fstat_r+0x1c>
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	bd38      	pop	{r3, r4, r5, pc}
 800a816:	bf00      	nop
 800a818:	20000380 	.word	0x20000380

0800a81c <_isatty_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d06      	ldr	r5, [pc, #24]	; (800a838 <_isatty_r+0x1c>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	f7fc f987 	bl	8006b3a <_isatty>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_isatty_r+0x1a>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_isatty_r+0x1a>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20000380 	.word	0x20000380

0800a83c <_init>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	bf00      	nop
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr

0800a848 <_fini>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	bf00      	nop
 800a84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84e:	bc08      	pop	{r3}
 800a850:	469e      	mov	lr, r3
 800a852:	4770      	bx	lr
